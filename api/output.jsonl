{"url": "https://www.python.org/", "title": "Welcome to Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event >_ Launch Interactive Shell # Python 3: Fibonacci series up to n >>> def fib(n):\r\n>>>     a, b = 0, 1\r\n>>>     while a < n:\r\n>>>         print(a, end=' ')\r\n>>>         a, b = b, a+b\r\n>>>     print()\r\n>>> fib(1000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 Functions Defined The core of extensible programming is defining functions. Python allows mandatory and optional arguments, keyword arguments, and even arbitrary argument lists. More about defining functions in Python\u00a03 # Python 3: List comprehensions >>> fruits = ['Banana', 'Apple', 'Lime']\r\n>>> loud_fruits = [fruit.upper() for fruit in fruits]\r\n>>> print(loud_fruits) # List and the enumerate function >>> list(enumerate(fruits)) Compound Data Types Lists (known as arrays in other languages) are one of the compound data types that Python understands. Lists can be indexed, sliced and manipulated with other built-in functions. More about lists in Python\u00a03 # Python 3: Simple arithmetic >>> 1 / 2 0.5 >>> 2 ** 3 8 >>> 17 / 3 # classic division returns a float 5.666666666666667 >>> 17 // 3 # floor division 5 Intuitive Interpretation Calculations are simple with Python, and expression syntax is straightforward: the operators + , - , * and / work as expected; parentheses () can be used for grouping. More about simple math functions in Python\u00a03 . # For loop on a list >>> numbers = [2, 4, 6, 8]\r\n>>> product = 1\r\n>>> for number in numbers:\r\n...    product = product * number\r\n... \r\n>>> print('The product is:', product) The product is: 384 All the Flow You\u2019d Expect Python knows the usual control flow statements that other languages speak \u2014 if , for , while and range \u2014 with some of its own twists, of course. More control flow tools in Python\u00a03 # Simple output (with Unicode) >>> print(\"Hello, I'm Python!\") Hello, I'm Python! # Input, assignment >>> name = input('What is your name?\\n') What is your name?\r\nPython >>> print(f'Hi, {name}.') Hi, Python. Quick & Easy to Learn Experienced programmers in any other language can pick up Python very quickly, and beginners find the clean syntax and indentation structure easy to learn. Whet your appetite with our Python\u00a03 overview. Python is a programming language that lets you work quickly and integrate systems more effectively. Learn More Get Started Whether you're new to programming or an experienced developer, it's easy to learn and use Python. Start with our Beginner\u2019s Guide Download Python source code and installers are available for download for all versions! Latest: Python 3.13.2 Docs Documentation for Python's standard library, along with tutorials and guides, are available online. docs.python.org Jobs Looking for work or have a Python related position that you're trying to hire for? Our relaunched community-run job board is the place to go. jobs.python.org Latest News More 2025- 02-11 Python 3.14.0 alpha 5 is out 2025- 02-04 Python 3.13.2 and 3.12.9 now available! 2025- 01-15 PSF Newsletter: Awards, Grants, & PyCon US 2025! 2025- 01-14 Python 3.14.0 alpha 4 is out 2025- 01-14 Powering Python together in 2025, thanks to our community! Upcoming Events More 2025- 02-20 Workshop: Creating Python Communities 2025- 02-21 Django Girls Koforidua 2025- 02-22 DjangoCongress JP 2025 2025- 02-22 PyConf Hyderabad 2025 2025- 02-22 Python Weekend Abuja Success Stories More Since its founding in 2007, Lincoln Loop has been building sites for their clients with Python and Django. They credit Python's philosophy of practicality and explicitness, along with the rich ecosystem of open-source libraries available on PyPI, as keys to their success. Additionally, the inclusivity, openness, and strong culture of collaboration in the Python community have enabled the agency to find and hire great people who are lifelong learners. Lincoln Loop: Building a sustainable business inspired by Python\u2019s ethos by Peter Baumgartner Use Python for\u2026 More Web Development : Django , Pyramid , Bottle , Tornado , Flask , web2py GUI Development : tkInter , PyGObject , PyQt , PySide , Kivy , wxPython , DearPyGui Scientific and Numeric : SciPy , Pandas , IPython Software Development : Buildbot , Trac , Roundup System Administration : Ansible , Salt , OpenStack , xonsh >>> Python Software Foundation The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Learn more Become a Member Donate to the PSF \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Functions Defined", "Compound Data Types", "Intuitive Interpretation", "All the Flow You\u2019d Expect", "Quick & Easy to Learn", "Get Started", "Download", "Docs", "Jobs", "Latest News", "Upcoming Events", "Success Stories", "Use Python for\u2026"]}
{"url": "https://www.python.org/", "title": "Welcome to Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event >_ Launch Interactive Shell # Python 3: Fibonacci series up to n >>> def fib(n):\r\n>>>     a, b = 0, 1\r\n>>>     while a < n:\r\n>>>         print(a, end=' ')\r\n>>>         a, b = b, a+b\r\n>>>     print()\r\n>>> fib(1000) 0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 Functions Defined The core of extensible programming is defining functions. Python allows mandatory and optional arguments, keyword arguments, and even arbitrary argument lists. More about defining functions in Python\u00a03 # Python 3: List comprehensions >>> fruits = ['Banana', 'Apple', 'Lime']\r\n>>> loud_fruits = [fruit.upper() for fruit in fruits]\r\n>>> print(loud_fruits) # List and the enumerate function >>> list(enumerate(fruits)) Compound Data Types Lists (known as arrays in other languages) are one of the compound data types that Python understands. Lists can be indexed, sliced and manipulated with other built-in functions. More about lists in Python\u00a03 # Python 3: Simple arithmetic >>> 1 / 2 0.5 >>> 2 ** 3 8 >>> 17 / 3 # classic division returns a float 5.666666666666667 >>> 17 // 3 # floor division 5 Intuitive Interpretation Calculations are simple with Python, and expression syntax is straightforward: the operators + , - , * and / work as expected; parentheses () can be used for grouping. More about simple math functions in Python\u00a03 . # For loop on a list >>> numbers = [2, 4, 6, 8]\r\n>>> product = 1\r\n>>> for number in numbers:\r\n...    product = product * number\r\n... \r\n>>> print('The product is:', product) The product is: 384 All the Flow You\u2019d Expect Python knows the usual control flow statements that other languages speak \u2014 if , for , while and range \u2014 with some of its own twists, of course. More control flow tools in Python\u00a03 # Simple output (with Unicode) >>> print(\"Hello, I'm Python!\") Hello, I'm Python! # Input, assignment >>> name = input('What is your name?\\n') What is your name?\r\nPython >>> print(f'Hi, {name}.') Hi, Python. Quick & Easy to Learn Experienced programmers in any other language can pick up Python very quickly, and beginners find the clean syntax and indentation structure easy to learn. Whet your appetite with our Python\u00a03 overview. Python is a programming language that lets you work quickly and integrate systems more effectively. Learn More Get Started Whether you're new to programming or an experienced developer, it's easy to learn and use Python. Start with our Beginner\u2019s Guide Download Python source code and installers are available for download for all versions! Latest: Python 3.13.2 Docs Documentation for Python's standard library, along with tutorials and guides, are available online. docs.python.org Jobs Looking for work or have a Python related position that you're trying to hire for? Our relaunched community-run job board is the place to go. jobs.python.org Latest News More 2025- 02-11 Python 3.14.0 alpha 5 is out 2025- 02-04 Python 3.13.2 and 3.12.9 now available! 2025- 01-15 PSF Newsletter: Awards, Grants, & PyCon US 2025! 2025- 01-14 Python 3.14.0 alpha 4 is out 2025- 01-14 Powering Python together in 2025, thanks to our community! Upcoming Events More 2025- 02-20 Workshop: Creating Python Communities 2025- 02-21 Django Girls Koforidua 2025- 02-22 DjangoCongress JP 2025 2025- 02-22 PyConf Hyderabad 2025 2025- 02-22 Python Weekend Abuja Success Stories More Since its founding in 2007, Lincoln Loop has been building sites for their clients with Python and Django. They credit Python's philosophy of practicality and explicitness, along with the rich ecosystem of open-source libraries available on PyPI, as keys to their success. Additionally, the inclusivity, openness, and strong culture of collaboration in the Python community have enabled the agency to find and hire great people who are lifelong learners. Lincoln Loop: Building a sustainable business inspired by Python\u2019s ethos by Peter Baumgartner Use Python for\u2026 More Web Development : Django , Pyramid , Bottle , Tornado , Flask , web2py GUI Development : tkInter , PyGObject , PyQt , PySide , Kivy , wxPython , DearPyGui Scientific and Numeric : SciPy , Pandas , IPython Software Development : Buildbot , Trac , Roundup System Administration : Ansible , Salt , OpenStack , xonsh >>> Python Software Foundation The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Learn more Become a Member Donate to the PSF \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Functions Defined", "Compound Data Types", "Intuitive Interpretation", "All the Flow You\u2019d Expect", "Quick & Easy to Learn", "Get Started", "Download", "Docs", "Jobs", "Latest News", "Upcoming Events", "Success Stories", "Use Python for\u2026"]}
{"url": "https://www.python.org/about/apps/", "title": "Applications for Python | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> About >>> Applications Applications for Python Python is used in many application domains.  Here's\na sampling. The Python Package Index lists\nthousands of third party modules for Python. Web and Internet Development Python offers many choices for web development : Frameworks such as Django and Pyramid . Micro-frameworks such as Flask and Bottle . Advanced content management systems such as Plone and django CMS . Python's standard library supports many Internet protocols: HTML and XML JSON E-mail processing . Support for FTP , IMAP , and\nother Internet protocols . Easy-to-use socket interface . And the Package Index has yet more libraries: Requests , a powerful\nHTTP client library. Beautiful Soup ,\nan HTML parser that can handle all sorts of oddball HTML. Feedparser for parsing\nRSS/Atom feeds. Paramiko , implementing\nthe SSH2 protocol. Twisted Python , a framework for\nasynchronous network programming. Scientific and Numeric Python is widely used in scientific and numeric computing: SciPy is a collection of packages for mathematics,\nscience, and engineering. Pandas is a data analysis and\nmodeling library. IPython is a powerful interactive shell that\nfeatures easy editing and recording of a work session, and\nsupports visualizations and parallel computing. The Software Carpentry Course teaches\nbasic skills for scientific computing, running bootcamps and providing\nopen-access teaching materials. Education Python is a superb language for teaching programming, both at the introductory\nlevel and in more advanced courses. Books such as How to Think Like a Computer Scientist , Python Programming: An Introduction to Computer Science , and Practical Programming . The Education Special Interest Group is a good place to discuss teaching issues. Desktop GUIs The Tk GUI library\nis included with most binary distributions of Python. Some toolkits that are usable on several platforms are available\nseparately: wxWidgets Kivy , for writing multitouch applications. Qt via pyqt or pyside Platform-specific toolkits are also available: GTK+ Microsoft Foundation Classes through the win32 extensions Software Development Python is often used as a support language for software developers,\nfor build control and management, testing, and in many other ways. SCons for build control. Buildbot and Apache Gump for automated continuous compilation and testing. Roundup or Trac for bug tracking and project management. Business Applications Python is also used to build ERP and e-commerce systems: Odoo is an all-in-one management software that offers\na range of business applications that form a complete suite of enterprise management\napplications. Tryton is a three-tier high-level general purpose application platform. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Applications for Python", "Web and Internet Development", "Scientific and Numeric", "Education", "Desktop GUIs", "Software Development", "Business Applications", "The PSF"]}
{"url": "https://www.python.org/about/", "title": "About Python\u2122 | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python is powerful... and fast; plays well with others; runs everywhere; is friendly & easy to learn; is Open. These are some of the reasons people who use Python would rather not use anything else. Getting Started Python can be easy to pick up whether you're a first time programmer or you're experienced with other languages. The following pages are a useful first step to get on your way writing programs with Python! Beginner's Guide, Programmers Beginner's Guide, Non-Programmers Beginner's Guide, Download & Installation Code sample and snippets for Beginners Friendly & Easy to Learn The community hosts conferences and meetups, collaborates on code, and much more. Python's documentation will help you along the way, and the mailing lists will keep you in touch. Conferences and Workshops Python Documentation Mailing Lists and IRC channels Applications The Python Package Index (PyPI) hosts thousands of third-party modules for Python. Both Python's standard library and the community-contributed modules allow for endless possibilities. Web and Internet Development Database Access Desktop GUIs Scientific & Numeric Education Network Programming Software & Game Development Open-source Python is developed under an OSI-approved open source license, making it freely usable and distributable, even for commercial use. Python's license is administered by the Python Software Foundation . Learn more about the license Python license on OSI Learn more about the Foundation Can\u2019t find what you\u2019re looking for? Try our comprehensive Help section Latest News More 2025- 02-11 Python 3.14.0 alpha 5 is out 2025- 02-04 Python 3.13.2 and 3.12.9 now available! 2025- 01-15 PSF Newsletter: Awards, Grants, & PyCon US 2025! 2025- 01-14 Python 3.14.0 alpha 4 is out 2025- 01-14 Powering Python together in 2025, thanks to our community! Upcoming Events More 2025- 02-20 Workshop: Creating Python Communities 2025- 02-21 Django Girls Koforidua 2025- 02-22 DjangoCongress JP 2025 2025- 02-22 PyConf Hyderabad 2025 2025- 02-22 Python Weekend Abuja >>> Python Software Foundation The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Learn more Become a Member Donate to the PSF \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python is powerful... and fast;", "plays well with others;", "runs everywhere;", "is friendly & easy to learn;", "is Open.", "Getting Started", "Friendly & Easy to Learn", "Applications", "Open-source", "Latest News", "Upcoming Events"]}
{"url": "https://www.python.org/community/irc/", "title": "Internet Relay Chat | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> IRC Internet Relay Chat There are several Python-related channels on the libera IRC network.\nAll channels are available by connecting to Internet Relay Chat server Libera.Chat . The #python channel is for all discussion about the Python language,\necosystem, and community. You can get immediate help with programming\nquestions. You will need to first register your nickname with Libera,\nusing the nickname setup instructions ( https://libera.chat/guides/registration ). Spanish speakers can use the #pyar channel, from the Python Argentina user group. French speakers can join the #python-fr channel. Finnish speakers can join the #python.fi channel on a different network, IRCnet . (Note: prior to May 2021, these channels existed on Freenode. Some of them\nwere forcibly removed by Freenode operators, after a change in management and network policy. The channels on Freenode are no longer under the PSF umbrella.) Other Channels #python-dev is for CPython developers, where they can\ncoordinate their work or discuss problems.  Bots post updates to the channel based on\nactivity in the CPython source tree and bug tracker. #python-infra is for Python infrastructure discussion. #pydotorg is for discussion of this website, python.org. #distutils and #pypa are for Python packaging discussion. Other Sites IRC clients for many platforms can be found in the Internet Relay Chat (IRC)\nHelp Archive . The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Internet Relay Chat", "Other Channels", "Other Sites", "The PSF"]}
{"url": "https://www.python.org/community/", "title": "Our Community | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python\u2019s community is vast ; diverse & aims to grow ; Python is Open . Great software is supported by great people, and Python is no exception. Our user base is enthusiastic and dedicated to spreading use of the language far and wide. Our community can help support the beginner, the expert, and adds to the ever-increasing open-source knowledgebase. Getting Started New to the community? Here are some great places to get started: Python FAQs Attend a Conference Diversity Statement Community Survey We want to be open about how we can improve transparency, provide the community with opportunities to interact with us, and be responsive to raised suggestions. Contribute by filling out the Python Software Foundation Community Survey here . Success Stories My experience with the Python community has been awesome. I have met some fantastic people through local meetups and gotten great support. @alex_gaynor Python Weekly Python Weekly is a free weekly email newsletter featuring curated news, articles, new releases, jobs, and more. Curated by Rahul Chaudhary every Thursday. Go to pythonweekly.com to sign up. PySlackers PySlackers is a community of Python enthusiasts centered around an open Slack team. Go to pyslackers.com for more information and to join. Python Discord Python Discord is a large community focused around the Python programming language. Go to pythondiscord.com for more information and to join. Python Developers Community \u2013 LinkedIn This is the place where Python Engineers level up their knowledge, skills and network. Exchange technical publications, coding tutorials and other learning resources. Go to the Python Developers Community on LinkedIn . Internet Relay Chat Libera.Chat hosts several channels. Select an IRC client , register your nickname with Libera.Chat , and you can be off and running! Libera.Chat IRC General Channels #python for general questions #python-dev for CPython developers \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": [";", ";", ".", "Getting Started", "Community Survey", "Success Stories", "Python Weekly", "PySlackers", "Python Discord", "Python Developers Community \u2013 LinkedIn", "Internet Relay Chat"]}
{"url": "https://www.python.org/jobs/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Get exploring! 15 jobs on the Python Job Board New Python/MATLAB Programmer Panacorp Software Solutions nagercoil, Kanyakumari District, India Machine Learning Posted: 14 February 2025 Researcher / Scientist New Senior Python Backend Engineer Reef Technologies Warsaw (fully remote), Poland Back end , Database Posted: 11 February 2025 Developer / Engineer New Lead Python Backend Engineer Reef Technologies Warsaw (fully remote), Poland Back end , Lead Posted: 11 February 2025 Developer / Engineer New Sr. Software Engineer - R&D Modeling and Simulation ASML San Jose, US Image Processing , Support, Linux, Python, Unix, NodeJS Posted: 31 January 2025 Developer / Engineer New Machine Learning Engineer for Agentic AI Scalable Path Remote, Remote, Latin America Back end , Machine Learning , Agentic Workflows Posted: 30 January 2025 Data Analyst New Python Annotator Summa Linguae Technologies Remote, Remote Machine Learning , Text Processing Posted: 28 January 2025 Other New Senior Backend Engineer BactoBio London, UK Back end Posted: 22 January 2025 Developer / Engineer New G2i Remote, MG, Remote Back end Posted: 20 January 2025 Developer / Engineer Senior Software Engineer, AI UpDoc, Inc. Remote, Remote, United States Back end , Cloud , Machine Learning , Web Posted: 18 January 2025 Developer / Engineer Senior Data Engineer (SaaS) Poplin Bogota, Latin America Posted: 16 January 2025 Developer / Engineer Data Administrator Pepper Wireless Richmond, BC, Canada Database Posted: 07 January 2025 Data Analyst Python Engineering Manager Tillo Hove, East Sussex, United Kingdom Back end Posted: 13 December 2024 Manager / Executive Senior Backend Engineer - Poland Focal Systems remote, Poland Back end Posted: 05 December 2024 Developer / Engineer Software Programmer J.F.T. Maintenance Services Limited West Winch, Norfolk, United Kingdom Back end , Database , Front end Posted: 01 December 2024 Developer / Engineer Python Developer Leidos Tucson, US Web Posted: 25 November 2024 Developer / Engineer Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Get exploring!", "15 jobs on the Python Job Board", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/psf/annual-report/2021/", "title": "2021 PSF Annual Report | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> About >>> Annual Impact Report The Python Software Foundation 2021 Annual Report 2021 was a year of continued changes, challenges, and growth for the PSF. We said goodbye to our first Executive Director and welcomed four new team members in new roles. We celebrated our 20th anniversary and built on the successes of our first two decades to launch new areas of work that advance our mission and help us to even better serve our Python community. We\u2019d love for you to take a look at the 2021 Annual Report that we put together to share some highlights from the year, financial reporting, and some previews of what\u2019s to come in the next year. Download and read the report today! Thank you to Robb Design Co. for the beautiful design! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["The Python Software Foundation 2021 Annual Report"]}
{"url": "https://www.python.org/community/forums/", "title": "Forums | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Forums Forums The official Python Community forums are hosted at discuss.python.org . If you're looking for additional forums or forums in your native language, please check out the local user groups page at the Python Wiki . Python Forum (English) Python-Forum.de (German) r/Python (English) r/learnpython (English) The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Forums", "The PSF"]}
{"url": "https://www.python.org/community/lists/", "title": "Mailing Lists | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Mailing Lists Mailing Lists Python Mailing Lists and Newsgroups Here's an overview of the mail and news resources for python. For a\ncomplete listing of python.org's public mailing lists, check both lists hosted\non Mailman 2 and lists hosted on Mailman 3 . To request a new list, send e-mail to postmaster @ python.org; please check first to make sure a similar list does not already exist. Mailing lists for users speaking languages other than\nEnglish are listed in the non-English python resources guide, which includes mailing\nlists, translated and original non-English documentation, and other\nresources. comp.lang.python newsgroup and python-list mailing list comp.lang.python is a high-volume\nUsenet open (not moderated) newsgroup for general discussions and\nquestions about Python.  You can also access it as a mailing list through python-list . Pretty much anything Python-related is fair game for discussion, and the group is even fairly tolerant of off-topic digressions; there have been entertaining discussions of topics such as floating point, good software design, and other programming languages such as Lisp and Forth. Most discussion on comp.lang.python is about developing with Python, not about development of the Python interpreter itself. Some of the core developers still read the list, but most of them don't. Occasionally comp.lang.python suggestions have resulted in an enhancement proposal being written, leading to a new Python feature. If you find a bug in Python, don't send it to comp.lang.python; file a bug report in the issue tracker . Items posted on the Usenet group appear on the mailing list, and vice\nversa (bidirectional gateway). Due to the mysteries of Usenet, the\norder in which items show up may vary. Rudeness and personal attacks, even in reaction to blatant flamebait, are strongly frowned upon. People may strongly disagree on an issue, but usually discussion remains civil. In case of an actual flamebait posting, you can ignore it, quietly plonk the offending poster in your killfile or mail filters, or write a sharp but still-polite response, but at all costs resist the urge to flame back. Generally comp.lang.python is a high-signal, low-noise group. It's also a high-traffic group, running at around 200 posts per day. An archive of the list is available: python.org archive of python-list comp.lang.python in non-English There are some non-English language versions of this newsgroup. The links provided here are to the Google Groups archive for each: de.comp.lang.python (German), it.comp.lang.python (Italian), pl.comp.lang.python (Polish), fr.comp.lang.python (French), and cz.comp.lang.python (Czech). comp.lang.python.announce newgroup and python-announce mailing list comp.lang.python.announce is a\nlow-volume moderated forum for Python-related announcements. New\nmodules and programs are announced here, and it's where PEPs are posted to get comments from the community.\nYou'll also see announcements for conferences. This is a moderated newsgroup carrying at most perhaps 10 to 20 messages per week, so it's an easy way to be keep up-to-date on what's new in the Python world. See the comp.lang.python.announce posting guidelines for guidelines on submitting announcements. It is also available as a moderated mailing list, python-announce. Subscribing can be done via the python-announce list information page . comp.lang.python.announce is moderated by a team of people. If you need to contact them directly, e.g. to ask why a particular message was rejected, write to clpa-moderators-owner @ python.org. There are several archives for comp.lang.python.announce: Google Groups archive of comp.lang.python.announce python.org archive of python-announce tutor mailing list The tutor mailing list is for users who want to ask questions about learning computer programming with Python. An archive of the list is available. People interested in learning about programming with Python are\nencouraged to join, as are experienced users interested in helping\nothers learn -- teaching other people is one of the best ways to learn\nmore yourself! python-dev mailing list python-dev used to be used as the main mailing list for developing Python, with practically all core developers subscribed to it. It has since been put into read-only mode. The archive is still available at Mailman 3 Python-Dev Archive . Discussion has moved on to our Discourse instance. The Core Development category has taken up the purpose of the python-dev mailing list. python-ideas mailing list The python-ideas list is for discussing more speculative design ideas. python-ideas Mailman interface The Mail Archive of python-ideas Just like for python-dev, most discussions have moved on to the Discourse instance in form of the Ideas category . python-checkins mailing list The python-checkins mailing list receives an automatically generated message for each change committed to the Python Subversion tree. python-checkins makes it easy for developers to know what is happening in the repository. The volume of traffic on this list varies widely based on developer activity. python-help mailing list The python-help mailing list is python.org's help desk. You can ask a group of knowledgeable volunteers questions about all your Python problems. You can send email to python-help by writing to help @ python.org for individual support. Mail sent there lands in the mailbox of a small group of volunteers who may reply to reasonable requests for help, depending on their area of expertise. Using it is much preferred to sending mail directly to Guido or some other individual, but less preferable than posting to comp.lang.python. In all cases, try searching the various archives first. When you ask a question, be sure to give your configuration: what hardware platform, what OS (and version), what Python version, and (when using Tkinter) what Tcl/Tk version you are using. If you're using an older Python version, try upgrading to the latest version first -- things often get better! You can't subscribe to python-help -- it is not for bystanders, only for questioners to submit questions and for helpers to receive and field them. The archives are not accessible, to protect the questioners' privacy. If you would like to help answer questions, send your qualifications to webmaster @ python.org. When you send a message to python-help, you will get an automated response. Your message is still delivered to the volunteers, and you will only receive this automated response once every approximately three months. Special Interest Groups Special Interest Groups (SIGs) are smaller communities focused on a particular topic or application such as databases, Python on macOS, etc. Every SIG has a mailing list of its own. See the SIG page for more information. SIGs vary in their success. Some, such as the XML, Database, and Distutils SIGs, have produced specifications and software that are now used throughout the Python community. Not all SIGs are as productive, though, and some sputter along for years without ever finalizing an implementation or a document. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Mailing Lists", "Python Mailing Lists and Newsgroups", "comp.lang.python newsgroup and python-list mailing list", "comp.lang.python in non-English", "comp.lang.python.announce newgroup and python-announce mailing list", "tutor mailing list", "python-dev mailing list", "python-ideas mailing list", "python-checkins mailing list", "python-help mailing list", "Special Interest Groups", "The PSF"]}
{"url": "https://www.python.org/community/diversity/", "title": "Diversity | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Diversity Diversity Diversity Statement The Python Software Foundation and the global Python community welcome\nand encourage participation by everyone. Our community is based on mutual\nrespect, tolerance, and encouragement, and we are working to help each\nother live up to these principles. We want our community to be more\ndiverse: whoever you are, and whatever your background, we welcome you. Diversity Appendix We have created this diversity statement because we believe that a\ndiverse Python community is stronger and more vibrant.  A diverse\ncommunity where people treat each other with respect has more potential\ncontributors and more sources for ideas. Although we have phrased the formal diversity statement generically to\nmake it all-inclusive, we recognize that there are specific attributes\nthat are used to discriminate against people.  In alphabetical order,\nsome of these attributes include (but are not limited to): age, culture,\nethnicity, gender identity or expression, national origin, physical or\nmental difference, politics, race, religion, sex, sexual orientation,\nsocio-economic status, and subculture.  We welcome people regardless of\nthe values of these or other attributes. The Python community welcomes people no matter what languages they are\nfluent in.  (Although core Python development is done in English.)  The\nPython community encourages the creation of user groups in all locales,\nand many of them are listed at http://wiki.python.org/moin/LocalUserGroups Many of these user groups also have mailing lists in the locally\npreferred language. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Diversity", "Diversity Statement", "Diversity Appendix", "The PSF"]}
{"url": "https://www.python.org/doc/essays/", "title": "Python Documentation Index | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Documentation >>> Python Essays Python Documentation Index Python Essays In this directory I place short essays (anything from 500 to 5000\nwords) on various Python subjects.  See also a collection of presentations I have given.  See also my blog at blogspot.com and my previous blog at\nartima.com. -- Guido van Rossum Table of contents (in mostly chronological order) Unifying types and classes in Python 2.2 (See below) Foreword for \"Programming Python\" (1st ed.) Written in 1996, this gives an overview of the early history and\nbackground of Python and some of my philosophy about software design\nand project management.  See also my foreword to the 2nd edition . Implementing Graphs An elegant and perhaps not obvious way to represent graphs using\nPython's most fundamental and versatile data types, lists and\ndictionaries. An Optimization Anecdote Required reading if you find that your Python code runs too slow. Metaclass Programming in Python 1.5 Warning: reading this document may cause your brain to explode. Built-in Package Support in Python 1.5 The most official documentation for the new package features in\nPython 1.5. Standard Exception Classes in Python 1.5 The most official documentation for the new exception features in\nPython 1.5.  (Updated for Python 1.5.2 by Barry Warsaw.) Glue It All Together With Python A position paper I wrote for and presented at the OMG-DARPA-MCC workshop on compositional software architectures in Monterey,\nCalifornia, January 6-8, 1998. What Is Python? Executive Summary A short (two paragraphs) high-level presentation of Python's virtues. Comparing Python to Other Languages Activist ammo or flame fodder?  (Note: I received lots of feedback\nwhen I posted this to comp.lang.python.  Unfortunately the feedback\nwas diverted to a separate mailbox that I didn't know I had -- when I\nfinally found it, I was a bit overwhelmed and so far have not yet\nfound the time to update the article.) Proposed Improvements to Module Cleanup A revised version of the proposal I posted to comp.lang.python on\nFeb 6, 1998.  This has been adopted in Python 1.5.1. Open Source Summit Trip Report My trip report of O'Reilly's Open Source Summit, essentially as\nposted on c.l.p.  This version published in the Linux Gazette (it's an\nexternal link), in their May 1998 issue. Debugging Reference Count Problems An edited version of a posting to c.l.p on this subject, on May 27, 1998. Computer Programming for Everybody (old) A funding proposal that was accepted by DARPA in March 1999. Computer Programming for Everybody Revised, extended version of the previous proposal. Interview in Linux Journal Not quite an essay, but a stream of consciousness penned down by a\njournalist...  More thoughts about CP4E. Interview in by Frank Willison for \"Frankly Speaking\" column Another stream of consciousness transcribed by a friendly\nlistener...  Not just on CP4E. Foreword for \"Programming Python\" (2nd ed.) The story continues... Unifying types and classes in Python 2.2 An introduction to the type/class unification effort in Python\n2.2.  Note that the unification work is officially labeled experimental and is subject to change in future releases of\nPython. Parade of the PEPs To start off Developer's Day at the Python10 conference I gave a\nkeynote ending in what I dubbed \"the parade of the PEPs\". It was a\nbrief overview of all open PEPs , where I gave my highly personal and subjective opinion\nfor each PEP.  Later, I realized that this might have been of interest\nto other developers.  I didn't take notes at the conference, so below\nis a different set of comments that I created from scratch during a\nsingle two-hour sitting on March 7, 2002.  I intend to occasionally\nupdate this with new comments and new PEPs. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Documentation Index", "Python Essays", "Table of contents (in mostly chronological order)", "The PSF"]}
{"url": "https://www.python.org/doc/", "title": "Our Documentation | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Browse the docs online or download a copy of your own. Python's documentation, tutorials, and guides are constantly evolving. Get started here, or scroll down for documentation broken out by type and subject. Python Docs See also Documentation Releases by Version Beginner Beginner\u2019s Guide Python FAQs Moderate Python Periodicals Python Books Advanced Python Packaging User Guide In-development Docs Guido\u2019s Essays General PEP Index Python Videos Developer\u2019s Guide Python 3.x Resources Browse Python 3.13.2 Documentation - (Module Index) What's new in Python 3.13 Tutorial Library Reference Language Reference Extending and Embedding Python/C API Using Python Python HOWTOs Glossary Search the online docs Download Current Documentation (multiple formats are available, including typeset versions for printing.) Porting from Python 2 to Python 3 FAQ: Sunsetting Python 2 Final Python 2.7 Release Schedule Python 3 Statement Porting Python 2 Code to Python 3 Determine what projects are blocking you from porting to Python 3 Python 2 Support and Migration Can\u2019t find what you\u2019re looking for? Try our comprehensive Help section >>> Python Needs You Open source software is made better when users can easily contribute code and documentation to fix bugs and add features. Python strongly encourages community involvement in improving the software. Learn more about how to make Python better for everyone. Contribute to Python Issue Tracker \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Browse the docs online or download a copy of your own.", "Beginner", "Moderate", "Advanced", "General", "Python 3.x Resources", "Porting from Python 2 to Python 3"]}
{"url": "https://www.python.org/download/other/", "title": "Download Python for Other Platforms | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Downloads >>> Other Platforms Download Python for Other Platforms Python has been ported to a number of specialized and/or older platforms,\nlisted below in alphabetical order.  Note that these ports often lag\nwell behind the latest Python release. Python for AIX AIX binary packages for Python are available from IBM AIX Toolbox in RPM format. They can be installed using dnf package manager. Visit the Get Started page for more details. Python for IBM i (formerly AS/400, iSeries) Both Python 2 and Python 3 are available from IBM in RPM form. They can be installed with the yum package manager or with the IBM i Access Client Solutions product. To get started with RPM-based open source packages for IBM i, visit http://ibm.biz/ibmi-rpms .  These RPM packages require a version of IBM i in active (not extended) support. Python for iOS and iPadOS Pythonista is a complete development environment for writing Python scripts including third-party libraries and system integration on your iPad or iPhone. Pyto also provides a complete development environment for running Python 3 including many third-party libraries and system integration on an iPad or iPhone. Python for z/OS Rocket Software provides a port of Python for z/OS . Python for z/OS is available from IBM for no license charge. It is available in PAX format from Early Programs Web Tool or SMP/E format from Shopz .\nOptional no-cost Subscription and Support (S&S) is available in the Shopz ordering process.\nPlease visit the IBM Open Enterprise SDK for Python product page for more information. Python for RISC OS Python is available for RISC OS, and can be obtained using the PackMan package manager. Python for Solaris You can purchase ActivePython (commercial and community versions, including scientific computing modules, not open source), or build from source if you have a C compiler. UNIX Packages has a variety\nof Python versions for a variety of Solaris versions.  These use the\nstandard Sun pkgadd. Python for UEFI Environment Standard CPython version 3.6.8 port for the Unified Extensible Firmware Interface (UEFI)\nshell environment is available through the Tianocore open source project.\nThis provides the standard Python scripting capabilities on UEFI environment,\nhelping the UEFI based firmware and platform developer community to use it for platform,\nfirmware validation, debug and the like.\nPython for UEFI source code and build instructions are available here . Currently build support is enabled using VS2019 and GCC5 tool chains for x86 and x64 bit platforms. Python for HP-UX You can purchase ActivePython (commercial and community versions, including scientific computing modules, not open source) Alternate Python packages for Linux You can purchase ActivePython (commercial and community versions, including scientific computing modules, not open source) The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Download Python for Other Platforms", "Python for AIX", "Python for IBM i (formerly AS/400, iSeries)", "Python for iOS and iPadOS", "Python for z/OS", "Python for RISC OS", "Python for Solaris", "Python for UEFI Environment", "Python for HP-UX", "Alternate Python packages for Linux", "The PSF"]}
{"url": "https://www.python.org/downloads/macos/", "title": "Python Releases for macOS | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Downloads >>> macOS Python Releases for macOS Latest Python 3 Release - Python 3.13.2 Stable Releases Python 3.13.2 - Feb. 4, 2025 Download macOS 64-bit universal2 installer Python 3.12.9 - Feb. 4, 2025 Download macOS 64-bit universal2 installer Python 3.12.8 - Dec. 3, 2024 Download macOS 64-bit universal2 installer Python 3.13.1 - Dec. 3, 2024 Download macOS 64-bit universal2 installer Python 3.11.11 - Dec. 3, 2024 No files for this release. Python 3.10.16 - Dec. 3, 2024 No files for this release. Python 3.9.21 - Dec. 3, 2024 No files for this release. Python 3.13.0 - Oct. 7, 2024 Download macOS 64-bit universal2 installer Python 3.12.7 - Oct. 1, 2024 Download macOS 64-bit universal2 installer Python 3.11.10 - Sept. 7, 2024 No files for this release. Python 3.10.15 - Sept. 7, 2024 No files for this release. Python 3.12.6 - Sept. 6, 2024 Download macOS 64-bit universal2 installer Python 3.9.20 - Sept. 6, 2024 No files for this release. Python 3.8.20 - Sept. 6, 2024 No files for this release. Python 3.12.5 - Aug. 6, 2024 Download macOS 64-bit universal2 installer Python 3.12.4 - June 6, 2024 Download macOS 64-bit universal2 installer Python 3.12.3 - April 9, 2024 Download macOS 64-bit universal2 installer Python 3.11.9 - April 2, 2024 Download macOS 64-bit universal2 installer Python 3.10.14 - March 19, 2024 No files for this release. Python 3.9.19 - March 19, 2024 No files for this release. Python 3.8.19 - March 19, 2024 No files for this release. Python 3.11.8 - Feb. 6, 2024 Download macOS 64-bit universal2 installer Python 3.12.2 - Feb. 6, 2024 Download macOS 64-bit universal2 installer Python 3.12.1 - Dec. 8, 2023 Download macOS 64-bit universal2 installer Python 3.11.7 - Dec. 4, 2023 Download macOS 64-bit universal2 installer Python 3.12.0 - Oct. 2, 2023 Download macOS 64-bit universal2 installer Python 3.11.6 - Oct. 2, 2023 Download macOS 64-bit universal2 installer Python 3.11.5 - Aug. 24, 2023 Download macOS 64-bit universal2 installer Python 3.10.13 - Aug. 24, 2023 No files for this release. Python 3.9.18 - Aug. 24, 2023 No files for this release. Python 3.8.18 - Aug. 24, 2023 No files for this release. Python 3.10.12 - June 6, 2023 No files for this release. Python 3.11.4 - June 6, 2023 Download macOS 64-bit universal2 installer Python 3.7.17 - June 6, 2023 No files for this release. Python 3.8.17 - June 6, 2023 No files for this release. Python 3.9.17 - June 6, 2023 No files for this release. Python 3.10.11 - April 5, 2023 Download macOS 64-bit universal2 installer Python 3.11.3 - April 5, 2023 Download macOS 64-bit universal2 installer Python 3.10.10 - Feb. 8, 2023 Download macOS 64-bit universal2 installer Python 3.11.2 - Feb. 8, 2023 Download macOS 64-bit universal2 installer Python 3.11.1 - Dec. 6, 2022 Download macOS 64-bit universal2 installer Python 3.10.9 - Dec. 6, 2022 Download macOS 64-bit universal2 installer Python 3.9.16 - Dec. 6, 2022 No files for this release. Python 3.8.16 - Dec. 6, 2022 No files for this release. Python 3.7.16 - Dec. 6, 2022 No files for this release. Python 3.11.0 - Oct. 24, 2022 Download macOS 64-bit universal2 installer Python 3.9.15 - Oct. 11, 2022 No files for this release. Python 3.8.15 - Oct. 11, 2022 No files for this release. Python 3.10.8 - Oct. 11, 2022 Download macOS 64-bit universal2 installer Python 3.7.15 - Oct. 11, 2022 No files for this release. Python 3.7.14 - Sept. 6, 2022 No files for this release. Python 3.8.14 - Sept. 6, 2022 No files for this release. Python 3.9.14 - Sept. 6, 2022 No files for this release. Python 3.10.7 - Sept. 6, 2022 Download macOS 64-bit universal2 installer Python 3.10.6 - Aug. 2, 2022 Download macOS 64-bit universal2 installer Python 3.10.5 - June 6, 2022 Download macOS 64-bit universal2 installer Python 3.9.13 - May 17, 2022 Download macOS 64-bit Intel-only installer Download macOS 64-bit universal2 installer Python 3.10.4 - March 24, 2022 Download macOS 64-bit universal2 installer Python 3.9.12 - March 23, 2022 Download macOS 64-bit Intel-only installer Download macOS 64-bit universal2 installer Python 3.10.3 - March 16, 2022 Download macOS 64-bit universal2 installer Python 3.9.11 - March 16, 2022 Download macOS 64-bit Intel-only installer Download macOS 64-bit universal2 installer Python 3.8.13 - March 16, 2022 No files for this release. Python 3.7.13 - March 16, 2022 No files for this release. Python 3.9.10 - Jan. 14, 2022 Download macOS 64-bit Intel-only installer Download macOS 64-bit universal2 installer Python 3.10.2 - Jan. 14, 2022 Download macOS 64-bit universal2 installer Python 3.10.1 - Dec. 6, 2021 Download macOS 64-bit universal2 installer Python 3.9.9 - Nov. 15, 2021 Download macOS 64-bit Intel-only installer Download macOS 64-bit universal2 installer Python 3.9.8 - Nov. 5, 2021 Download macOS 64-bit Intel-only installer Download macOS 64-bit universal2 installer Python 3.10.0 - Oct. 4, 2021 Download macOS 64-bit universal2 installer Python 3.7.12 - Sept. 4, 2021 No files for this release. Python 3.6.15 - Sept. 4, 2021 No files for this release. Python 3.9.7 - Aug. 30, 2021 Download macOS 64-bit Intel installer Download macOS 64-bit universal2 installer Python 3.8.12 - Aug. 30, 2021 No files for this release. Python 3.9.6 - June 28, 2021 Download macOS 64-bit Intel installer Download macOS 64-bit universal2 installer Python 3.8.11 - June 28, 2021 No files for this release. Python 3.7.11 - June 28, 2021 No files for this release. Python 3.6.14 - June 28, 2021 No files for this release. Python 3.9.5 - May 3, 2021 Download macOS 64-bit Intel installer Download macOS 64-bit universal2 installer Python 3.8.10 - May 3, 2021 Download macOS 64-bit Intel installer Download macOS 64-bit universal2 installer Python 3.9.4 - April 4, 2021 Download macOS 64-bit Intel installer Download macOS 64-bit universal2 installer Python 3.9.3 - April 2, 2021 No files for this release. Python 3.8.9 - April 2, 2021 Download macOS 64-bit Intel installer Python 3.9.2 - Feb. 19, 2021 Download macOS 64-bit Intel installer Download macOS 64-bit universal2 installer Python 3.8.8 - Feb. 19, 2021 Download macOS 64-bit Intel installer Python 3.6.13 - Feb. 15, 2021 No files for this release. Python 3.7.10 - Feb. 15, 2021 No files for this release. Python 3.8.7 - Dec. 21, 2020 Download macOS 64-bit Intel installer Python 3.9.1 - Dec. 7, 2020 Download macOS 64-bit Intel installer Download macOS 64-bit universal2 installer Python 3.9.0 - Oct. 5, 2020 Download macOS 64-bit installer Python 3.8.6 - Sept. 24, 2020 Download macOS 64-bit installer Python 3.8.6rc1 - Sept. 8, 2020 Download macOS 64-bit installer Python 3.5.10 - Sept. 5, 2020 No files for this release. Python 3.7.9 - Aug. 17, 2020 Download macOS 64-bit installer Python 3.6.12 - Aug. 17, 2020 No files for this release. Python 3.8.5 - July 20, 2020 Download macOS 64-bit installer Python 3.8.4 - July 13, 2020 Download macOS 64-bit installer Python 3.8.4rc1 - June 30, 2020 Download macOS 64-bit installer Python 3.7.8 - June 27, 2020 Download macOS 64-bit installer Python 3.6.11 - June 27, 2020 No files for this release. Python 3.8.3 - May 13, 2020 Download macOS 64-bit installer Python 3.8.3rc1 - April 29, 2020 Download macOS 64-bit installer Python 2.7.18 - April 20, 2020 Download macOS 64-bit installer Python 3.7.7 - March 10, 2020 Download macOS 64-bit installer Python 3.8.2 - Feb. 24, 2020 Download macOS 64-bit installer Python 3.8.1 - Dec. 18, 2019 Download macOS 64-bit installer Python 3.7.6 - Dec. 18, 2019 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.6.10 - Dec. 18, 2019 No files for this release. Python 3.5.9 - Nov. 2, 2019 No files for this release. Python 3.5.8 - Oct. 29, 2019 No files for this release. Python 2.7.17 - Oct. 19, 2019 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.7.5 - Oct. 15, 2019 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.8.0 - Oct. 14, 2019 Download macOS 64-bit installer Python 3.7.4 - July 8, 2019 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.6.9 - July 2, 2019 No files for this release. Python 3.7.3 - March 25, 2019 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.4.10 - March 18, 2019 No files for this release. Python 3.5.7 - March 18, 2019 No files for this release. Python 2.7.16 - March 4, 2019 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.7.2 - Dec. 24, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.6.8 - Dec. 24, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.7.1 - Oct. 20, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.6.7 - Oct. 20, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.5.6 - Aug. 2, 2018 No files for this release. Python 3.4.9 - Aug. 2, 2018 No files for this release. Python 3.7.0 - June 27, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.6.6 - June 27, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 2.7.15 - May 1, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.6.5 - March 28, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.4.8 - Feb. 5, 2018 No files for this release. Python 3.5.5 - Feb. 5, 2018 No files for this release. Python 3.6.4 - Dec. 19, 2017 Download Mac OS X 64-bit/32-bit installer Python 3.6.3 - Oct. 3, 2017 Download Mac OS X 64-bit/32-bit installer Python 3.3.7 - Sept. 19, 2017 No files for this release. Python 2.7.14 - Sept. 16, 2017 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.4.7 - Aug. 9, 2017 No files for this release. Python 3.5.4 - Aug. 8, 2017 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.6.2 - July 17, 2017 Download Mac OS X 64-bit/32-bit installer Python 3.6.1 - March 21, 2017 Download Mac OS X 64-bit/32-bit installer Python 3.4.6 - Jan. 17, 2017 No files for this release. Python 3.5.3 - Jan. 17, 2017 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.6.0 - Dec. 23, 2016 Download Mac OS X 64-bit/32-bit installer Python 2.7.13 - Dec. 17, 2016 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.4.5 - June 27, 2016 No files for this release. Python 3.5.2 - June 27, 2016 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.7.12 - June 25, 2016 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.4.4 - Dec. 21, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.1 - Dec. 7, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.7.11 - Dec. 5, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.0 - Sept. 13, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.7.10 - May 23, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.4.3 - Feb. 25, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.7.9 - Dec. 10, 2014 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.4.2 - Oct. 13, 2014 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.3.6 - Oct. 12, 2014 No files for this release. Python 3.2.6 - Oct. 12, 2014 No files for this release. Python 2.7.8 - July 2, 2014 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.7.7 - June 1, 2014 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.4.1 - May 19, 2014 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.4.0 - March 17, 2014 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.3.5 - March 9, 2014 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.3.4 - Feb. 9, 2014 Download Mac OS X 32-bit i386/PPC Installer Download Mac OS X 64-bit/32-bit Installer Python 3.3.3 - Nov. 17, 2013 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.7.6 - Nov. 10, 2013 Download Mac OS X 32-bit i386/PPC Installer Download Mac OS X 64-bit/32-bit x86-64/i386 Installer Python 2.6.9 - Oct. 29, 2013 No files for this release. Python 3.2.5 - May 15, 2013 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.3.2 - May 15, 2013 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.7.5 - May 12, 2013 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.2.4 - April 6, 2013 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.7.4 - April 6, 2013 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.3.1 - April 6, 2013 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.3.0 - Sept. 29, 2012 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.6.8 - April 10, 2012 No files for this release. Python 3.2.3 - April 10, 2012 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.1.5 - April 9, 2012 No files for this release. Python 2.7.3 - April 9, 2012 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.2.2 - Sept. 3, 2011 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.2.1 - July 9, 2011 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.7.2 - June 11, 2011 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.1.4 - June 11, 2011 Download Mac OS X 32-bit i386/PPC installer Python 2.6.7 - June 3, 2011 No files for this release. Python 2.5.6 - May 26, 2011 No files for this release. Python 3.2.0 - Feb. 20, 2011 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.1.3 - Nov. 27, 2010 Download Mac OS X 32-bit i386/PPC installer Python 2.7.1 - Nov. 27, 2010 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.6.6 - Aug. 24, 2010 Download Mac OS X 32-bit i386/PPC installer Python 2.7.0 - July 3, 2010 Download Mac OS X 32-bit i386/PPC installer Python 3.1.2 - March 20, 2010 Download Mac OS X installer Python 2.6.5 - March 18, 2010 Download Mac OS X installer Python 2.5.5 - Jan. 31, 2010 No files for this release. Python 2.6.4 - Oct. 26, 2009 Download Mac OS X installer Python 2.6.3 - Oct. 2, 2009 Download Mac OS X installer Python 3.1.1 - Aug. 17, 2009 Download Mac OS X installer Python 3.1.0 - June 26, 2009 Download Mac OS X installer Python 2.6.2 - April 14, 2009 Download Mac OS X installer Python 3.0.1 - Feb. 13, 2009 Download Mac OS X installer Python 2.5.4 - Dec. 23, 2008 Download Mac OS X installer Python 2.5.3 - Dec. 19, 2008 Download Mac OS X installer Python 2.4.6 - Dec. 19, 2008 No files for this release. Python 2.6.1 - Dec. 4, 2008 Download Mac OS X installer Python 3.0.0 - Dec. 3, 2008 No files for this release. Python 2.6.0 - Oct. 2, 2008 Download Mac OS X installer Python 2.3.7 - March 11, 2008 No files for this release. Python 2.4.5 - March 11, 2008 No files for this release. Python 2.5.2 - Feb. 21, 2008 Download Mac OS X installer Python 2.5.1 - April 19, 2007 Download Mac OS X installer Python 2.3.6 - Nov. 1, 2006 No files for this release. Python 2.4.4 - Oct. 18, 2006 Download Mac OS X installer Python 2.5.0 - Sept. 19, 2006 Download Mac OS X installer Python 2.4.3 - April 15, 2006 No files for this release. Python 2.4.2 - Sept. 27, 2005 No files for this release. Python 2.4.1 - March 30, 2005 No files for this release. Python 2.3.5 - Feb. 8, 2005 No files for this release. Python 2.4.0 - Nov. 30, 2004 No files for this release. Python 2.3.4 - May 27, 2004 No files for this release. Python 2.3.3 - Dec. 19, 2003 No files for this release. Python 2.3.2 - Oct. 3, 2003 No files for this release. Python 2.3.1 - Sept. 23, 2003 No files for this release. Python 2.3.0 - July 29, 2003 No files for this release. Python 2.2.3 - May 30, 2003 No files for this release. Python 2.2.2 - Oct. 14, 2002 No files for this release. Python 2.2.1 - April 10, 2002 No files for this release. Python 2.1.3 - April 9, 2002 No files for this release. Python 2.2.0 - Dec. 21, 2001 No files for this release. Python 2.0.1 - June 22, 2001 No files for this release. Pre-releases Python 3.14.0a5 - Feb. 11, 2025 Download macOS 64-bit universal2 installer Python 3.14.0a4 - Jan. 14, 2025 Download macOS 64-bit universal2 installer Python 3.14.0a3 - Dec. 17, 2024 Download macOS 64-bit universal2 installer Python 3.14.0a2 - Nov. 19, 2024 Download macOS 64-bit universal2 installer Python 3.14.0a1 - Oct. 15, 2024 Download macOS 64-bit universal2 installer Python 3.13.0rc3 - Oct. 1, 2024 Download macOS 64-bit universal2 installer Python 3.13.0rc2 - Sept. 6, 2024 Download macOS 64-bit universal2 installer Python 3.13.0rc1 - Aug. 1, 2024 Download macOS 64-bit universal2 installer Python 3.13.0b4 - July 17, 2024 Download macOS 64-bit universal2 installer Python 3.13.0b3 - June 27, 2024 Download macOS 64-bit universal2 installer Python 3.13.0b2 - June 5, 2024 Download macOS 64-bit universal2 installer Python 3.13.0b1 - May 8, 2024 Download macOS 64-bit universal2 installer Python 3.13.0a6 - April 9, 2024 Download macOS 64-bit universal2 installer Python 3.13.0a5 - March 12, 2024 Download macOS 64-bit universal2 installer Python 3.13.0a4 - Feb. 15, 2024 Download macOS 64-bit universal2 installer Python 3.13.0a3 - Jan. 17, 2024 Download macOS 64-bit universal2 installer Python 3.13.0a2 - Nov. 21, 2023 Download macOS 64-bit universal2 installer Python 3.13.0a1 - Oct. 13, 2023 Download macOS 64-bit universal2 installer Python 3.12.0rc3 - Sept. 19, 2023 Download macOS 64-bit universal2 installer Python 3.12.0rc2 - Sept. 6, 2023 Download macOS 64-bit universal2 installer Python 3.12.0rc1 - Aug. 6, 2023 Download macOS 64-bit universal2 installer Python 3.12.0b4 - July 11, 2023 Download macOS 64-bit universal2 installer Python 3.12.0b3 - June 19, 2023 Download macOS 64-bit universal2 installer Python 3.12.0b2 - June 6, 2023 Download macOS 64-bit universal2 installer Python 3.12.0b1 - May 22, 2023 Download macOS 64-bit universal2 installer Python 3.12.0a7 - April 4, 2023 Download macOS 64-bit universal2 installer Python 3.12.0a6 - March 8, 2023 Download macOS 64-bit universal2 installer Python 3.12.0a5 - Feb. 7, 2023 Download macOS 64-bit universal2 installer Python 3.12.0a4 - Jan. 10, 2023 Download macOS 64-bit universal2 installer Python 3.12.0a3 - Dec. 6, 2022 Download macOS 64-bit universal2 installer Python 3.12.0a2 - Nov. 15, 2022 Download macOS 64-bit universal2 installer Python 3.12.0a1 - Oct. 25, 2022 Download macOS 64-bit universal2 installer Python 3.11.0rc2 - Sept. 12, 2022 Download macOS 64-bit universal2 installer Python 3.11.0rc1 - Aug. 8, 2022 Download macOS 64-bit universal2 installer Python 3.11.0b5 - July 26, 2022 Download macOS 64-bit universal2 installer Python 3.11.0b4 - July 11, 2022 Download macOS 64-bit universal2 installer Python 3.11.0b3 - June 1, 2022 Download macOS 64-bit universal2 installer Python 3.11.0b2 - May 31, 2022 Download macOS 64-bit universal2 installer Python 3.11.0b1 - May 8, 2022 Download macOS 64-bit universal2 installer Python 3.11.0a7 - April 5, 2022 Download macOS 64-bit universal2 installer Python 3.11.0a6 - March 7, 2022 Download macOS 64-bit universal2 installer Python 3.11.0a5 - Feb. 3, 2022 Download macOS 64-bit universal2 installer Python 3.11.0a4 - Jan. 14, 2022 Download macOS 64-bit universal2 installer Python 3.11.0a3 - Dec. 8, 2021 Download macOS 64-bit universal2 installer Python 3.11.0a2 - Nov. 5, 2021 Download macOS 64-bit universal2 installer Python 3.11.0a1 - Oct. 5, 2021 Download macOS 64-bit universal2 installer Python 3.10.0rc2 - Sept. 7, 2021 Download macOS 64-bit universal2 installer Python 3.10.0rc1 - Aug. 2, 2021 Download macOS 64-bit universal2 installer Python 3.10.0b4 - July 10, 2021 Download macOS 64-bit universal2 installer Python 3.10.0b3 - June 17, 2021 Download macOS 64-bit universal2 installer Python 3.10.0b2 - May 31, 2021 Download macOS 64-bit universal2 installer Python 3.10.0b1 - May 3, 2021 Download macOS 64-bit universal2 installer Python 3.10.0a7 - April 5, 2021 Download macOS 64-bit universal2 installer Python 3.10.0a6 - March 1, 2021 Download macOS 64-bit universal2 installer Python 3.9.2rc1 - Feb. 16, 2021 Download macOS 64-bit Intel installer Download macOS 64-bit universal2 installer Python 3.8.8rc1 - Feb. 16, 2021 Download macOS 64-bit Intel installer Python 3.10.0a5 - Feb. 2, 2021 Download macOS 64-bit universal2 installer Python 3.10.0a4 - Jan. 4, 2021 Download macOS 64-bit universal2 installer Python 3.8.7rc1 - Dec. 7, 2020 Download macOS 64-bit Intel installer Python 3.10.0a3 - Dec. 7, 2020 Download macOS 64-bit universal2 installer Python 3.9.1rc1 - Nov. 26, 2020 Download macOS 64-bit installer Download macOS 64-bit universal2 installer Python 3.10.0a2 - Nov. 3, 2020 Download macOS 64-bit installer Python 3.10.0a1 - Oct. 5, 2020 Download macOS 64-bit installer Python 3.9.0rc2 - Sept. 17, 2020 Download macOS 64-bit installer Python 3.5.10rc1 - Aug. 22, 2020 No files for this release. Python 3.9.0rc1 - Aug. 11, 2020 Download macOS 64-bit installer Python 3.9.0b5 - July 20, 2020 Download macOS 64-bit installer Python 3.9.0b4 - July 3, 2020 Download macOS 64-bit installer Python 3.7.8rc1 - June 17, 2020 Download macOS 64-bit installer Python 3.6.11rc1 - June 17, 2020 No files for this release. Python 3.9.0b3 - June 9, 2020 Download macOS 64-bit installer Python 3.9.0b2 - June 9, 2020 Download macOS 64-bit installer Python 3.9.0b1 - May 19, 2020 Download macOS 64-bit installer Python 3.9.0a6 - April 28, 2020 Download macOS 64-bit installer Python 2.7.18rc1 - April 4, 2020 Download macOS 64-bit installer Python 3.9.0a5 - March 23, 2020 Download macOS 64-bit installer Python 3.7.7rc1 - March 4, 2020 Download macOS 64-bit installer Python 3.9.0a4 - Feb. 26, 2020 Download macOS 64-bit installer Python 3.8.2rc2 - Feb. 17, 2020 Download macOS 64-bit installer Python 3.8.2rc1 - Feb. 10, 2020 Download macOS 64-bit installer Python 3.9.0a3 - Jan. 24, 2020 Download macOS 64-bit installer Python 3.9.0a2 - Dec. 18, 2019 Download macOS 64-bit installer Python 3.7.6rc1 - Dec. 11, 2019 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.6.10rc1 - Dec. 11, 2019 No files for this release. Python 3.8.1rc1 - Dec. 10, 2019 Download macOS 64-bit installer Python 3.9.0a1 - Nov. 19, 2019 Download macOS 64-bit installer Python 3.5.8rc2 - Oct. 12, 2019 No files for this release. Python 2.7.17rc1 - Oct. 9, 2019 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.7.5rc1 - Oct. 2, 2019 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.8.0rc1 - Oct. 1, 2019 Download macOS 64-bit installer Python 3.5.8rc1 - Sept. 9, 2019 No files for this release. Python 3.8.0b4 - Aug. 29, 2019 Download macOS 64-bit installer Python 3.8.0b3 - July 29, 2019 Download macOS 64-bit installer Python 3.8.0b2 - July 4, 2019 Download macOS 64-bit installer Python 3.7.4rc1 - June 18, 2019 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.6.9rc1 - June 18, 2019 No files for this release. Python 3.8.0b1 - June 4, 2019 Download macOS 64-bit installer Python 3.8.0a4 - May 6, 2019 Download macOS 64-bit installer Python 3.8.0a3 - March 25, 2019 Download macOS 64-bit installer Python 3.7.3rc1 - March 12, 2019 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.4.10rc1 - March 4, 2019 No files for this release. Python 3.5.7rc1 - March 4, 2019 No files for this release. Python 3.8.0a2 - Feb. 25, 2019 Download macOS 64-bit installer Python 2.7.16rc1 - Feb. 17, 2019 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.8.0a1 - Feb. 3, 2019 Download macOS 64-bit installer Python 3.7.2rc1 - Dec. 11, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.6.8rc1 - Dec. 11, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.7.1rc2 - Oct. 13, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.6.7rc2 - Oct. 13, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.7.1rc1 - Sept. 26, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.6.7rc1 - Sept. 26, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.4.9rc1 - July 20, 2018 No files for this release. Python 3.5.6rc1 - July 20, 2018 No files for this release. Python 3.6.6rc1 - June 12, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.7.0rc1 - June 11, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.7.0b5 - May 30, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 2.7.15rc1 - April 15, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.6.5rc1 - March 13, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.7.0b2 - Feb. 28, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.7.0b1 - Jan. 31, 2018 Download macOS 64-bit installer Download macOS 64-bit/32-bit installer Python 3.4.8rc1 - Jan. 23, 2018 No files for this release. Python 3.5.5rc1 - Jan. 23, 2018 No files for this release. Python 3.7.0a4 - Jan. 9, 2018 Download Mac OS X 64-bit/32-bit installer Python 3.7.0a3 - Dec. 5, 2017 Download Mac OS X 64-bit/32-bit installer Python 3.6.4rc1 - Dec. 5, 2017 Download Mac OS X 64-bit/32-bit installer Python 3.7.0a2 - Oct. 17, 2017 Download Mac OS X 64-bit/32-bit installer Python 3.7.0a1 - Sept. 19, 2017 Download Mac OS X 64-bit/32-bit installer Python 3.6.3rc1 - Sept. 19, 2017 Download Mac OS X 64-bit/32-bit installer Python 3.3.7rc1 - Sept. 6, 2017 No files for this release. Python 2.7.14rc1 - Aug. 27, 2017 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.4rc1 - July 25, 2017 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.4.7rc1 - July 25, 2017 No files for this release. Python 3.6.2rc2 - July 7, 2017 Download Mac OS X 64-bit/32-bit installer Python 3.6.2rc1 - June 17, 2017 Download Mac OS X 64-bit/32-bit installer Python 3.6.1rc1 - March 5, 2017 Download Mac OS X 64-bit/32-bit installer Python 3.5.3rc1 - Jan. 3, 2017 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.4.6rc1 - Jan. 3, 2017 No files for this release. Python 3.6.0rc2 - Dec. 16, 2016 Download Mac OS X 64-bit/32-bit installer Python 3.6.0rc1 - Dec. 6, 2016 Download Mac OS X 64-bit/32-bit installer Python 2.7.13rc1 - Dec. 4, 2016 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.6.0b4 - Nov. 21, 2016 Download Mac OS X 64-bit/32-bit installer Python 3.6.0b3 - Oct. 31, 2016 Download Mac OS X 64-bit/32-bit installer Python 3.6.0b2 - Oct. 10, 2016 Download Mac OS X 64-bit/32-bit installer Python 3.6.0b1 - Sept. 12, 2016 Download Mac OS X 64-bit/32-bit installer Python 3.6.0a4 - Aug. 15, 2016 Download Mac OS X 64-bit/32-bit installer Python 3.6.0a3 - July 12, 2016 Download Mac OS X 64-bit/32-bit installer Python 3.6.0a2 - June 13, 2016 Download Mac OS X 64-bit/32-bit installer Python 2.7.12rc1 - June 13, 2016 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.2rc1 - June 13, 2016 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.4.5rc1 - June 13, 2016 No files for this release. Python 3.6.0a1 - May 17, 2016 Download Mac OS X 64-bit/32-bit installer Python 3.4.4rc1 - Dec. 7, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.1rc1 - Nov. 23, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.7.11rc1 - Nov. 21, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.0rc4 - Sept. 9, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.0rc3 - Sept. 8, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.0rc2 - Aug. 25, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.0rc1 - Aug. 11, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.0b4 - July 26, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.0b3 - July 5, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.0b2 - June 1, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.0b1 - May 24, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.7.10rc1 - May 11, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.0a4 - April 20, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.0a3 - March 30, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.0a2 - March 9, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.5.0a1 - Feb. 8, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.4.3rc1 - Feb. 8, 2015 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.7.9rc1 - Nov. 26, 2014 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.3.6rc1 - Oct. 4, 2014 No files for this release. Python 3.2.6rc1 - Oct. 4, 2014 No files for this release. Python 3.4.2rc1 - Sept. 22, 2014 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 2.7.7rc1 - May 17, 2014 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.4.1rc1 - May 5, 2014 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.4.0rc3 - March 10, 2014 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.3.5rc2 - March 2, 2014 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer Python 3.3.5rc1 - Feb. 23, 2014 Download Mac OS X 32-bit i386/PPC Installer Download Mac OS X 64-bit/32-bit Installer Python 3.3.5rc1 - Feb. 23, 2014 Download Mac OS X 32-bit i386/PPC installer Download Mac OS X 64-bit/32-bit installer \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Releases for macOS", "Stable Releases", "Pre-releases"]}
{"url": "https://www.python.org/downloads/windows/", "title": "Python Releases for Windows | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Downloads >>> Windows Python Releases for Windows Latest Python 3 Release - Python 3.13.2 Stable Releases Python 3.13.2 - Feb. 4, 2025 Note that Python 3.13.2 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.9 - Feb. 4, 2025 Note that Python 3.12.9 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.8 - Dec. 3, 2024 Note that Python 3.12.8 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.13.1 - Dec. 3, 2024 Note that Python 3.13.1 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.11 - Dec. 3, 2024 Note that Python 3.11.11 cannot be used on Windows 7 or earlier. No files for this release. Python 3.10.16 - Dec. 3, 2024 Note that Python 3.10.16 cannot be used on Windows 7 or earlier. No files for this release. Python 3.9.21 - Dec. 3, 2024 Note that Python 3.9.21 cannot be used on Windows 7 or earlier. No files for this release. Python 3.13.0 - Oct. 7, 2024 Note that Python 3.13.0 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.7 - Oct. 1, 2024 Note that Python 3.12.7 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.10 - Sept. 7, 2024 Note that Python 3.11.10 cannot be used on Windows 7 or earlier. No files for this release. Python 3.10.15 - Sept. 7, 2024 Note that Python 3.10.15 cannot be used on Windows 7 or earlier. No files for this release. Python 3.12.6 - Sept. 6, 2024 Note that Python 3.12.6 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.9.20 - Sept. 6, 2024 Note that Python 3.9.20 cannot be used on Windows 7 or earlier. No files for this release. Python 3.8.20 - Sept. 6, 2024 Note that Python 3.8.20 cannot be used on Windows XP or earlier. No files for this release. Python 3.12.5 - Aug. 6, 2024 Note that Python 3.12.5 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.4 - June 6, 2024 Note that Python 3.12.4 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.3 - April 9, 2024 Note that Python 3.12.3 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.9 - April 2, 2024 Note that Python 3.11.9 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.10.14 - March 19, 2024 Note that Python 3.10.14 cannot be used on Windows 7 or earlier. No files for this release. Python 3.9.19 - March 19, 2024 Note that Python 3.9.19 cannot be used on Windows 7 or earlier. No files for this release. Python 3.8.19 - March 19, 2024 Note that Python 3.8.19 cannot be used on Windows XP or earlier. No files for this release. Python 3.11.8 - Feb. 6, 2024 Note that Python 3.11.8 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.2 - Feb. 6, 2024 Note that Python 3.12.2 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.1 - Dec. 8, 2023 Note that Python 3.12.1 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.7 - Dec. 4, 2023 Note that Python 3.11.7 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0 - Oct. 2, 2023 Note that Python 3.12.0 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.6 - Oct. 2, 2023 Note that Python 3.11.6 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.5 - Aug. 24, 2023 Note that Python 3.11.5 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.10.13 - Aug. 24, 2023 Note that Python 3.10.13 cannot be used on Windows 7 or earlier. No files for this release. Python 3.9.18 - Aug. 24, 2023 Note that Python 3.9.18 cannot be used on Windows 7 or earlier. No files for this release. Python 3.8.18 - Aug. 24, 2023 Note that Python 3.8.18 cannot be used on Windows XP or earlier. No files for this release. Python 3.10.12 - June 6, 2023 Note that Python 3.10.12 cannot be used on Windows 7 or earlier. No files for this release. Python 3.11.4 - June 6, 2023 Note that Python 3.11.4 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.7.17 - June 6, 2023 Note that Python 3.7.17 cannot be used on Windows XP or earlier. No files for this release. Python 3.8.17 - June 6, 2023 Note that Python 3.8.17 cannot be used on Windows XP or earlier. No files for this release. Python 3.9.17 - June 6, 2023 Note that Python 3.9.17 cannot be used on Windows 7 or earlier. No files for this release. Python 3.10.11 - April 5, 2023 Note that Python 3.10.11 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.11.3 - April 5, 2023 Note that Python 3.11.3 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.10.10 - Feb. 8, 2023 Note that Python 3.10.10 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.11.2 - Feb. 8, 2023 Note that Python 3.11.2 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.1 - Dec. 6, 2022 Note that Python 3.11.1 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.10.9 - Dec. 6, 2022 Note that Python 3.10.9 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.9.16 - Dec. 6, 2022 Note that Python 3.9.16 cannot be used on Windows 7 or earlier. No files for this release. Python 3.8.16 - Dec. 6, 2022 Note that Python 3.8.16 cannot be used on Windows XP or earlier. No files for this release. Python 3.7.16 - Dec. 6, 2022 Note that Python 3.7.16 cannot be used on Windows XP or earlier. No files for this release. Python 3.11.0 - Oct. 24, 2022 Note that Python 3.11.0 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.9.15 - Oct. 11, 2022 Note that Python 3.9.15 cannot be used on Windows 7 or earlier. No files for this release. Python 3.8.15 - Oct. 11, 2022 Note that Python 3.8.15 cannot be used on Windows XP or earlier. No files for this release. Python 3.10.8 - Oct. 11, 2022 Note that Python 3.10.8 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.7.15 - Oct. 11, 2022 Note that Python 3.7.15 cannot be used on Windows XP or earlier. No files for this release. Python 3.7.14 - Sept. 6, 2022 Note that Python 3.7.14 cannot be used on Windows XP or earlier. No files for this release. Python 3.8.14 - Sept. 6, 2022 Note that Python 3.8.14 cannot be used on Windows XP or earlier. No files for this release. Python 3.9.14 - Sept. 6, 2022 Note that Python 3.9.14 cannot be used on Windows 7 or earlier. No files for this release. Python 3.10.7 - Sept. 6, 2022 Note that Python 3.10.7 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.6 - Aug. 2, 2022 Note that Python 3.10.6 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.5 - June 6, 2022 Note that Python 3.10.5 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.9.13 - May 17, 2022 Note that Python 3.9.13 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.4 - March 24, 2022 Note that Python 3.10.4 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.9.12 - March 23, 2022 Note that Python 3.9.12 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.3 - March 16, 2022 Note that Python 3.10.3 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.9.11 - March 16, 2022 Note that Python 3.9.11 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.8.13 - March 16, 2022 Note that Python 3.8.13 cannot be used on Windows XP or earlier. No files for this release. Python 3.7.13 - March 16, 2022 Note that Python 3.7.13 cannot be used on Windows XP or earlier. No files for this release. Python 3.9.10 - Jan. 14, 2022 Note that Python 3.9.10 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.2 - Jan. 14, 2022 Note that Python 3.10.2 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.1 - Dec. 6, 2021 Note that Python 3.10.1 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.9.9 - Nov. 15, 2021 Note that Python 3.9.9 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.9.8 - Nov. 5, 2021 Note that Python 3.9.8 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.0 - Oct. 4, 2021 Note that Python 3.10.0 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.7.12 - Sept. 4, 2021 Note that Python 3.7.12 cannot be used on Windows XP or earlier. No files for this release. Python 3.6.15 - Sept. 4, 2021 Note that Python 3.6.15 cannot be used on Windows XP or earlier. No files for this release. Python 3.9.7 - Aug. 30, 2021 Note that Python 3.9.7 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.8.12 - Aug. 30, 2021 Note that Python 3.8.12 cannot be used on Windows XP or earlier. No files for this release. Python 3.9.6 - June 28, 2021 Note that Python 3.9.6 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.8.11 - June 28, 2021 Note that Python 3.8.11 cannot be used on Windows XP or earlier. No files for this release. Python 3.7.11 - June 28, 2021 Note that Python 3.7.11 cannot be used on Windows XP or earlier. No files for this release. Python 3.6.14 - June 28, 2021 Note that Python 3.6.14 cannot be used on Windows XP or earlier. No files for this release. Python 3.9.5 - May 3, 2021 Note that Python 3.9.5 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.8.10 - May 3, 2021 Note that Python 3.8.10 cannot be used on Windows XP or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.9.4 - April 4, 2021 Note that Python 3.9.4 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.9.3 - April 2, 2021 Note that Python 3.9.3 cannot be used on Windows 7 or earlier. No files for this release. Python 3.8.9 - April 2, 2021 Note that Python 3.8.9 cannot be used on Windows XP or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.9.2 - Feb. 19, 2021 Note that Python 3.9.2 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.8.8 - Feb. 19, 2021 Note that Python 3.8.8 cannot be used on Windows XP or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.6.13 - Feb. 15, 2021 Note that Python 3.6.13 cannot be used on Windows XP or earlier. No files for this release. Python 3.7.10 - Feb. 15, 2021 Note that Python 3.7.10 cannot be used on Windows XP or earlier. No files for this release. Python 3.8.7 - Dec. 21, 2020 Note that Python 3.8.7 cannot be used on Windows XP or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.9.1 - Dec. 7, 2020 Note that Python 3.9.1 cannot be used on Windows 7 or earlier. Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.9.0 - Oct. 5, 2020 Note that Python 3.9.0 cannot be used on Windows 7 or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.6 - Sept. 24, 2020 Note that Python 3.8.6 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.6rc1 - Sept. 8, 2020 Note that Python 3.8.6rc1 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.10 - Sept. 5, 2020 Note that Python 3.5.10 cannot be used on Windows XP or earlier. No files for this release. Python 3.7.9 - Aug. 17, 2020 Note that Python 3.7.9 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.12 - Aug. 17, 2020 Note that Python 3.6.12 cannot be used on Windows XP or earlier. No files for this release. Python 3.8.5 - July 20, 2020 Note that Python 3.8.5 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.4 - July 13, 2020 Note that Python 3.8.4 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.4rc1 - June 30, 2020 Note that Python 3.8.4rc1 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.8 - June 27, 2020 Note that Python 3.7.8 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.11 - June 27, 2020 Note that Python 3.6.11 cannot be used on Windows XP or earlier. No files for this release. Python 3.8.3 - May 13, 2020 Note that Python 3.8.3 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.3rc1 - April 29, 2020 Note that Python 3.8.3rc1 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 2.7.18 - April 20, 2020 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.7.7 - March 10, 2020 Note that Python 3.7.7 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.2 - Feb. 24, 2020 Note that Python 3.8.2 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.1 - Dec. 18, 2019 Note that Python 3.8.1 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.6 - Dec. 18, 2019 Note that Python 3.7.6 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.10 - Dec. 18, 2019 Note that Python 3.6.10 cannot be used on Windows XP or earlier. No files for this release. Python 3.5.9 - Nov. 2, 2019 Note that Python 3.5.9 cannot be used on Windows XP or earlier. No files for this release. Python 3.5.8 - Oct. 29, 2019 Note that Python 3.5.8 cannot be used on Windows XP or earlier. No files for this release. Python 2.7.17 - Oct. 19, 2019 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.7.5 - Oct. 15, 2019 Note that Python 3.7.5 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.0 - Oct. 14, 2019 Note that Python 3.8.0 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.4 - July 8, 2019 Note that Python 3.7.4 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.9 - July 2, 2019 Note that Python 3.6.9 cannot be used on Windows XP or earlier. No files for this release. Python 3.7.3 - March 25, 2019 Note that Python 3.7.3 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.4.10 - March 18, 2019 No files for this release. Python 3.5.7 - March 18, 2019 Note that Python 3.5.7 cannot be used on Windows XP or earlier. No files for this release. Python 2.7.16 - March 4, 2019 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.7.2 - Dec. 24, 2018 Note that Python 3.7.2 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.8 - Dec. 24, 2018 Note that Python 3.6.8 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.1 - Oct. 20, 2018 Note that Python 3.7.1 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.7 - Oct. 20, 2018 Note that Python 3.6.7 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.6 - Aug. 2, 2018 Note that Python 3.5.6 cannot be used on Windows XP or earlier. No files for this release. Python 3.4.9 - Aug. 2, 2018 No files for this release. Python 3.7.0 - June 27, 2018 Note that Python 3.7.0 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.6 - June 27, 2018 Note that Python 3.6.6 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 2.7.15 - May 1, 2018 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.6.5 - March 28, 2018 Note that Python 3.6.5 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.4.8 - Feb. 5, 2018 No files for this release. Python 3.5.5 - Feb. 5, 2018 Note that Python 3.5.5 cannot be used on Windows XP or earlier. No files for this release. Python 3.6.4 - Dec. 19, 2017 Note that Python 3.6.4 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.3 - Oct. 3, 2017 Note that Python 3.6.3 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.3.7 - Sept. 19, 2017 No files for this release. Python 2.7.14 - Sept. 16, 2017 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.4.7 - Aug. 9, 2017 No files for this release. Python 3.5.4 - Aug. 8, 2017 Note that Python 3.5.4 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.2 - July 17, 2017 Note that Python 3.6.2 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.1 - March 21, 2017 Note that Python 3.6.1 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.4.6 - Jan. 17, 2017 No files for this release. Python 3.5.3 - Jan. 17, 2017 Note that Python 3.5.3 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.0 - Dec. 23, 2016 Note that Python 3.6.0 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 2.7.13 - Dec. 17, 2016 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.4.5 - June 27, 2016 No files for this release. Python 3.5.2 - June 27, 2016 Note that Python 3.5.2 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 2.7.12 - June 25, 2016 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.4.4 - Dec. 21, 2015 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.5.1 - Dec. 7, 2015 Note that Python 3.5.1 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 2.7.11 - Dec. 5, 2015 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.5.0 - Sept. 13, 2015 Note that Python 3.5.0 cannot be used on Windows XP or earlier. Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 2.7.10 - May 23, 2015 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.4.3 - Feb. 25, 2015 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.7.9 - Dec. 10, 2014 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.4.2 - Oct. 13, 2014 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.3.6 - Oct. 12, 2014 No files for this release. Python 3.2.6 - Oct. 12, 2014 No files for this release. Python 2.7.8 - July 2, 2014 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.7.7 - June 1, 2014 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.4.1 - May 19, 2014 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.4.0 - March 17, 2014 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.3.5 - March 9, 2014 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.3.4 - Feb. 9, 2014 Download Windows X86-64 MSI Installer Download Windows x86 MSI Installer Python 3.3.3 - Nov. 17, 2013 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.7.6 - Nov. 10, 2013 Download Windows help file Download Windows X86-64 MSI Installer Download Windows X86-64 MSI program database Download Windows x86 MSI Installer Download Windows x86 MSI program database Python 2.6.9 - Oct. 29, 2013 No files for this release. Python 3.2.5 - May 15, 2013 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.3.2 - May 15, 2013 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.7.5 - May 12, 2013 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.2.4 - April 6, 2013 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.7.4 - April 6, 2013 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.3.1 - April 6, 2013 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.3.0 - Sept. 29, 2012 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.6.8 - April 10, 2012 No files for this release. Python 3.2.3 - April 10, 2012 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.1.5 - April 9, 2012 No files for this release. Python 2.7.3 - April 9, 2012 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.2.2 - Sept. 3, 2011 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.2.1 - July 9, 2011 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.7.2 - June 11, 2011 Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.1.4 - June 11, 2011 Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.6.7 - June 3, 2011 No files for this release. Python 2.5.6 - May 26, 2011 No files for this release. Python 3.2.0 - Feb. 20, 2011 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.1.3 - Nov. 27, 2010 Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.7.1 - Nov. 27, 2010 Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.6.6 - Aug. 24, 2010 Download Windows help file Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.7.0 - July 3, 2010 Download Windows help file Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.1.2 - March 20, 2010 Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.6.5 - March 18, 2010 Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.5.5 - Jan. 31, 2010 No files for this release. Python 2.6.4 - Oct. 26, 2009 Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.6.3 - Oct. 2, 2009 Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.1.1 - Aug. 17, 2009 Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.1.0 - June 26, 2009 Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.6.2 - April 14, 2009 Download Windows help file Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.0.1 - Feb. 13, 2009 Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.5.4 - Dec. 23, 2008 Download Windows help file Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.5.3 - Dec. 19, 2008 Download Windows help file Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.4.6 - Dec. 19, 2008 No files for this release. Python 2.6.1 - Dec. 4, 2008 Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.0.0 - Dec. 3, 2008 Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.6.0 - Oct. 2, 2008 Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.3.7 - March 11, 2008 No files for this release. Python 2.4.5 - March 11, 2008 No files for this release. Python 2.5.2 - Feb. 21, 2008 Download Windows help file Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.5.1 - April 19, 2007 Download Windows help file Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.3.6 - Nov. 1, 2006 No files for this release. Python 2.4.4 - Oct. 18, 2006 Download Windows help file Download Windows x86 MSI installer Python 2.5.0 - Sept. 19, 2006 Download Windows help file Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.4.3 - April 15, 2006 Download Windows help file Download Windows x86 MSI installer Python 2.4.2 - Sept. 27, 2005 Download Windows help file Download Windows x86 MSI installer Python 2.4.1 - March 30, 2005 Download Windows x86 MSI installer Python 2.3.5 - Feb. 8, 2005 Download Windows installer Python 2.4.0 - Nov. 30, 2004 Download Windows x86 MSI installer Python 2.3.4 - May 27, 2004 Download Windows installer Python 2.3.3 - Dec. 19, 2003 Download Windows installer Python 2.3.2 - Oct. 3, 2003 Download Windows installer Python 2.3.1 - Sept. 23, 2003 Download Windows installer Python 2.3.0 - July 29, 2003 Download Windows installer Python 2.2.3 - May 30, 2003 Download Windows installer Python 2.2.2 - Oct. 14, 2002 Download Windows installer Python 2.2.1 - April 10, 2002 Download Windows installer Python 2.1.3 - April 9, 2002 Download Windows installer Python 2.2.0 - Dec. 21, 2001 Download Windows installer Python 2.0.1 - June 22, 2001 Download Windows debug information files Download Windows installer Pre-releases Python 3.14.0a5 - Feb. 11, 2025 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.14.0a4 - Jan. 14, 2025 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.14.0a3 - Dec. 17, 2024 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.14.0a2 - Nov. 19, 2024 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.14.0a1 - Oct. 15, 2024 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.13.0rc3 - Oct. 1, 2024 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.13.0rc2 - Sept. 6, 2024 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.13.0rc1 - Aug. 1, 2024 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.13.0b4 - July 17, 2024 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.13.0b3 - June 27, 2024 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.13.0b2 - June 5, 2024 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.13.0b1 - May 8, 2024 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.13.0a6 - April 9, 2024 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.13.0a5 - March 12, 2024 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.13.0a4 - Feb. 15, 2024 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.13.0a3 - Jan. 17, 2024 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.13.0a2 - Nov. 21, 2023 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.13.0a1 - Oct. 13, 2023 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0rc3 - Sept. 19, 2023 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0rc2 - Sept. 6, 2023 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0rc1 - Aug. 6, 2023 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0b4 - July 11, 2023 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0b3 - June 19, 2023 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0b2 - June 6, 2023 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0b1 - May 22, 2023 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0a7 - April 4, 2023 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0a6 - March 8, 2023 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0a5 - Feb. 7, 2023 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0a4 - Jan. 10, 2023 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0a3 - Dec. 6, 2022 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0a2 - Nov. 15, 2022 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.12.0a1 - Oct. 25, 2022 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.0rc2 - Sept. 12, 2022 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.0rc1 - Aug. 8, 2022 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.0b5 - July 26, 2022 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.0b4 - July 11, 2022 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.0b3 - June 1, 2022 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.0b2 - May 31, 2022 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.0b1 - May 8, 2022 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.0a7 - April 5, 2022 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Download Windows embeddable package (ARM64) Python 3.11.0a6 - March 7, 2022 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.11.0a5 - Feb. 3, 2022 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows installer (ARM64) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.11.0a4 - Jan. 14, 2022 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.11.0a3 - Dec. 8, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.11.0a2 - Nov. 5, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.11.0a1 - Oct. 5, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.0rc2 - Sept. 7, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.0rc1 - Aug. 2, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.0b4 - July 10, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.0b3 - June 17, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.0b2 - May 31, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.0b1 - May 3, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.0a7 - April 5, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.0a6 - March 1, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.9.2rc1 - Feb. 16, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.8.8rc1 - Feb. 16, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.0a5 - Feb. 2, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.0a4 - Jan. 4, 2021 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.8.7rc1 - Dec. 7, 2020 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.0a3 - Dec. 7, 2020 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.9.1rc1 - Nov. 26, 2020 Download Windows installer (64-bit) Download Windows installer (32-bit) Download Windows help file Download Windows embeddable package (64-bit) Download Windows embeddable package (32-bit) Python 3.10.0a2 - Nov. 3, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.10.0a1 - Oct. 5, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.9.0rc2 - Sept. 17, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.10rc1 - Aug. 22, 2020 No files for this release. Python 3.9.0rc1 - Aug. 11, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.9.0b5 - July 20, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.9.0b4 - July 3, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.8rc1 - June 17, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.11rc1 - June 17, 2020 No files for this release. Python 3.9.0b3 - June 9, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.9.0b2 - June 9, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.9.0b1 - May 19, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.9.0a6 - April 28, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 2.7.18rc1 - April 4, 2020 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.9.0a5 - March 23, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.7rc1 - March 4, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.9.0a4 - Feb. 26, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.2rc2 - Feb. 17, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.2rc1 - Feb. 10, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.9.0a3 - Jan. 24, 2020 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.9.0a2 - Dec. 18, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.6rc1 - Dec. 11, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.10rc1 - Dec. 11, 2019 No files for this release. Python 3.8.1rc1 - Dec. 10, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.9.0a1 - Nov. 19, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.8rc2 - Oct. 12, 2019 No files for this release. Python 2.7.17rc1 - Oct. 9, 2019 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.7.5rc1 - Oct. 2, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.0rc1 - Oct. 1, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.8rc1 - Sept. 9, 2019 No files for this release. Python 3.8.0b4 - Aug. 29, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.0b3 - July 29, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.0b2 - July 4, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.4rc1 - June 18, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.9rc1 - June 18, 2019 No files for this release. Python 3.8.0b1 - June 4, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.0a4 - May 6, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.8.0a3 - March 25, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.3rc1 - March 12, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.4.10rc1 - March 4, 2019 No files for this release. Python 3.5.7rc1 - March 4, 2019 No files for this release. Python 3.8.0a2 - Feb. 25, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 2.7.16rc1 - Feb. 17, 2019 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.8.0a1 - Feb. 3, 2019 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.2rc1 - Dec. 11, 2018 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.8rc1 - Dec. 11, 2018 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.1rc2 - Oct. 13, 2018 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.7rc2 - Oct. 13, 2018 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.1rc1 - Sept. 26, 2018 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.7rc1 - Sept. 26, 2018 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.4.9rc1 - July 20, 2018 No files for this release. Python 3.5.6rc1 - July 20, 2018 No files for this release. Python 3.6.6rc1 - June 12, 2018 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.0rc1 - June 11, 2018 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.0b5 - May 30, 2018 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 2.7.15rc1 - April 15, 2018 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.6.5rc1 - March 13, 2018 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.0b2 - Feb. 28, 2018 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.0b1 - Jan. 31, 2018 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.4.8rc1 - Jan. 23, 2018 No files for this release. Python 3.5.5rc1 - Jan. 23, 2018 No files for this release. Python 3.7.0a4 - Jan. 9, 2018 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.0a3 - Dec. 5, 2017 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.4rc1 - Dec. 5, 2017 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.0a2 - Oct. 17, 2017 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.7.0a1 - Sept. 19, 2017 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.3rc1 - Sept. 19, 2017 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.3.7rc1 - Sept. 6, 2017 No files for this release. Python 2.7.14rc1 - Aug. 27, 2017 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.5.4rc1 - July 25, 2017 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.4.7rc1 - July 25, 2017 No files for this release. Python 3.6.2rc2 - July 7, 2017 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.2rc1 - June 17, 2017 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.1rc1 - March 5, 2017 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.3rc1 - Jan. 3, 2017 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.4.6rc1 - Jan. 3, 2017 No files for this release. Python 3.6.0rc2 - Dec. 16, 2016 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.0rc1 - Dec. 6, 2016 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 2.7.13rc1 - Dec. 4, 2016 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.6.0b4 - Nov. 21, 2016 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.0b3 - Oct. 31, 2016 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.0b2 - Oct. 10, 2016 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.0b1 - Sept. 12, 2016 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.0a4 - Aug. 15, 2016 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.0a3 - July 12, 2016 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.6.0a2 - June 13, 2016 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 2.7.12rc1 - June 13, 2016 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.5.2rc1 - June 13, 2016 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.4.5rc1 - June 13, 2016 No files for this release. Python 3.6.0a1 - May 17, 2016 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.4.4rc1 - Dec. 7, 2015 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.5.1rc1 - Nov. 23, 2015 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 2.7.11rc1 - Nov. 21, 2015 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.5.0rc4 - Sept. 9, 2015 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.0rc3 - Sept. 8, 2015 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.0rc2 - Aug. 25, 2015 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.0rc1 - Aug. 11, 2015 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.0b4 - July 26, 2015 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.0b3 - July 5, 2015 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.0b2 - June 1, 2015 Download Windows help file Download Windows x86 embeddable zip file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 embeddable zip file Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.0b1 - May 24, 2015 Download Windows help file Download Windows AMD64 embeddable installer Download Windows AMD64 executable installer Download Windows AMD64 web-based installer Download Windows x86 embeddable installer Download Windows x86 executable installer Download Windows x86 web-based installer Python 2.7.10rc1 - May 11, 2015 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.5.0a4 - April 20, 2015 Download Windows help file Download Windows amd executable installer Download Windows amd64 embeddable installer Download Windows amd64 web-based installer Download Windows x86 embeddable installer Download Windows x86 executable installer Download Windows x86 web-based installer Python 3.5.0a3 - March 30, 2015 Download Windows help file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.0a2 - March 9, 2015 Download Windows help file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.5.0a1 - Feb. 8, 2015 Download Windows help file Download Windows x86 executable installer Download Windows x86 web-based installer Download Windows x86-64 executable installer Download Windows x86-64 web-based installer Python 3.4.3rc1 - Feb. 8, 2015 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.7.9rc1 - Nov. 26, 2014 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.3.6rc1 - Oct. 4, 2014 No files for this release. Python 3.2.6rc1 - Oct. 4, 2014 No files for this release. Python 3.4.2rc1 - Sept. 22, 2014 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 2.7.7rc1 - May 17, 2014 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.4.1rc1 - May 5, 2014 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.4.0rc3 - March 10, 2014 Download Windows help file Download Windows debug information files Download Windows debug information files for 64-bit binaries Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.3.5rc2 - March 2, 2014 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer Python 3.3.5rc1 - Feb. 23, 2014 Download Windows X86-64 MSI Installer Download Windows x86 MSI Installer Python 3.3.5rc1 - Feb. 23, 2014 Download Windows help file Download Windows debug information files Download Windows x86 MSI installer Download Windows x86-64 MSI installer \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Releases for Windows", "Stable Releases", "Pre-releases"]}
{"url": "https://www.python.org/downloads/source/", "title": "Python Source Releases | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Downloads >>> Source code Python Source Releases Latest Python 3 Release - Python 3.13.2 Stable Releases Python 3.13.2 - Feb. 4, 2025 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.9 - Feb. 4, 2025 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.8 - Dec. 3, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.1 - Dec. 3, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.11 - Dec. 3, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.16 - Dec. 3, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.21 - Dec. 3, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.0 - Oct. 7, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.7 - Oct. 1, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.10 - Sept. 7, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.15 - Sept. 7, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.6 - Sept. 6, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.20 - Sept. 6, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.20 - Sept. 6, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.5 - Aug. 6, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.4 - June 6, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.3 - April 9, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.9 - April 2, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.14 - March 19, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.19 - March 19, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.19 - March 19, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.8 - Feb. 6, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.2 - Feb. 6, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.1 - Dec. 8, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.7 - Dec. 4, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0 - Oct. 2, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.6 - Oct. 2, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.5 - Aug. 24, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.13 - Aug. 24, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.18 - Aug. 24, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.18 - Aug. 24, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.12 - June 6, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.4 - June 6, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.17 - June 6, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.17 - June 6, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.17 - June 6, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.11 - April 5, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.3 - April 5, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.10 - Feb. 8, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.2 - Feb. 8, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.1 - Dec. 6, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.9 - Dec. 6, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.16 - Dec. 6, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.16 - Dec. 6, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.16 - Dec. 6, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0 - Oct. 24, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.15 - Oct. 11, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.15 - Oct. 11, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.8 - Oct. 11, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.15 - Oct. 11, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.14 - Sept. 6, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.14 - Sept. 6, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.14 - Sept. 6, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.7 - Sept. 6, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.6 - Aug. 2, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.5 - June 6, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.13 - May 17, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.4 - March 24, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.12 - March 23, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.3 - March 16, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.11 - March 16, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.13 - March 16, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.13 - March 16, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.10 - Jan. 14, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.2 - Jan. 14, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.1 - Dec. 6, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.9 - Nov. 15, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.8 - Nov. 5, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.0 - Oct. 4, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.12 - Sept. 4, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.15 - Sept. 4, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.7 - Aug. 30, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.12 - Aug. 30, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.6 - June 28, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.11 - June 28, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.11 - June 28, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.14 - June 28, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.5 - May 3, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.10 - May 3, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.4 - April 4, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.3 - April 2, 2021 No files for this release. Python 3.8.9 - April 2, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.2 - Feb. 19, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.8 - Feb. 19, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.13 - Feb. 15, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.10 - Feb. 15, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.7 - Dec. 21, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.1 - Dec. 7, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.0 - Oct. 5, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.6 - Sept. 24, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.6rc1 - Sept. 8, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.10 - Sept. 5, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.9 - Aug. 17, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.12 - Aug. 17, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.5 - July 20, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.4 - July 13, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.4rc1 - June 30, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.8 - June 27, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.11 - June 27, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.3 - May 13, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.3rc1 - April 29, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.18 - April 20, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.7 - March 10, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.2 - Feb. 24, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.1 - Dec. 18, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.6 - Dec. 18, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.10 - Dec. 18, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.9 - Nov. 2, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.8 - Oct. 29, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.17 - Oct. 19, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.5 - Oct. 15, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.0 - Oct. 14, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.4 - July 8, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.9 - July 2, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.3 - March 25, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.10 - March 18, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.7 - March 18, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.16 - March 4, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.2 - Dec. 24, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.8 - Dec. 24, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.1 - Oct. 20, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.7 - Oct. 20, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.6 - Aug. 2, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.9 - Aug. 2, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.0 - June 27, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.6 - June 27, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.15 - May 1, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.5 - March 28, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.8 - Feb. 5, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.5 - Feb. 5, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.4 - Dec. 19, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.3 - Oct. 3, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.3.7 - Sept. 19, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.14 - Sept. 16, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.7 - Aug. 9, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.4 - Aug. 8, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.2 - July 17, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.1 - March 21, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.6 - Jan. 17, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.3 - Jan. 17, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.0 - Dec. 23, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.13 - Dec. 17, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.5 - June 27, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.2 - June 27, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.12 - June 25, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.4 - Dec. 21, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.1 - Dec. 7, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.11 - Dec. 5, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.0 - Sept. 13, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.10 - May 23, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.3 - Feb. 25, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.9 - Dec. 10, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.2 - Oct. 13, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 3.3.6 - Oct. 12, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 3.2.6 - Oct. 12, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.8 - July 2, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.7 - June 1, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.1 - May 19, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.0 - March 17, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 3.3.5 - March 9, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 3.3.4 - Feb. 9, 2014 Download Gzipped source tar ball Download XZ compressed source tar ball Python 3.3.3 - Nov. 17, 2013 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 2.7.6 - Nov. 10, 2013 Download Gzipped source tar ball Download XZ compressed source tar ball Python 2.6.9 - Oct. 29, 2013 Download Gzipped source tarball Download XZ compressed source tarball Python 3.2.5 - May 15, 2013 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 3.3.2 - May 15, 2013 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 2.7.5 - May 12, 2013 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 3.2.4 - April 6, 2013 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 2.7.4 - April 6, 2013 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 3.3.1 - April 6, 2013 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 3.3.0 - Sept. 29, 2012 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 2.6.8 - April 10, 2012 Download Gzipped source tarball Download bzip2 compressed source tarball Python 3.2.3 - April 10, 2012 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 3.1.5 - April 9, 2012 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 2.7.3 - April 9, 2012 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 3.2.2 - Sept. 3, 2011 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 3.2.1 - July 9, 2011 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 2.7.2 - June 11, 2011 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 3.1.4 - June 11, 2011 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 2.6.7 - June 3, 2011 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.5.6 - May 26, 2011 Download Gzipped source tarball Download bzip2 compressed source tarball Python 3.2.0 - Feb. 20, 2011 Download Gzipped source tarball Download XZ compressed source tarball Download bzip2 compressed source tarball Python 3.1.3 - Nov. 27, 2010 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.7.1 - Nov. 27, 2010 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.6.6 - Aug. 24, 2010 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.7.0 - July 3, 2010 Download Gzipped source tarball Download bzip2 compressed source tarball Python 3.1.2 - March 20, 2010 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.6.5 - March 18, 2010 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.5.5 - Jan. 31, 2010 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.6.4 - Oct. 26, 2009 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.6.3 - Oct. 2, 2009 Download Gzipped source tarball Download bzip2 compressed source tarball Python 3.1.1 - Aug. 17, 2009 Download Gzipped source tarball Download bzip2 compressed source tarball Python 3.1.0 - June 26, 2009 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.6.2 - April 14, 2009 Download Gzipped source tarball Download bzip2 compressed source tarball Python 3.0.1 - Feb. 13, 2009 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.5.4 - Dec. 23, 2008 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.5.3 - Dec. 19, 2008 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.4.6 - Dec. 19, 2008 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.6.1 - Dec. 4, 2008 Download Gzipped source tarball Download bzip2 compressed source tarball Python 3.0.0 - Dec. 3, 2008 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.6.0 - Oct. 2, 2008 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.3.7 - March 11, 2008 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.4.5 - March 11, 2008 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.5.2 - Feb. 21, 2008 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.5.1 - April 19, 2007 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.3.6 - Nov. 1, 2006 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.4.4 - Oct. 18, 2006 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.5.0 - Sept. 19, 2006 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.4.3 - April 15, 2006 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.4.2 - Sept. 27, 2005 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.4.1 - March 30, 2005 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.3.5 - Feb. 8, 2005 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.4.0 - Nov. 30, 2004 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.3.4 - May 27, 2004 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.3.3 - Dec. 19, 2003 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.3.2 - Oct. 3, 2003 Download Gzipped source tarball Download bzip2 compressed source tarball Python 2.3.1 - Sept. 23, 2003 Download Gzipped source tarball Python 2.3.0 - July 29, 2003 Download Gzipped source tarball Python 2.2.3 - May 30, 2003 Download Gzipped source tarball Python 2.2.2 - Oct. 14, 2002 Download Gzipped source tarball Python 2.2.1 - April 10, 2002 Download Gzipped source tarball Python 2.1.3 - April 9, 2002 Download Gzipped source tarball Python 2.2.0 - Dec. 21, 2001 Download Gzipped source tarball Python 2.0.1 - June 22, 2001 Download Gzipped source tarball Pre-releases Python 3.14.0a5 - Feb. 11, 2025 Download Gzipped source tarball Download XZ compressed source tarball Python 3.14.0a4 - Jan. 14, 2025 Download Gzipped source tarball Download XZ compressed source tarball Python 3.14.0a3 - Dec. 17, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.14.0a2 - Nov. 19, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.14.0a1 - Oct. 15, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.0rc3 - Oct. 1, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.0rc2 - Sept. 6, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.0rc1 - Aug. 1, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.0b4 - July 17, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.0b3 - June 27, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.0b2 - June 5, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.0b1 - May 8, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.0a6 - April 9, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.0a5 - March 12, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.0a4 - Feb. 15, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.0a3 - Jan. 17, 2024 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.0a2 - Nov. 21, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.13.0a1 - Oct. 13, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0rc3 - Sept. 19, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0rc2 - Sept. 6, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0rc1 - Aug. 6, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0b4 - July 11, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0b3 - June 19, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0b2 - June 6, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0b1 - May 22, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0a7 - April 4, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0a6 - March 8, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0a5 - Feb. 7, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0a4 - Jan. 10, 2023 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0a3 - Dec. 6, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0a2 - Nov. 15, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.12.0a1 - Oct. 25, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0rc2 - Sept. 12, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0rc1 - Aug. 8, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0b5 - July 26, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0b4 - July 11, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0b3 - June 1, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0b2 - May 31, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0b1 - May 8, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0a7 - April 5, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0a6 - March 7, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0a5 - Feb. 3, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0a4 - Jan. 14, 2022 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0a3 - Dec. 8, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0a2 - Nov. 5, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.11.0a1 - Oct. 5, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.0rc2 - Sept. 7, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.0rc1 - Aug. 2, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.0b4 - July 10, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.0b3 - June 17, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.0b2 - May 31, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.0b1 - May 3, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.0a7 - April 5, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.0a6 - March 1, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.2rc1 - Feb. 16, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.8rc1 - Feb. 16, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.0a5 - Feb. 2, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.0a4 - Jan. 4, 2021 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.7rc1 - Dec. 7, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.0a3 - Dec. 7, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.1rc1 - Nov. 26, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.0a2 - Nov. 3, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.10.0a1 - Oct. 5, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.0rc2 - Sept. 17, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.10rc1 - Aug. 22, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.0rc1 - Aug. 11, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.0b5 - July 20, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.0b4 - July 3, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.8rc1 - June 17, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.11rc1 - June 17, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.0b3 - June 9, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.0b2 - June 9, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.0b1 - May 19, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.0a6 - April 28, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.18rc1 - April 4, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.0a5 - March 23, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.7rc1 - March 4, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.0a4 - Feb. 26, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.2rc2 - Feb. 17, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.2rc1 - Feb. 10, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.0a3 - Jan. 24, 2020 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.0a2 - Dec. 18, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.6rc1 - Dec. 11, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.10rc1 - Dec. 11, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.1rc1 - Dec. 10, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.9.0a1 - Nov. 19, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.8rc2 - Oct. 12, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.17rc1 - Oct. 9, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.5rc1 - Oct. 2, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.0rc1 - Oct. 1, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.8rc1 - Sept. 9, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.0b4 - Aug. 29, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.0b3 - July 29, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.0b2 - July 4, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.4rc1 - June 18, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.9rc1 - June 18, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.0b1 - June 4, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.0a4 - May 6, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.0a3 - March 25, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.3rc1 - March 12, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.10rc1 - March 4, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.7rc1 - March 4, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.0a2 - Feb. 25, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.16rc1 - Feb. 17, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.8.0a1 - Feb. 3, 2019 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.2rc1 - Dec. 11, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.8rc1 - Dec. 11, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.1rc2 - Oct. 13, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.7rc2 - Oct. 13, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.1rc1 - Sept. 26, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.7rc1 - Sept. 26, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.9rc1 - July 20, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.6rc1 - July 20, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.6rc1 - June 12, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.0rc1 - June 11, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.0b5 - May 30, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.15rc1 - April 15, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.5rc1 - March 13, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.0b2 - Feb. 28, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.0b1 - Jan. 31, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.8rc1 - Jan. 23, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.5rc1 - Jan. 23, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.0a4 - Jan. 9, 2018 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.0a3 - Dec. 5, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.4rc1 - Dec. 5, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.0a2 - Oct. 17, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.7.0a1 - Sept. 19, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.3rc1 - Sept. 19, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.3.7rc1 - Sept. 6, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.14rc1 - Aug. 27, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.4rc1 - July 25, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.7rc1 - July 25, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.2rc2 - July 7, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.2rc1 - June 17, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.1rc1 - March 5, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.3rc1 - Jan. 3, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.6rc1 - Jan. 3, 2017 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.0rc2 - Dec. 16, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.0rc1 - Dec. 6, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.13rc1 - Dec. 4, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.0b4 - Nov. 21, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.0b3 - Oct. 31, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.0b2 - Oct. 10, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.0b1 - Sept. 12, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.0a4 - Aug. 15, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.0a3 - July 12, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.0a2 - June 13, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.12rc1 - June 13, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.2rc1 - June 13, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.5rc1 - June 13, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.6.0a1 - May 17, 2016 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.4rc1 - Dec. 7, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.1rc1 - Nov. 23, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.11rc1 - Nov. 21, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.0rc4 - Sept. 9, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.0rc3 - Sept. 8, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.0rc2 - Aug. 25, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.0rc1 - Aug. 11, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.0b4 - July 26, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.0b3 - July 5, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.0b2 - June 1, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.0b1 - May 24, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.10rc1 - May 11, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.0a4 - April 20, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.0a3 - March 30, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.0a2 - March 9, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.5.0a1 - Feb. 8, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.3rc1 - Feb. 8, 2015 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.9rc1 - Nov. 26, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 3.3.6rc1 - Oct. 4, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 3.2.6rc1 - Oct. 4, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.2rc1 - Sept. 22, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 2.7.7rc1 - May 17, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.1rc1 - May 5, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 3.4.0rc3 - March 10, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 3.3.5rc2 - March 2, 2014 Download Gzipped source tarball Download XZ compressed source tarball Python 3.3.5rc1 - Feb. 23, 2014 Download Gzipped source tar ball Download XZ compressed source tarball Python 3.3.5rc1 - Feb. 23, 2014 Download Gzipped source tarball Download XZ compressed source tarball \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Source Releases", "Stable Releases", "Pre-releases"]}
{"url": "https://www.python.org/downloads/", "title": "Download Python | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Download the latest source release Download Python 3.13.2 Download the latest version for Windows Download Python 3.13.2 Download the latest version for macOS Download Python 3.13.2 Download the latest version of Python Download Python 3.13.2 Looking for Python with a different OS? Python for Windows , Linux/UNIX , macOS , Other Want to help test development versions of Python 3.14? Pre-releases , Docker images Active Python Releases For more information visit the Python Developer's Guide . Python version Maintenance status First released End of support Release schedule 3.14 pre-release 2025-10-01 (planned) 2030-10 PEP 745 3.13 bugfix 2024-10-07 2029-10 PEP 719 3.12 bugfix 2023-10-02 2028-10 PEP 693 3.11 security 2022-10-24 2027-10 PEP 664 3.10 security 2021-10-04 2026-10 PEP 619 3.9 security 2020-10-05 2025-10 PEP 596 3.8 end of life, last release was 3.8.20 2019-10-14 2024-10-07 PEP 569 Looking for a specific release? Python releases by version number: Release version Release date Click for more Python 3.13.2 Feb. 4, 2025 Download Release Notes Python 3.12.9 Feb. 4, 2025 Download Release Notes Python 3.12.8 Dec. 3, 2024 Download Release Notes Python 3.13.1 Dec. 3, 2024 Download Release Notes Python 3.11.11 Dec. 3, 2024 Download Release Notes Python 3.10.16 Dec. 3, 2024 Download Release Notes Python 3.9.21 Dec. 3, 2024 Download Release Notes Python 3.13.0 Oct. 7, 2024 Download Release Notes Python 3.12.7 Oct. 1, 2024 Download Release Notes Python 3.11.10 Sept. 7, 2024 Download Release Notes Python 3.10.15 Sept. 7, 2024 Download Release Notes Python 3.12.6 Sept. 6, 2024 Download Release Notes Python 3.9.20 Sept. 6, 2024 Download Release Notes Python 3.8.20 Sept. 6, 2024 Download Release Notes Python 3.12.5 Aug. 6, 2024 Download Release Notes Python 3.12.4 June 6, 2024 Download Release Notes Python 3.12.3 April 9, 2024 Download Release Notes Python 3.11.9 April 2, 2024 Download Release Notes Python 3.10.14 March 19, 2024 Download Release Notes Python 3.9.19 March 19, 2024 Download Release Notes Python 3.8.19 March 19, 2024 Download Release Notes Python 3.11.8 Feb. 6, 2024 Download Release Notes Python 3.12.2 Feb. 6, 2024 Download Release Notes Python 3.12.1 Dec. 8, 2023 Download Release Notes Python 3.11.7 Dec. 4, 2023 Download Release Notes Python 3.12.0 Oct. 2, 2023 Download Release Notes Python 3.11.6 Oct. 2, 2023 Download Release Notes Python 3.11.5 Aug. 24, 2023 Download Release Notes Python 3.10.13 Aug. 24, 2023 Download Release Notes Python 3.9.18 Aug. 24, 2023 Download Release Notes Python 3.8.18 Aug. 24, 2023 Download Release Notes Python 3.10.12 June 6, 2023 Download Release Notes Python 3.11.4 June 6, 2023 Download Release Notes Python 3.7.17 June 6, 2023 Download Release Notes Python 3.8.17 June 6, 2023 Download Release Notes Python 3.9.17 June 6, 2023 Download Release Notes Python 3.10.11 April 5, 2023 Download Release Notes Python 3.11.3 April 5, 2023 Download Release Notes Python 3.10.10 Feb. 8, 2023 Download Release Notes Python 3.11.2 Feb. 8, 2023 Download Release Notes Python 3.11.1 Dec. 6, 2022 Download Release Notes Python 3.10.9 Dec. 6, 2022 Download Release Notes Python 3.9.16 Dec. 6, 2022 Download Release Notes Python 3.8.16 Dec. 6, 2022 Download Release Notes Python 3.7.16 Dec. 6, 2022 Download Release Notes Python 3.11.0 Oct. 24, 2022 Download Release Notes Python 3.9.15 Oct. 11, 2022 Download Release Notes Python 3.8.15 Oct. 11, 2022 Download Release Notes Python 3.10.8 Oct. 11, 2022 Download Release Notes Python 3.7.15 Oct. 11, 2022 Download Release Notes Python 3.7.14 Sept. 6, 2022 Download Release Notes Python 3.8.14 Sept. 6, 2022 Download Release Notes Python 3.9.14 Sept. 6, 2022 Download Release Notes Python 3.10.7 Sept. 6, 2022 Download Release Notes Python 3.10.6 Aug. 2, 2022 Download Release Notes Python 3.10.5 June 6, 2022 Download Release Notes Python 3.9.13 May 17, 2022 Download Release Notes Python 3.10.4 March 24, 2022 Download Release Notes Python 3.9.12 March 23, 2022 Download Release Notes Python 3.10.3 March 16, 2022 Download Release Notes Python 3.9.11 March 16, 2022 Download Release Notes Python 3.8.13 March 16, 2022 Download Release Notes Python 3.7.13 March 16, 2022 Download Release Notes Python 3.9.10 Jan. 14, 2022 Download Release Notes Python 3.10.2 Jan. 14, 2022 Download Release Notes Python 3.10.1 Dec. 6, 2021 Download Release Notes Python 3.9.9 Nov. 15, 2021 Download Release Notes Python 3.9.8 Nov. 5, 2021 Download Release Notes Python 3.10.0 Oct. 4, 2021 Download Release Notes Python 3.7.12 Sept. 4, 2021 Download Release Notes Python 3.6.15 Sept. 4, 2021 Download Release Notes Python 3.9.7 Aug. 30, 2021 Download Release Notes Python 3.8.12 Aug. 30, 2021 Download Release Notes Python 3.9.6 June 28, 2021 Download Release Notes Python 3.8.11 June 28, 2021 Download Release Notes Python 3.7.11 June 28, 2021 Download Release Notes Python 3.6.14 June 28, 2021 Download Release Notes Python 3.9.5 May 3, 2021 Download Release Notes Python 3.8.10 May 3, 2021 Download Release Notes Python 3.9.4 April 4, 2021 Download Release Notes Python 3.8.9 April 2, 2021 Download Release Notes Python 3.9.2 Feb. 19, 2021 Download Release Notes Python 3.8.8 Feb. 19, 2021 Download Release Notes Python 3.6.13 Feb. 15, 2021 Download Release Notes Python 3.7.10 Feb. 15, 2021 Download Release Notes Python 3.8.7 Dec. 21, 2020 Download Release Notes Python 3.9.1 Dec. 7, 2020 Download Release Notes Python 3.9.0 Oct. 5, 2020 Download Release Notes Python 3.8.6 Sept. 24, 2020 Download Release Notes Python 3.5.10 Sept. 5, 2020 Download Release Notes Python 3.7.9 Aug. 17, 2020 Download Release Notes Python 3.6.12 Aug. 17, 2020 Download Release Notes Python 3.8.5 July 20, 2020 Download Release Notes Python 3.8.4 July 13, 2020 Download Release Notes Python 3.7.8 June 27, 2020 Download Release Notes Python 3.6.11 June 27, 2020 Download Release Notes Python 3.8.3 May 13, 2020 Download Release Notes Python 2.7.18 April 20, 2020 Download Release Notes Python 3.7.7 March 10, 2020 Download Release Notes Python 3.8.2 Feb. 24, 2020 Download Release Notes Python 3.8.1 Dec. 18, 2019 Download Release Notes Python 3.7.6 Dec. 18, 2019 Download Release Notes Python 3.6.10 Dec. 18, 2019 Download Release Notes Python 3.5.9 Nov. 2, 2019 Download Release Notes Python 3.5.8 Oct. 29, 2019 Download Release Notes Python 2.7.17 Oct. 19, 2019 Download Release Notes Python 3.7.5 Oct. 15, 2019 Download Release Notes Python 3.8.0 Oct. 14, 2019 Download Release Notes Python 3.7.4 July 8, 2019 Download Release Notes Python 3.6.9 July 2, 2019 Download Release Notes Python 3.7.3 March 25, 2019 Download Release Notes Python 3.4.10 March 18, 2019 Download Release Notes Python 3.5.7 March 18, 2019 Download Release Notes Python 2.7.16 March 4, 2019 Download Release Notes Python 3.7.2 Dec. 24, 2018 Download Release Notes Python 3.6.8 Dec. 24, 2018 Download Release Notes Python 3.7.1 Oct. 20, 2018 Download Release Notes Python 3.6.7 Oct. 20, 2018 Download Release Notes Python 3.5.6 Aug. 2, 2018 Download Release Notes Python 3.4.9 Aug. 2, 2018 Download Release Notes Python 3.7.0 June 27, 2018 Download Release Notes Python 3.6.6 June 27, 2018 Download Release Notes Python 2.7.15 May 1, 2018 Download Release Notes Python 3.6.5 March 28, 2018 Download Release Notes Python 3.4.8 Feb. 5, 2018 Download Release Notes Python 3.5.5 Feb. 5, 2018 Download Release Notes Python 3.6.4 Dec. 19, 2017 Download Release Notes Python 3.6.3 Oct. 3, 2017 Download Release Notes Python 3.3.7 Sept. 19, 2017 Download Release Notes Python 2.7.14 Sept. 16, 2017 Download Release Notes Python 3.4.7 Aug. 9, 2017 Download Release Notes Python 3.5.4 Aug. 8, 2017 Download Release Notes Python 3.6.2 July 17, 2017 Download Release Notes Python 3.6.1 March 21, 2017 Download Release Notes Python 3.4.6 Jan. 17, 2017 Download Release Notes Python 3.5.3 Jan. 17, 2017 Download Release Notes Python 3.6.0 Dec. 23, 2016 Download Release Notes Python 2.7.13 Dec. 17, 2016 Download Release Notes Python 3.4.5 June 27, 2016 Download Release Notes Python 3.5.2 June 27, 2016 Download Release Notes Python 2.7.12 June 25, 2016 Download Release Notes Python 3.4.4 Dec. 21, 2015 Download Release Notes Python 3.5.1 Dec. 7, 2015 Download Release Notes Python 2.7.11 Dec. 5, 2015 Download Release Notes Python 3.5.0 Sept. 13, 2015 Download Release Notes Python 2.7.10 May 23, 2015 Download Release Notes Python 3.4.3 Feb. 25, 2015 Download Release Notes Python 2.7.9 Dec. 10, 2014 Download Release Notes Python 3.4.2 Oct. 13, 2014 Download Release Notes Python 3.3.6 Oct. 12, 2014 Download Release Notes Python 3.2.6 Oct. 12, 2014 Download Release Notes Python 2.7.8 July 2, 2014 Download Release Notes Python 2.7.7 June 1, 2014 Download Release Notes Python 3.4.1 May 19, 2014 Download Release Notes Python 3.4.0 March 17, 2014 Download Release Notes Python 3.3.5 March 9, 2014 Download Release Notes Python 3.3.4 Feb. 9, 2014 Download Release Notes Python 3.3.3 Nov. 17, 2013 Download Release Notes Python 2.7.6 Nov. 10, 2013 Download Release Notes Python 2.6.9 Oct. 29, 2013 Download Release Notes Python 3.3.2 May 15, 2013 Download Release Notes Python 3.2.5 May 15, 2013 Download Release Notes Python 2.7.5 May 12, 2013 Download Release Notes Python 2.7.4 April 6, 2013 Download Release Notes Python 3.3.1 April 6, 2013 Download Release Notes Python 3.2.4 April 6, 2013 Download Release Notes Python 3.3.0 Sept. 29, 2012 Download Release Notes Python 2.6.8 April 10, 2012 Download Release Notes Python 3.2.3 April 10, 2012 Download Release Notes Python 3.1.5 April 9, 2012 Download Release Notes Python 2.7.3 April 9, 2012 Download Release Notes Python 3.2.2 Sept. 3, 2011 Download Release Notes Python 3.2.1 July 9, 2011 Download Release Notes Python 2.7.2 June 11, 2011 Download Release Notes Python 3.1.4 June 11, 2011 Download Release Notes Python 2.6.7 June 3, 2011 Download Release Notes Python 2.5.6 May 26, 2011 Download Release Notes Python 3.2.0 Feb. 20, 2011 Download Release Notes Python 2.7.1 Nov. 27, 2010 Download Release Notes Python 3.1.3 Nov. 27, 2010 Download Release Notes Python 2.6.6 Aug. 24, 2010 Download Release Notes Python 2.7.0 July 3, 2010 Download Release Notes Python 3.1.2 March 20, 2010 Download Release Notes Python 2.6.5 March 18, 2010 Download Release Notes Python 2.5.5 Jan. 31, 2010 Download Release Notes Python 2.6.4 Oct. 26, 2009 Download Release Notes Python 2.6.3 Oct. 2, 2009 Download Release Notes Python 3.1.1 Aug. 17, 2009 Download Release Notes Python 3.1.0 June 26, 2009 Download Release Notes Python 2.6.2 April 14, 2009 Download Release Notes Python 3.0.1 Feb. 13, 2009 Download Release Notes Python 2.5.4 Dec. 23, 2008 Download Release Notes Python 2.4.6 Dec. 19, 2008 Download Release Notes Python 2.5.3 Dec. 19, 2008 Download Release Notes Python 2.6.1 Dec. 4, 2008 Download Release Notes Python 3.0.0 Dec. 3, 2008 Download Release Notes Python 2.6.0 Oct. 2, 2008 Download Release Notes Python 2.3.7 March 11, 2008 Download Release Notes Python 2.4.5 March 11, 2008 Download Release Notes Python 2.5.2 Feb. 21, 2008 Download Release Notes Python 2.5.1 April 19, 2007 Download Release Notes Python 2.3.6 Nov. 1, 2006 Download Release Notes Python 2.4.4 Oct. 18, 2006 Download Release Notes Python 2.5.0 Sept. 19, 2006 Download Release Notes Python 2.4.3 April 15, 2006 Download Release Notes Python 2.4.2 Sept. 27, 2005 Download Release Notes Python 2.4.1 March 30, 2005 Download Release Notes Python 2.3.5 Feb. 8, 2005 Download Release Notes Python 2.4.0 Nov. 30, 2004 Download Release Notes Python 2.3.4 May 27, 2004 Download Release Notes Python 2.3.3 Dec. 19, 2003 Download Release Notes Python 2.3.2 Oct. 3, 2003 Download Release Notes Python 2.3.1 Sept. 23, 2003 Download Release Notes Python 2.3.0 July 29, 2003 Download Release Notes Python 2.2.3 May 30, 2003 Download Release Notes Python 2.2.2 Oct. 14, 2002 Download Release Notes Python 2.2.1 April 10, 2002 Download Release Notes Python 2.1.3 April 9, 2002 Download Release Notes Python 2.2.0 Dec. 21, 2001 Download Release Notes Python 2.0.1 June 22, 2001 Download Release Notes View older releases Sponsors Visionary sponsors help to host Python downloads. Licenses All Python releases are Open Source . Historically, most, but not all, Python releases have also been GPL-compatible. The Licenses page details GPL-compatibility and Terms and Conditions. Read more Sources For most Unix systems, you must download and compile the source code. The same source code archive can also be used to build the Windows and Mac versions, and is the starting point for ports to all other platforms. Download the latest Python 3 source. Read more Alternative Implementations This site hosts the \"traditional\" implementation of Python (nicknamed CPython). A number of alternative implementations are available as well. Read more History Python was created in the early 1990s by Guido van Rossum at Stichting Mathematisch Centrum in the Netherlands as a successor of a language called ABC. Guido remains Python\u2019s principal author, although it includes many contributions from others. Read more Release Schedules Python 3.14 Release Schedule Python 3.13 Release Schedule Python 3.12 Release Schedule Python 3.11 Release Schedule Python 3.10 Release Schedule Python 3.9 Release Schedule Python 3.8 Release Schedule See Status of Python Versions for all an overview of all versions, including unsupported. Information about specific ports, and developer info Windows macOS Other platforms Source Python Developer's Guide Python Issue Tracker How to verify your downloaded files are genuine Sigstore verification Starting with the Python 3.11.0 , Python 3.10.7 , and Python 3.9.14 releases, CPython release artifacts are signed with Sigstore. See our dedicated Sigstore Information page for how it works. OpenPGP verification Python versions before 3.14 are also signed using OpenPGP private keys of the respective release manager. In this case, verification through the release manager's public key is also possible.\r\nSee our dedicated OpenPGP Verification page for how it works. See PEP 761 for why OpenPGP key verification was dropped in Python 3.14. Windows (Updated for Azure Trusted Signing, which applies for all releases chronologically from 3.14.0a1) The Windows installers and all binaries produced as part of each Python release are signed using an Authenticode signing certificate issued to the Python Software Foundation. This can be verified by viewing the properties of any executable file, looking at the Digital Signatures tab, and confirming the name of the signer. Our full certificate subject is CN = Python Software Foundation, O = Python Software Foundation, L = Beaverton, S = Oregon, C = US and as of 14th October 2024 the certificate authority is Microsoft Identity Verification Root Certificate Authority . Our previous certificates were issued by DigiCert . Note that some executables may not be signed, notably, the default pip command. These are not built as part of Python, but are included from third-party libraries. Files that are intended to be modified before use cannot be signed and so will not have a signature. macOS Installer Packages Installer packages for Python on macOS downloadable from python.org are signed with\r\nwith an Apple Developer ID Installer certificate. As of Python 3.11.4 and 3.12.0b1 (2023-05-23), release installer packages are signed with certificates issued to the Python Software Foundation (Apple Developer ID BMM5U3QVKW) ). Installer packages for previous releases were signed with certificates issued to Ned Deily ( DJ3H93M7VJ ). Other Useful Items Looking for third-party Python modules ?  The Python Package Index has many of them. You can view the standard documentation\r\nonline, or you can download it\r\nin HTML, PostScript, PDF and other formats.  See the main Documentation page. Information on tools for unpacking archive files provided on python.org is available. Tip : even if you download a ready-made binary for your\r\nplatform, it makes sense to also download the source .\r\nThis lets you browse the standard library (the subdirectory Lib )\r\nand the standard collections of tools\r\n( Tools ) that come with it.  There's a lot you can learn from the\r\nsource! Want to contribute? Want to contribute?  See the Python Developer's Guide to learn about how Python development is managed. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Download the latest source release", "Download the latest version for Windows", "Download the latest version for macOS", "Download the latest version of Python", "Active Python Releases", "Looking for a specific release?", "Sponsors", "Licenses", "Sources", "Alternative Implementations", "History", "Release Schedules", "Information about specific ports, and developer info", "How to verify your downloaded files are genuine", "Other Useful Items", "Want to contribute?"]}
{"url": "https://www.python.org/about/help/", "title": "Help | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> About >>> Help Help New to programming and to Python? Check out the Beginner's Guide . New to Python? Read the standard tutorial . Look for a suitable book from a growing list of titles . Looking for code? See the download page for links to the Python interpreter. Explore the development repository . Got a Python problem or question? First check the Python FAQs , with answers to many common,\ngeneral Python questions. The Python Help category of the discuss.python.org website hosts usage questions and answers from the Python community. The tutor list offers interactive help. If the tutor list isn't your cup of tea, there are many other mailing lists and newsgroups . Stack Overflow has many Python questions and answers . You can post questions and ask for general advice about your code at the r/LearnPython subreddit. If you suspect a bug in the Python core, search the Python Bug Tracker . If you think you've found a security vulnerability in Python, please read the instructions for reporting security issues . If you've found a problem with this web site, check the pythondotorg issue tracker . Looking for a particular Python module or application? Try the Python Package Index to browse and search an\nextensive list of registered packages. Want to contribute? To report a bug in the Python core, use the Python Bug Tracker . To report a problem with this web site, use the pythondotorg issue tracker . To contribute a bug fix or other patch to the Python\ncore, see the Python Developer's Guide . To contribute to the official Python documentation , use the Issue Tracker to contribute a documentation patch.  See\nalso the guide to Helping with Documentation . To contribute to the official Python website, see the About the Python Web Site page or read the developer guide on Read the Docs . To announce your module or application to the Python community,\nuse comp.lang.python.announce (or via\nemail, python-announce@python.org ,\nif you lack news access).  More info: the announcements newsgroup\ndescription Need to contact the Python Software Foundation? Contact psf@python.org and let us\nknow how we can help! Problems with this website? If you're having issues with python.org itself, contact webmaster@python.org and let us\nknow how we can help! Other Issues? If you have a question not answered here, please reach out on discuss.python.org . The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Help", "New to programming and to Python?", "New to Python?", "Looking for code?", "Got a Python problem or question?", "Looking for a particular Python module or application?", "Want to contribute?", "Need to contact the Python Software Foundation?", "Problems with this website?", "Other Issues?", "The PSF"]}
{"url": "https://www.python.org/about/gettingstarted/", "title": "Python For Beginners | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> About >>> Getting Started Python For Beginners Welcome! Are you completely new to programming ?\nIf not then we presume you will be looking for information about\nwhy and how to get started with Python.\nFortunately an\nexperienced programmer in any programming language (whatever it may be)\ncan pick up Python very quickly.\nIt's also easy for beginners to use and learn, so jump in ! Installing Installing Python is generally easy, and nowadays\nmany Linux and UNIX distributions include a recent Python.\nEven\nsome Windows computers (notably those from HP) now come with Python\nalready installed.\nIf you do need to install Python and aren't confident about the\ntask you can find\na few notes on the BeginnersGuide/Download wiki page, but installation is unremarkable on most platforms. Learning Before getting started, you may want to find out which IDEs and text\neditors are tailored to make\nPython editing easy, browse the list of introductory books , or look at code samples that you might find\nhelpful. There is a list of tutorials suitable for experienced programmers on the BeginnersGuide/Tutorials page. There is also a list of resources in other languages which might be useful if English is not your first language. The online documentation is your first port of call for definitive information.\nThere is a fairly brief tutorial that gives you basic information about the language and\ngets you started. You can follow this by looking at the library reference for a full description of Python's many libraries and the language reference for\na complete (though somewhat dry) explanation of Python's syntax.\nIf you are looking for common Python recipes and patterns, you\ncan browse the ActiveState Python Cookbook Looking for Something Specific? If you want to know whether a particular application, or a library\nwith particular functionality, is available in Python there are a\nnumber of possible sources of information. The Python web site\nprovides a Python Package Index (also known as the Cheese Shop , a reference to the Monty Python\nscript of that name).\nThere is also a search page for a number of sources of Python-related\ninformation. Failing that, just Google for a phrase including the word ''python''\nand you may well get the result you need.\nIf all else fails, ask on the python newsgroup and there's a good chance someone will put you on the right track. Frequently Asked Questions If you have a question, it's a good idea to try the FAQ , which answers the most commonly\nasked questions about Python. Looking to Help? If you want to help to develop Python, take a look at the developer area for further information.\nPlease note that you don't have to be an expert programmer\nto help.  The documentation is just as important as the\ncompiler, and still needs plenty of work! The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python For Beginners", "Installing", "Learning", "Looking for Something Specific?", "Frequently Asked Questions", "Looking to Help?", "The PSF"]}
{"url": "https://www.python.org/about/quotes/", "title": "Quotes about Python | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> About >>> Quotes Quotes about Python Python is used successfully in thousands of real-world business\napplications around the world, including many large and mission\ncritical systems.  Here are some quotes from happy Python users: YouTube.com \"Python is fast enough for our site and allows us to produce\nmaintainable features in record times, with a minimum of developers,\"\nsaid Cuong Do, Software Architect, YouTube.com . Industrial Light & Magic \"Python plays a key role in our production pipeline.  Without it a\nproject the size of Star Wars: Episode II would have been very\ndifficult to pull off. From crowd rendering to batch processing to\ncompositing, Python binds all things together,\" said Tommy Burnette,\nSenior Technical Director, Industrial Light & Magic . \"Python is everywhere at ILM. It's used to extend the capabilities\nof our applications, as well as providing the glue between them. Every\nCG image we create has involved Python somewhere in the process,\" said\nPhilip Peterson, Principal Engineer, Research & Development, Industrial Light & Magic . Google \"Python has been an important part of Google since the beginning,\nand remains so as the system grows and evolves. Today dozens of Google\nengineers use Python, and we're looking for more people with skills in\nthis language.\" said Peter Norvig, director of search quality at Google, Inc. Journyx \"Journyx technology, from the source code of our software to the code that\nmaintains our Web site and ASP sites, is entirely based on Python. It\nincreases our speed of development and keeps us several steps ahead of\ncompetitors while remaining easy to read and use.  It's as high level of a\nlanguage as you can have without running into functionality problems.  I\nestimate that Python makes our coders 10 times more productive than Java\nprogrammers, and 100 times more than C programmers.\" -- Curt Finch, CEO, Journyx IronPort \"IronPort email gateway appliances are used by the largest\ncorporations and ISPs in the world,\" said Mark Peek, Sr. Director of\nEngineering at IronPort Systems .  \"Python\nis a critical ingredient in this high performance system. IronPort's\nsuite of products contains over a million lines of Python. The PSF is\nan invaluable resource that helps keep Python on the cutting edge.\" EVE Online \"Python enabled us to create EVE Online ,\na massive multiplayer game, in record\ntime. The EVE Online server cluster runs over 50,000 simultaneous players\nin a shared space simulation, most of which is created in Python. The\nflexibilities of Python have enabled us to quickly improve the game\nexperience based on player feedback\" said\nHilmar Veigar Petursson of CCP Games . HomeGain \"HomeGain maintains its commitment to continual improvement through\nrapid turnaround of new features and enhancements.  Python supports\nthis short time-to-market philosophy with concise, clear syntax and a\npowerful standard library.  New development proceeds rapidly, and\nmaintenance of existing code is straightforward and fast,\" said Geoff\nGerrietts, Software Engineer, HomeGain.com . Thawte Consulting \"Python makes us extremely productive, and makes\nmaintaining a large and rapidly evolving codebase relatively\nsimple,\" said Mark Shuttleworth. University of Maryland \"I have the students learn Python in our undergraduate and graduate\nSemantic Web courses.  Why?  Because basically there's nothing else\nwith the flexibility and as many web libraries,\" said Prof. James\nA. Hendler. EZTrip.com \"The travel industry is made up of a myriad supplier data feeds all of\nwhich are proprietary in some way and are constantly changing.   Python\nrepeatedly has allowed us to access, build and test our in-house\ncommunications with hundreds of travel suppliers around the world in a\nmatter of days rather then the months it would have taken using other\nlanguages.  Since adopting Python 2 years ago, Python has provided us\nwith a measurable productivity gain that allows us to stay competitive\nin the online travel space,\" said Michael Engelhart, CTO of EZTrip.com . RealEstateAgent.com \"Python in conjunction with PHP has repeatedly allowed us to develop\nfast and proficient applications that permit Real Estate Agent .com to operate with minimal\nresources. Python is a critical part of our dynamically growing\ncluster directory of real estate agents.\" said Gadi Hus, Webmaster, Volico Web Consulting Firaxis Games \"Like XML, scripting was extremely useful as both a mod tool and an\ninternal development tool.  If you don't have any need to expose code\nand algorithms in a simple and safe way to others, you can argue that\nproviding a scripting language is not worth the effort.  However, if\nyou do have that need, as we did, scripting is a no brainer, and it\nmakes complete sense to use a powerful, documented, cross-platform\nstandard such as Python.\"  -- Mustafa Thamer of Firaxis Games, talking\nabout Civilization IV.  Quoted on page 18 of the August 2005 Game Developer Magazine . \"Python, like many good technologies, soon spreads virally throughout\nyour development team and finds its way into all sorts of applications\nand tools.  In other words, Python begins to feel like a big hammer and\ncoding tasks look like nails.\"\n-- Mustafa Thamer of Firaxis Games, talking about Civilization IV.\nQuoted on page 18 of the August 2005 Game Developer Magazine . \"We chose to use python because we wanted a well-supported scripting\nlanguage that could extend our core code. Indeed, we wrote much more\ncode in python than we were expecting, including all in-game screens\nand the main interface. It was a huge win for the project because\nwriting code in a language with garbage collection simply goes faster\nthan writing code in C++. The fact that users will be able to easily\nmod the interface is a nice plus as well. The downside of python was\nthat it significantly increased our build times, mostly from linking\nwith Boost.\" -- Soren Johnson, lead designer, Civilization IV.  Quoted\nin a Slashdot interview . The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Quotes about Python", "YouTube.com", "Industrial Light & Magic", "Google", "Journyx", "IronPort", "EVE Online", "HomeGain", "Thawte Consulting", "University of Maryland", "EZTrip.com", "RealEstateAgent.com", "Firaxis Games", "The PSF"]}
{"url": "https://www.python.org/shell/", "title": "Welcome to Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python is a programming language that lets you work quickly and integrate systems more effectively. Learn More Get Started Whether you're new to programming or an experienced developer, it's easy to learn and use Python. Start with our Beginner\u2019s Guide Download Python source code and installers are available for download for all versions! Latest: Python 3.13.2 Docs Documentation for Python's standard library, along with tutorials and guides, are available online. docs.python.org Jobs Looking for work or have a Python related position that you're trying to hire for? Our relaunched community-run job board is the place to go. jobs.python.org Latest News More 2025- 02-11 Python 3.14.0 alpha 5 is out 2025- 02-04 Python 3.13.2 and 3.12.9 now available! 2025- 01-15 PSF Newsletter: Awards, Grants, & PyCon US 2025! 2025- 01-14 Python 3.14.0 alpha 4 is out 2025- 01-14 Powering Python together in 2025, thanks to our community! Upcoming Events More 2025- 02-20 Workshop: Creating Python Communities 2025- 02-21 Django Girls Koforidua 2025- 02-22 DjangoCongress JP 2025 2025- 02-22 PyConf Hyderabad 2025 2025- 02-22 Python Weekend Abuja Success Stories More Generating realistic location data for users for testing or modeling simulations is a hard problem. Current approaches just create random locations inside a box, placing users in waterways or on top of buildings. This inability to make accurate, synthetic location data stifles a lot of innovative projects that require diverse and complex datasets to fuel their work. Using Python with Gretel.ai to Generate Synthetic Location Data by Alex Watson, co-founder and CPO, Gretel.ai Use Python for\u2026 More Web Development : Django , Pyramid , Bottle , Tornado , Flask , web2py GUI Development : tkInter , PyGObject , PyQt , PySide , Kivy , wxPython , DearPyGui Scientific and Numeric : SciPy , Pandas , IPython Software Development : Buildbot , Trac , Roundup System Administration : Ansible , Salt , OpenStack , xonsh >>> Python Software Foundation The mission of the Python Software Foundation is to promote, protect, and advance the Python programming language, and to support and facilitate the growth of a diverse and international community of Python programmers. Learn more Become a Member Donate to the PSF \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Get Started", "Download", "Docs", "Jobs", "Latest News", "Upcoming Events", "Success Stories", "Use Python for\u2026"]}
{"url": "https://www.python.org/events/python-user-group/past/", "title": "Our Events | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event from the Python User Group Calendar Past Events More Python User Group Dhaka Monthly Meetup 15 Feb. 2025 2025 9am UTC\n                 \u2013 11am\n                    UTC Dhaka, Bangladesh Python Barcamp Karlsruhe 2025 15 Feb. 2025 \u2013\n            16 Feb. 2025 Karlsruhe, Germany IndyPy - Building Voice Agents: Unpacking the Pipeline 29 Jan. 2025 2025 12am UTC\n                 \u2013 2am\n                    UTC Carmel, IN, USA and Online Python Leiden User Group 27 Jan. 2025 2025 7pm UTC\n                 \u2013 9pm\n                    UTC Leiden, The Netherlands Python Meeting D\u00fcsseldorf 22 Jan. 2025 2025 5pm UTC\n                 \u2013 8pm\n                    UTC D\u00fcsseldorf, Germany PyLadies Amsterdam 16 Jan. 2025 2025 4:15pm UTC\n                 \u2013 7:15pm\n                    UTC Online Python Event Subscriptions Subscribe to Python Event Calendars: Events in iCal format Python Events Calendars For Python events near you, please have a look at the Python events map . The Python events calendars are maintained by the events calendar team . Please see the events calendar project page for details on how to submit events , subscribe to the calendars , get Twitter feeds or embed them. Thank you. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["from the Python User Group Calendar", "Past Events", "Python Event Subscriptions", "Python Events Calendars"]}
{"url": "https://www.python.org/events/python-events/past/", "title": "Our Events | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event from the Python Events Calendar Past Events More PyCascades 2025 08 Feb. 2025 \u2013\n            09 Feb. 2025 Portland, USA Python devroom @ FOSDEM 2025 02 Feb. 2025 2025 Brussels, Belgium PyCon+Web 2025 24 Jan. 2025 \u2013\n            25 Jan. 2025 Berlin, Germany PyCon Tanzania 2024 04 Dec. 2024 \u2013\n            05 Dec. 2024 Dar es Salaam, Tansania DELSU Tech Invasion 2.0 - Python for Academics 04 Dec. 2024 \u2013\n            05 Dec. 2024 Abraka, Nigeria PyData Global 2024 03 Dec. 2024 \u2013\n            05 Dec. 2024 Online Python Event Subscriptions Subscribe to Python Event Calendars: Events in iCal format Python Events Calendars For Python events near you, please have a look at the Python events map . The Python events calendars are maintained by the events calendar team . Please see the events calendar project page for details on how to submit events , subscribe to the calendars , get Twitter feeds or embed them. Thank you. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["from the Python Events Calendar", "Past Events", "Python Event Subscriptions", "Python Events Calendars"]}
{"url": "https://www.python.org/events/python-user-group/", "title": "Our Events | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event from the Python User Group Calendar Upcoming Events More Python Event Subscriptions Subscribe to Python Event Calendars: Events in iCal format Python Events Calendars For Python events near you, please have a look at the Python events map . The Python events calendars are maintained by the events calendar team . Please see the events calendar project page for details on how to submit events , subscribe to the calendars , get Twitter feeds or embed them. Thank you. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["from the Python User Group Calendar", "Upcoming Events", "Python Event Subscriptions", "Python Events Calendars"]}
{"url": "https://www.python.org/events/python-events/", "title": "Our Events | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event from the Python Events Calendar Upcoming Events More Python Event Subscriptions Subscribe to Python Event Calendars: Events in iCal format Python Events Calendars For Python events near you, please have a look at the Python events map . The Python events calendars are maintained by the events calendar team . Please see the events calendar project page for details on how to submit events , subscribe to the calendars , get Twitter feeds or embed them. Thank you. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["from the Python Events Calendar", "Upcoming Events", "Python Event Subscriptions", "Python Events Calendars"]}
{"url": "https://www.python.org/events/", "title": "Our Events | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Upcoming Events PyCon Sweden 30 Oct. 2025 \u2013\n            31 Oct. 2025 Clarion Hotel Skanstull, Stockholm, Sweden Python Brasil 2025 21 Oct. 2025 \u2013\n            27 Oct. 2025 Sao Paulo, Brazil Swiss Python Summit 2025 16 Oct. 2025 \u2013\n            17 Oct. 2025 Rapperswil, Switzerland PyCon Estonia 2025 02 Oct. 2025 \u2013\n            03 Oct. 2025 Tallinn, Estonia PyCon JP 2025 26 Sept. 2025 \u2013\n            27 Sept. 2025 Hiroshima, Japan PyCon UK 2025 19 Sept. 2025 \u2013\n            22 Sept. 2025 Manchester, United Kingdom EuroPython 2025 14 July 2025 \u2013\n            20 July 2025 Prague, Czech Republic Workshop: Creating Python Communities 29 June 2025 2025 Serekunda, Gambia PyCamp Leipzig 2025 28 June 2025 \u2013\n            29 June 2025 Leipzig, Germany PyCon Italia 2025 28 May 2025 \u2013\n            31 May 2025 Bologna, Italy PyGrunn 2025 16 May 2025 2025 Groningen, Netherlands PyCon US 2025 14 May 2025 \u2013\n            22 May 2025 Pittsburgh, Pennsylvania, USA PyCamp Espa\u00f1a 2025 01 May 2025 \u2013\n            04 May 2025 Sevilla, Spain Django Girls Ho, 2025 26 April 2025 2025 9:30am UTC\n                 \u2013 4:45pm\n                    UTC Ho, Ghana Django Girls Ho, 2025 25 April 2025 2025 9:30am UTC\n                 \u2013 4:45pm\n                    UTC Ho, Ghana DjangoCon Europe 2025 23 April 2025 \u2013\n            27 April 2025 Dublin, Ireland PyCon DE & PyData 2025 23 April 2025 \u2013\n            25 April 2025 Darmstadt, Germany PyCon Lithuania 2025 23 April 2025 \u2013\n            25 April 2025 Vilnius, Lithuania Workshop: Creating Python Communities 15 April 2025 2025 Bakau, Gambia PyTexas 2025 11 April 2025 \u2013\n            13 April 2025 Austin, TX Python Meeting D\u00fcsseldorf 09 April 2025 2025 4pm UTC\n                 \u2013 7pm\n                    UTC D\u00fcsseldorf, Germany Python Conference Austria 2025 06 April 2025 \u2013\n            07 April 2025 Eisenstadt, Austria Python Leiden User Group 27 March 2025 2025 7pm UTC\n                 \u2013 9pm\n                    UTC Leiden, The Netherlands PyCamp Argentina 2025 21 March 2025 \u2013\n            24 March 2025 Baradero, Argentina PyCon APAC 2025 01 March 2025 \u2013\n            02 March 2025 Quezon City, Philippines Helsinki Python meetup 26 Feb. 2025 2025 3:30pm UTC\n                 \u2013 5:30pm\n                    UTC Helsinki, Finland GeoPython 2025 24 Feb. 2025 \u2013\n            26 Feb. 2025 Basel, Switzerland PyCon Namibia 24 Feb. 2025 \u2013\n            27 Feb. 2025 Windhoek, Namibia Python Weekend Abuja 22 Feb. 2025 2025 7am UTC\n                 \u2013 3pm\n                    UTC Abuja, Federal Capital Territory, Nigeria DjangoCongress JP 2025 22 Feb. 2025 2025 Online PyConf Hyderabad 2025 22 Feb. 2025 \u2013\n            23 Feb. 2025 Hyderabad, Telangana, India Django Girls Koforidua 21 Feb. 2025 \u2013\n            22 Feb. 2025 Koforidua, Ghana Workshop: Creating Python Communities 20 Feb. 2025 2025 Banjul, Gambia You just missed... Python User Group Dhaka Monthly Meetup 15 Feb. 2025 2025 9am UTC\n                 \u2013 11am\n                    UTC Dhaka, Bangladesh Python Barcamp Karlsruhe 2025 15 Feb. 2025 \u2013\n            16 Feb. 2025 Karlsruhe, Germany Python Events Calendars For Python events near you, please have a look at the Python events map . The Python events calendars are maintained by the events calendar team . Please see the events calendar project page for details on how to submit events , subscribe to the calendars , get Twitter feeds or embed them. Thank you. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Upcoming Events", "You just missed...", "Python Events Calendars"]}
{"url": "https://www.python.org/psf/newsletter/", "title": "PSF Newsletter Signup | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> News & Community >>> Subscribe to the Newsletter PSF Newsletter Signup Sign up for our approximately quarterly newsletter to receive important community news.\r\n\r\nYou can view past issues here . Follow @ThePSF on Mastodon or X (Twitter) for the latest information. Subscribe * indicates required Email Address * Nickname * Full Name Contact Permissions (GDPR Compliance) Please select all the ways you would like to hear from Python Software Foundation: Newsletter You can unsubscribe at any time by clicking the link in the footer of our emails. For information about our privacy practices, please visit our website. We use Mailchimp as our marketing platform. By clicking below to subscribe, you acknowledge that your information will be transferred to Mailchimp for processing. Learn more about Mailchimp's privacy practices here. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["PSF Newsletter Signup", "Subscribe", "The PSF"]}
{"url": "https://www.python.org/blogs/", "title": "Our Blogs | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Welcome to the Python Insider Python 3.14.0 alpha 5 is out Feb. 11, 2025, 7:41 p.m. Here comes the antepenultimate alpha. https://www.python.org/downloads/release/python-3140a5/ This is an early developer preview of Python 3.14 Major new features of the 3.14 series, compared to 3.13 Python 3.14 is still in development. This release, 3.14.0a5, is the fifth of seven planned alpha releases. Alpha releases are intended to make it easier \u2026 Read more Latest News More Python 3.13.2 and 3.12.9 now available! Feb. 4, 2025 PSF Newsletter: Awards, Grants, & PyCon US 2025! Jan. 15, 2025 Python 3.14.0 alpha 4 is out Jan. 14, 2025 Powering Python together in 2025, thanks to our community! Jan. 14, 2025 PSF Grants: Program & Charter Updates (Part 3) Dec. 19, 2024 Python Insider Subscriptions Subscribe to Python Insider via: RSS Twitter Also check out the Python-Dev mailing list Copyright Python Insider by the Python Core Developers is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License . Based on a work at blog.python.org . \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Welcome to the", "Python 3.14.0 alpha 5 is out", "Latest News", "Subscriptions", "Copyright"]}
{"url": "https://www.python.org/success-stories/category/software-development/", "title": "Software Development | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Success Stories >>> Software Development Software Development Zama Concrete ML: Simplifying Homomorphic Encryption for Python Machine Learning Building Robust Codebases with Python's Type Annotations Building a Dependency Graph of Our Python Codebase Bleeding Edge Dependency Testing Using Python How We Created a Python Development Framework for Non-Developers Vacation rental marketplace development using Python Deliver Clean and Safe Code for Your Python Applications A Startup Healthcare Tech Firm Is Now Poised for the Future Using Python to build a range of products across multiple industries Using Python for marketplace development under tight deadlines Using Python to develop a patient health portal Building an online pharmacy marketplace with Python Python provides convenience and flexibility for scalable ML/AI Securing Python Runtimes Building an open-source and cross-platform Azure CLI with Python D-Link Australia Uses Python to Control Firmware Updates Distributed System For Technology Integration EZRO Content Management System Avoiding Documentation Costs with Python A Custom Image Viewing Game for an Autistic Child XIST:  An XML Transformation Engine Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Software Development"]}
{"url": "https://www.python.org/success-stories/category/scientific/", "title": "Scientific | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Success Stories >>> Scientific Scientific Why Python Matters for the VR Community Python for Collaborative Drug Discovery Python To Help Meteorologists Python for Scientific Data Visualization Simulating Biomolecules with Python Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Scientific"]}
{"url": "https://www.python.org/success-stories/category/government/", "title": "Government | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Success Stories >>> Government Government Python Powered CrossCompute Report Automation for eReliability Tracker Leads to Cost and Time Savings for the American Public Power Association Saving the world with Open Data and Python Frequentis TAPtools\u00ae - Python in Air Traffic Control Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Government"]}
{"url": "https://www.python.org/success-stories/category/engineering/", "title": "Engineering | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Success Stories >>> Engineering Engineering Python for Collaborative Robots Abridging clinical conversations using Python Getting to Know Python Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Engineering"]}
{"url": "https://www.python.org/success-stories/category/education/", "title": "Education | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Success Stories >>> Education Education Elementary school education: Is it love or just Python? Using Python to Automate Tedious Tasks Python in the Blind Audio Tactile Mapping System Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Education"]}
{"url": "https://www.python.org/success-stories/category/business/", "title": "Business | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Success Stories >>> Business Business Lincoln Loop: Building a sustainable business inspired by Python\u2019s ethos Using Python for commercial cloud backup Using Python to make unstable APIs reliable Python for Financial Machine Learning at Union Investment Python in a classic enterprise setting - hand-rolled microservices for supply chain / ERP Making our new website and admin work together using Python Using Python scripts to analyse SEO and broken links on your site Python to Control CD/DVD Packaging Hardware Carmanah Lights the Way with Python Python On Guard Python Powers Journyx Timesheet Python is Rackspace's CORE Technology WordStream Uses Python as Their Platform of Choice D-Link Australia Uses Python to Control Firmware Updates Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Business"]}
{"url": "https://www.python.org/success-stories/category/arts/", "title": "Arts | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Success Stories >>> Arts Arts Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Arts"]}
{"url": "https://www.python.org/success-stories/", "title": "Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python allows us to produce maintainable features in record times, with a minimum of developers. Cuong Do, Software Architect YouTube.com Newest success stories Zama Concrete ML: Simplifying Homomorphic Encryption for Python Machine Learning To simplify the adoption of FHE, which involves a complex and resource-intensive technological stack, Zama developed tools that streamline the integration of FHE into applications. Since Python is the de facto standard for building machine learning (ML) applications, it was an obvious choice to create an open-source FHE library in Python. Read more Building Robust Codebases with Python's Type Annotations Maintaining our ever-evolving Python codebase poses an intricate challenge: how do we make updates to reflect the changing rules and regulations of 200+ global markets without compromising access to the systems that our engineers and traders use on a daily basis? While an inner layer of shared business logic enables coherency in our codebase performance, it also means small regulatory changes can impact many systems.\r\n\r\nIn this article, Python Engineer John Lekberg details how we use Python type annotations to minimize the time and risk involved in manual verification. Read more Building a Dependency Graph of Our Python Codebase Prioritizing cutting-edge speed and supporting the rapid growth of Hudson River Trading\u2019s codebase can have unintended effects that require innovative solutions. For those working on our Python codebase, this means addressing \u201ccode tangling,\u201d the coupling of unrelated code through unintuitive import cycles. In this article, George Farcasiu, Noah Kim, Jacob Brugh, and Jiahao Li discuss how they mitigate the cost and time burden of this issue by creating new tools to analyze and untangle dependencies efficiently. Read more Lincoln Loop: Building a sustainable business inspired by Python\u2019s ethos Since its founding in 2007, Lincoln Loop has been building sites for their clients with Python and Django. They credit Python's philosophy of practicality and explicitness, along with the rich ecosystem of open-source libraries available on PyPI, as keys to their success. Additionally, the inclusivity, openness, and strong culture of collaboration in the Python community have enabled the agency to find and hire great people who are lifelong learners. Read more Newest success stories by category Arts See All Business Lincoln Loop: Building a sustainable business inspired by Python\u2019s ethos Using Python for commercial cloud backup Using Python to make unstable APIs reliable Python for Financial Machine Learning at Union Investment Python in a classic enterprise setting - hand-rolled microservices for supply chain / ERP See All Data Science How HyperFinity Is Streamlining Its Serverless Architecture with Snowflake's Snowpark for Python Reimagining data science with Python-based operators in Einblick\u2019s visual canvas Using Python with Gretel.ai to Generate Synthetic Location Data See All Education Elementary school education: Is it love or just Python? Using Python to Automate Tedious Tasks Python in the Blind Audio Tactile Mapping System See All Engineering Python for Collaborative Robots Abridging clinical conversations using Python Getting to Know Python See All Government Python Powered CrossCompute Report Automation for eReliability Tracker Leads to Cost and Time Savings for the American Public Power Association Saving the world with Open Data and Python Frequentis TAPtools\u00ae - Python in Air Traffic Control See All Scientific Why Python Matters for the VR Community Python for Collaborative Drug Discovery Python To Help Meteorologists Python for Scientific Data Visualization Simulating Biomolecules with Python See All Software Development Zama Concrete ML: Simplifying Homomorphic Encryption for Python Machine Learning Building Robust Codebases with Python's Type Annotations Building a Dependency Graph of Our Python Codebase Bleeding Edge Dependency Testing Using Python How We Created a Python Development Framework for Non-Developers See All Submit Yours! Python users want to know more about Python in the wild. Tell us your story \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Newest success stories", "Newest success stories by category", "Arts", "Business", "Data Science", "Education", "Engineering", "Government", "Scientific", "Software Development", "Submit Yours!"]}
{"url": "https://www.python.org/psf/community-stories/", "title": "Community Stories | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse Python >>> Shared Stories Packaging People who need to install Python packages get confused a lot. That's not their fault; that's because the volunteers who maintain the packaging tools don't have enough time to get everything organized so that it's clear and easy to use. In the last few years, the PSF has gotten grants and used that money to massively improve packaging. We overhauled PyPI and we're making pip more consistent, with genuine attention to user experience. With more funding, we can finally make managing packages pleasant as programming in Python. Sumana Harihareswara, Changeset Consulting CPython Development I started using Python in my PhD for performing different simulations of rotating black holes, black hole jets and their properties. I quickly fell in love with the language and its community and that led me to become a core dev some years ago. Since I became a core dev I have worked towards making Python faster and more versatile. Although most of my work is in the parser, the compiler pipeline and the garbage collector I like to work all over the place fixing bugs and trying to spot performance improvement opportunities. Hopefully, in the following years, we can push Python forward to the future by improving its general speed, making it more compatible with other implementations and improving the multi-core experience. Although this will be a challenging path and will require drastic changes in Python itself and its C-API, I am very excited about the things to come and what awaits for the Python Language and its community :) Pablo Galindo Salgado, Python Core Developer Community trainings A huge turning point in my career was a Python workshop. I programmed a bit as a kid, and took a single CS class in college, and tried to poke along doing some self-study so I could get better. And then I attended a Boston Python Workshop for Women And Their Friends http://bostonpythonworkshop.com/ , led by Jessica McKellar. We worked through well-designed exercises and I got hands-on practice that helped me get through that transition, from painstakingly copying individual lines and functions into the interpreter, to thinking in terms of Python's program flow. Years later, my Python and software management skills have been invaluable. I run a small business, where I've been able to hire, train, and mentor contract workers who then go on to get full-time programming jobs. We've helped overhaul the Python Package Index, mentored and\nrecruited contributors to Zulip, helped journalists open-source their code, and more. Right now I'm leading pip's work replacing its dependency resolver, which is a game-changer for future work making Python packaging easier to deal with. People who care about Python invested in running that workshop, and it's paid off very well in my case. Investing in Python events, and the organization that supports them, is a good bet. Sumana Harihareswara, Changeset Consulting PyCon US In 2015, as I was figuring out what I wanted to do next with my career, I attended PyCon North America in Montreal. I volunteered with the GNU Mailman team to expedite the release of Mailman 3.0. At the end of the sprint, I thought, \"maybe I could charge for this.\" Later that year, I started Changeset Consulting, where I expedite long-awaited releases for open source software projects. Through Changeset, I helped the PSF finish and deploy the new PyPI, and I'm working on pip's dependency resolver overhaul and a fresh release of GNU\nAutoconf. If it weren't for the PSF, my life would be very different, and probably a lot less interesting. Sumana Harihareswara, Changeset Consulting An important community event that the PSF produces is PyCon US, where community members get a chance to receive training, share ideas, or even be mentored. At PyCon US 2019, Sumana Harihareswara helped Brian Rutledge make his 1st contribution to Python Packaging. Months later he became a co-maintainer of Twine, the upload utility for PyPI. As of May 2020, he successfully worked with a newer contributor to finish adding PEP 484 type annotations to Twine's codebase. This will make it easier for us to keep this code bug-free in the future, which means open source maintainers can have a smooth experience sharing their code with us on PyPI! Sumana Harihareswara, Changeset Consulting Grants Program My name is Iqbal and I have been using Python for 18 years. On a professional level Python as a programming tool has given me a career, and on a personal level as an ideology has helped me make friends and given me satisfaction by giving me the opportunity to be part of something bigger than myself. As member or lead of the different conference committee and also as conference chair, I have worked hard to make sure anyone can participate and contribute, regardless of personal situation, among others: Grants program were started for those that are financially constrained, quotas were setup for first time speakers, opportunities to present talks were initiated for non-english speakers, partnership with other groups such as Women Who Code and PyLadies to bolster underrepresented women groups in the conferences. Last but not least, in the beginning I also helped introduce a Code Of Conduct based on PSF's CoC to introduce a safe and welcoming environment for everyone. At that time, it wasn't common yet to have CoCs for conferences. The PSF has done a wonderful job by taking the lead and acting as a standard bearer for us in the rest of the world to follow. Initiatives such as their grants program that helps monetarily and also gives exposure to less known events, knowledge and know-how on how to manage conferences and meetups, and most importantly an access to other people within the community to share and source out ideas have been invaluable to us. Going forward, with the new normal, supporting virtual events is definitely an important thing which the PSF can help with. A step-by-step guide on how to manage virtual events, how tos for tools and a platform to expose events to the worldwide community would be very helpful. In a world that is widening in terms of inequality where we tend to take away more and more, I am happy to be part of a community led by the PSF that continues to share and give: through code, through knowledge, through money and through friendship. Iqbal Abdullah, Regional Conference Organizer \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Packaging", "CPython Development", "Community trainings", "PyCon US", "Grants Program"]}
{"url": "https://www.python.org/psf/get-involved/", "title": "\ud83d\udc4b Hey Community Members! | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse Python >>> Get Involved \ud83d\udc4b Hey Community Members! More than 20 ways to get involved & stay informed! Watch any of these talks given about the PSF (most recent one is about PyPI presented by Ee, our Director of Infrastructure!) Want to financially support the PSF? Donate! Read our blog Sign up to receive our quarterly newsletter Follow us on Twitter or Mastodon Become a Basic member If you are already a Basic member, consider becoming a Contributing , Managing , and/or Supporting member. If you want to be a PSF Board Member, add your nomination to this page next time we have an election (May/June 2022) Join the psf-community@ mailing list (basic members or above) Join the psf-vote@ mailing list and be an active voter (must be a Contributing, Managing, Supporting, and/or Fellow member) Nominate someone to be a Fellow member If you are a Fellow member already, join the Fellow Work Group to help vote in new Fellow members Nominate someone to receive a Community Service Award Interested in packaging? Check out the discussion on Discourse Help PyPI test out new beta features Follow PyCon on Twitter! Interested in Python in Education? Join the Education Sig mailing list Interested in jobs.python.org? Help us review job postings or help us improve the functionality Know of a Python community workshop or training that could use additional funding? Direct them to our grants page ! See someone using the Python or PyCon trademark incorrectly? Notify the Trademarks Committee Know of a company that should sponsor the PSF? Tell us or link them to our sponsor page . When the PSF has a donation campaign happening, help us by sharing it with your community and by sharing it on social media (we have one happening right now: https://www.python.org/psf/donations/2021-q4-drive/ ) Participate in the 2021 Python Developers Survey: https://surveys.jetbrains.com/s3/python-developers-survey-2021 The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["\ud83d\udc4b Hey Community Members!", "The PSF"]}
{"url": "https://www.python.org/community/logos/", "title": "The Python Logo | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> Logo The Python Logo The Python Logo Projects and companies that use Python are encouraged to incorporate the Python\nlogo on their websites, brochures, packaging, and elsewhere to indicate suitability\nfor use with Python or implementation in Python.  Use of the \"two snakes\" logo element alone (the logo device), without the accompanying wordmark is permitted on the same terms as the combined logo. Combined logo: Logo device only: Currently, the following larger sized and vector variants of the logo are available: PNG format -- the original master which\nshould open as a vector image in Adobe Fireworks PNG format (flattened) Photoshop format SVG format (generic SVG export from Inkscape) SVG format (Inkscape-specific SVG) SVG format of only \"two snakes\" PNG format (269 \u00d7 326) of only \"two snakes\" The font used in the logo is called \"Flux Regular\".  The PSF owns a copy\nbut we cannot distribute it, except for work on the PSF's behalf. The Python Powered Logo The official Python Powered logo is available in two forms, wide and tall: This logo available in sizes 200x80 , 140x56 , 100x40 ,\nand 70x28 .   Also as SVG format source file. This logo available in sizes 140x182 , 100x130 , 70x91 ,\nand 50x65 .   Also as SVG format source file. Guidelines for Use The Python logo is a trademark of the Python Software Foundation, which is\nresponsible for defending against any damaging or confusing uses of the\ntrademark. See the PSF Trademark Usage Policy . In general, we want the logo to be used as widely as possible to indicate\nuse of Python or suitability for Python.  However, please ask first when using a derived version of the\nlogo or when in doubt. T-shirts and other Merchandise Making your own shirts and other items featuring the Python logo is OK, but please seek permission from the PSF if you are planning to sell merchandise that shows the Python logo. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "Inline image sizing", "meta_keywords": "Python logo", "headers": ["The Python Logo", "The Python Logo", "The Python Powered Logo", "Guidelines for Use", "T-shirts and other Merchandise", "The PSF"]}
{"url": "https://www.python.org/community/sigs/", "title": "Python Special Interest Groups | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Special Interest Groups Python Special Interest Groups About There are a number of Special\nInterest Groups (SIGs) for focused collaborative efforts to develop,\nimprove, or maintain specific Python resources.  Each SIG has a\ncharter, a coordinator, a mailing list, and a directory on the Python\nwebsite.  SIG membership is  informal, defined by subscription to the SIG's\nmailing list.  Anyone can join a SIG, and participate in the\ndevelopment discussions via the SIG's mailing list. Below is the list of currently active Python SIGs, with links to\ntheir resources.  The link in the first column directs you to the\nSIG's home page: a page with more information about the SIG.  The\nlinks in the \"Info\" column direct you to the SIG's archives, and to\nthe SIG's Mailman page, which you can use to subscribe or unsubscribe\nyourself and to change your subscription options. The SIG mailing lists are managed by GNU Mailman , a web-based interface for\nmailing lists written in Python. Retired There is also a list of retired SIGs ;\nthese SIGs existed in the past but are no longer active.\nTheir archives and home pages are retained.  A retired SIG can be\nrevived, using the same criteria as for\ncreating a new SIG. Regional Groups There are also local Python User\nGroups , organized by region rather than by special interest. Archives All SIG mailing lists are archived. python.org hosts the Mailman archives .  Click on the link in the\n\"Archive\" column below for the archive of your favorite SIG. Name Coordinator Description Info capi-sig Campbell Barton Support for Using the Python/C API archive , subscribe cplusplus-sig Ralf W. Grosse-Kunstleve Development of Python/C++ bindings archive , subscribe datetime-sig Alexander Belopolsky Discussions related to date and time archive , subscribe db-sig Andy Todd Databases archive , subscribe distutils-sig A.M. Kuchling Packaging and build tools. archive , subscribe doc-sig Fred Drake Documentation archive , subscribe edu-sig Timothy Wilson Python in Education archive , subscribe email-sig Barry Warsaw email package SIG archive , subscribe i18n-sig Andy Robinson Internationalization archive , subscribe image-sig Fredrik Lundh Image Processing archive , subscribe import-sig Barry Warsaw Import SIG archive , subscribe meta-sig Barry Warsaw SIG about the SIGs archive , subscribe mobile-sig Jeff Hardy Python for mobile devices archive , subscribe pythonmac-sig Jack Jansen On Apple Macintosh archive , subscribe sssc-sig Dustin Ingram Secure Software Supply Chains for Python discussion list archive , subscribe stdlib-sig Barry Warsaw Development, improvement, and maintenance of the Python standard library. archive , subscribe web-sig Bill Janssen Web-related Enhancements archive , subscribe xml-sig Rich Salz XML Processing archive , subscribe The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Special Interest Groups", "About", "Retired", "Regional Groups", "Archives", "The PSF"]}
{"url": "https://www.python.org/community/workshops/", "title": "Conferences and Workshops | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Python Conferences Conferences and Workshops Conference Listings There are quite a number of Python conferences happening all year around and in many parts of the world. Many of them are taking place yearly or even more frequent: Python Conferences List on the Python Wiki -- this is the main and most complete list of conferences around the world Subsets of this list are also available on other sites: pycon.org -- lists a subset of mostly national Python conferences PyData -- listings of Python conferences specializing in AI & Data Science Several of these conferences record the talk sessions on video. pyvideo.org provides an index to a large set these videos. Announcing Events If you would like to announce a Python related event, please see Submitting an event to the Python events calendars . You can also ask on pydotorg-www at python dot org for help. Adding Conferences If you have an event to add, please see the instructions on how to edit Python Wiki for details. If you are organizing a Python conference or thinking of organizing one, please subscribe to the Python conferences mailing list . The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Conferences and Workshops", "Conference Listings", "Announcing Events", "Adding Conferences", "The PSF"]}
{"url": "https://www.python.org/psf/donations/", "title": "Support the PSF with a Donation or by becoming a Supporting Member! | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> Donate >>> Donate to the PSF Support the PSF with a Donation or by becoming a Supporting Member! Donate What does the Python Software Foundation do? The Python Software Foundation : Awards grants and provides resources for furthering the development and adoption of Python. Organizes and hosts the annual PyCon US conference. 2019 brought together 3,393 attendees from 55 countries, a new record for PyCon US! Our sponsors\u2019 support enabled us to award $137,200 USD to 143 attendees. Pays for hardware and other costs for hosting the python.org servers. Hosts the Python Packaging Index . Supports CPython directly through the CPython Developer in Residence Holds and defends the copyright and other intellectual property rights for the Python programming language. Provides infrastructure and operations support to 13 regional conferences, meetups, and Python projects as a fiscal sponsor. Recognizes individuals who have contributed to the Python community with Community Awards . To learn about recent PSF activities, visit the Python Software Foundation's blog or check out our latest Annual Impact Report . The PSF is a public charity under section 501(c)(3) of the United States Internal Revenue Code.  For more information, see the PSF IRS Determination Letter for details.  Please consult your tax adviser to determine the tax deductibility of your gift to the PSF. How can I donate? We welcome contributions of any amount. You can support the PSF with a one-time donation, monthly donation, or annual donation to support all of our great initiatives. See below for more information and contact psf-donations@python.org with any questions. Donate by credit card or PayPal Please use the button above or this link to donate using a credit card or your PayPal account. You don't need a PayPal account to use the donation button. Check or Money Order You may donate to the PSF using a check or money order.  Please address checks in USD to the PSF headquarters . Please include your email address and your home address with your check so that we may provide you a donation acknowledgment letter. Zelle, ACH, Transferwise, and Wire Transfers The PSF may receive donations by Zelle or ACH from US Domestic accounts, Transferwise from either US Domestic or International accounts, or Wire Transfers from International accounts.   If you are interested in donating to the PSF using one of these methods, please contact psf-donations@python.org .. Other Ways to Give Your employer may offer a matching donation program.  Please see the PSF Matching Gifts page for more information or let psf-donations@python.org know if you have questions. If you have questions about donations, please contact psf-donations@python.org . The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Support the PSF with a Donation or by becoming a Supporting Member!", "What does the Python Software Foundation do?", "How can I donate?", "The PSF"]}
{"url": "https://www.python.org/success-stories/lincoln-loop-building-a-sustainable-business-inspired-by-pythons-ethos/", "title": "Lincoln Loop: Building a sustainable business inspired by Python\u2019s ethos | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Lincoln Loop: Building a sustainable business inspired by Python\u2019s ethos Written by Peter Baumgartner , Lincoln Loop When our agency began in 2007, using Python on the web was still a rarity, but some new projects in the space were starting to pop up. TurboGears had gained popularity with its MVC approach, but it was another Python web framework, Django, that piqued my interest. I had worked previously with WordPress and Ruby on Rails, but neither felt like a long-term match. Trying to customize WordPress to build custom applications was like putting a square peg in a round hole, and Rails, the hot framework at the time, felt too magical and lacked sufficient documentation for me to really wrap my head around it. Django (and Python) clicked with me immediately. They were well documented, and because of Django's newsroom roots, I could build content platforms as well as rich web applications. Thanks largely to those technologies, Lincoln Loop has grown from a one-person local operation to a full-service global web agency with over 15 years of success. Why Python Is the Best Choice for Lincoln Loop We came to Python through Django but stuck with the programming language largely because of its philosophy. The language principles espoused by the Zen of Python not only describe how we should write code, but some became tenets of how we run our business. Ideas like \u201cPracticality beats purity\u201d and \u201cExplicit is better than implicit\u201d work far beyond the terminal. Following Python's ideals of practicality and explicitness not only makes our code better but also the end products we deliver to our clients. Another reason Python has worked out so well for our client projects is the rich ecosystem of open-source libraries available on PyPI. They let us focus on our client's unique business logic, and for everything else, we can leverage open-source libraries. The breadth of tooling available is staggering. We pull API clients, content management systems, image manipulation libraries, and even machine learning or data science toolkits from PyPI. We're excited to start seeing packages built in Rust show up on PyPI. Its recent adoption for performance-critical code paths means we get high-performance memory-safe code that can be accessed with a friendly Python API. It feels like we're getting to have our cake and eat it too! It's no wonder Python ranks as one of the most popular languages in developer surveys year after year. It\u2019s a proven technology, and the \u201cbatteries included\u201d approach gives us the building blocks we need to solve our clients' problems quickly and efficiently. Django Has Powered Development for Lincoln Loop Since 2007 Our agency was among the early adopters of Django. But since those early days, we\u2019ve seen massive growth in the ecosystem. Once considered bleeding-edge technology, Django is now a stable, mature framework. Plus, it\u2019s flexible enough to accommodate the needs of the wide variety of organizations we work with as partners. Python and Django have allowed us to create content management systems for large-scale publishers with tens of millions of daily page views as well as immersive educational experiences for prestigious universities. We\u2019ve seen our client base transition from bootstrapped startups to enterprise organizations with billions of dollars in revenue. Python has been our foundation every step of the way. Unlike most of the tech world that jumps from framework to framework, embracing whatever is the hot new technology, Lincoln Loop has stayed focused on Python and Django. Consequently, we have an incredibly deep understanding of how to use them to solve our clients\u2019 problems. The longevity of our tooling also means the solutions we build are sustainable. We have clients who have run the same technology stack (with upgrades along the way) for more than ten years. Python\u2019s Core Advantage Comes Down to Community Open source software relies on its community for its success. Without a healthy community, the open-source ecosystem will eventually fizzle and fade. For us, the Python community may be its greatest advantage compared to other programming languages. If you go to a Python conference, you\u2019ll find specialists with very diverse backgrounds. In addition to the web, you'll meet folks in research, data science, machine learning, and system operations. Most of the open source Python code from those different groups ends up in PyPI. Whatever your organization needs to do, it is likely that someone in the Python community has already written the code that will deliver the functionality you need.\nSince the language is so widely used, you have a lot of online resources available when you want to find help. Whether it is a blog post describing how to solve a specific problem, a deep-dive conference talk on a specific topic, or somebody offering their support via a chat room or forum, the information available is almost endless. At Lincoln Loop, we\u2019ve regularly contributed to and benefited from the reach of that community. In some open-source communities, you run into people with rock star egos who wouldn\u2019t give you the time of day, but that sort of thing is rare around Python. In my experience, even those who have made massive contributions to the community are happy to sit and share their knowledge. Our community is known for its inclusivity, openness, and strong culture of collaboration. All those traits perfectly align with how we like to work and who we are as an agency. By working with Python, we have been able to find and hire great people from within the community who are kind, smart, and lifelong learners. We wouldn\u2019t be who we are without Python. About Lincoln Loop A remote-first, global agency, Lincoln Loop builds scalable content platforms for publishers, non-profits & educators. Our team of veteran developers loves solving big problems for organizations we admire. We strive to achieve our clients' goals with honest, dependable, and pragmatic solutions. We extend the ethos of open-source software to our operation with core values driven by transparency, autonomy, and integrity. Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Lincoln Loop: Building a sustainable business inspired by Python\u2019s ethos", "Why Python Is the Best Choice for Lincoln Loop", "Django Has Powered Development for Lincoln Loop Since 2007", "Python\u2019s Core Advantage Comes Down to Community", "About Lincoln Loop"]}
{"url": "https://www.python.org/events/python-user-group/1929/", "title": "Python Weekend Abuja | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python Weekend Abuja Abuja, Federal Capital Territory, Nigeria 22 Feb. from 7am UTC to 3pm UTC , 2025 Python Weekend Abuja \u2190 Previous Django Girls Koforidua in Koforidua, Ghana Next \u2192 Workshop: Creating Python Communities in Serekunda, Gambia Explore events -- Change your date range The next 7 days The next 30 days The next 90 days The next year More events at Abuja, Federal Capital Territory, Nigeria Python Weekend Abuja \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Weekend Abuja", ",", "Explore events", "More events at"]}
{"url": "https://www.python.org/events/python-events/1895/", "title": "PyConf Hyderabad 2025 | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event PyConf Hyderabad 2025 Hyderabad, Telangana, India From 22 Feb. through 23 Feb. , 2025 PyConf Hyderabad 2025 \u2190 Previous DjangoCongress JP 2025 in Online Next \u2192 PyCon Sweden in Clarion Hotel Skanstull, Stockholm, Sweden Explore events -- Change your date range The next 7 days The next 30 days The next 90 days The next year More events at Hyderabad, Telangana, India PyConf Hyderabad 2025 PyCon India 2023 \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["PyConf Hyderabad 2025", ",", "Explore events", "More events at"]}
{"url": "https://www.python.org/events/python-events/1874/", "title": "DjangoCongress JP 2025 | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event DjangoCongress JP 2025 Online 22 Feb. , 2025 DjangoCongress JP 2025 \u2190 Previous PyCascades 2025 in Portland, USA Next \u2192 PyCon Sweden in Clarion Hotel Skanstull, Stockholm, Sweden Explore events -- Change your date range The next 7 days The next 30 days The next 90 days The next year More events at Online DjangoCongress JP 2025 PyData Global 2024 PyHEP 2024 FlaskCon 2023 PyData Global 2023 XtremePython 2023 PyLadiesCon 2023 PyHEP 2023 Python Web Conf 2023 XtremePython 2022 PyData Global 2022 Pyjamas Conf 2022 enterPy 2022 PyHEP 2022 PyCon Colombia 2022 Python Web Conference 2022 FOSDEM 2022: Python Dev Room PyCascades Remote 2020 Pyjamas Conf 2021 PyCode Conference FlaskCon 2021 Online FlaskCon 2021 Online Women Who Code CONNECT Forward 2021 PyCon Japan 2021 PyData Global 2021 Plone Conference 2021 Online PyCon ZA 2021 PyConTW 2021 PyOhio 2021 EuroPython 2021 PyHEP 2021 Conf42 Python 2021 PyCon US 2021 PyCon Belarus 2021 PyCascades 2021 BelPy 2021 Python Pizza New Year's Party PyCode Conference 2020 Pyjamas Conf 2020 Online Python Web Global Summit'20 PyHPC 2020: 9th Workshop on Python for,High-Performance and Scientific Computing PyCon Indonesia 2020 PyCon Sweden 2020 Python Brasil 2020 SciPy Japan 2020 PyCon Estonia 20 PyCon ES 2020 PyGotham TV PyCon India 2020 PyCon Turkey GeoPython 2020 & PyML 2020 PyCon APAC 2020 DjangoCon Europe 2020 PyCon JP 2020 SciPy 2020 FlaskCon (online) Better Python Unit Tests Python fwdays'20 Python fwdays'20 \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["DjangoCongress JP 2025", ",", "Explore events", "More events at"]}
{"url": "https://www.python.org/events/python-user-group/1868/", "title": "Django Girls Koforidua | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Django Girls Koforidua Koforidua, Ghana From 21 Feb. through 22 Feb. , 2025 Django Girls Koforidua \u2190 Previous Workshop: Creating Python Communities in Banjul, Gambia Next \u2192 Workshop: Creating Python Communities in Serekunda, Gambia Explore events -- Change your date range The next 7 days The next 30 days The next 90 days The next year More events at Koforidua, Ghana Django Girls Koforidua Django Girls Koforidua \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Django Girls Koforidua", ",", "Explore events", "More events at"]}
{"url": "https://www.python.org/events/python-user-group/1965/", "title": "Workshop: Creating Python Communities | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Workshop: Creating Python Communities Banjul, Gambia 20 Feb. , 2025 Workshop: Creating Python Communities \u2190 Previous Python User Group Dhaka Monthly Meetup in Dhaka, Bangladesh Next \u2192 Workshop: Creating Python Communities in Serekunda, Gambia Explore events -- Change your date range The next 7 days The next 30 days The next 90 days The next year More events at Banjul, Gambia Workshop: Creating Python Communities \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Workshop: Creating Python Communities", ",", "Explore events", "More events at"]}
{"url": "https://www.python.org/events/calendars/", "title": "Python Calendars | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Featured Python Calendars Choose a calendar to view events. Python Events Calendar Python User Group Calendar \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Featured Python Calendars"]}
{"url": "https://www.python.org/downloads/release/python-3132/", "title": "Python Release Python 3.13.2 | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python 3.13.2 Release Date: Feb. 4, 2025 This is the second maintenance release of Python 3.13 Python 3.13 is the newest major release of the Python programming language, and it contains many new features and optimizations compared to Python 3.12. 3.13.2 is the latest maintenance release, containing almost 250 bugfixes, build improvements and documentation changes since 3.13.1. Major new features of the 3.13 series, compared to 3.12 Some of the new major new features and changes in Python 3.13 are: New features A new and improved interactive interpreter , based on PyPy 's, featuring multi-line editing and color support, as well as colorized exception tracebacks . An experimental free-threaded build mode , which disables the Global Interpreter Lock, allowing threads to run more concurrently. The build mode is available as an experimental feature in the Windows and macOS installers as well. A preliminary, experimental JIT , providing the ground work for significant performance improvements. The locals() builtin function (and its C equivalent) now has well-defined semantics when mutating the returned mapping , which allows debuggers to operate more consistently. A modified version of mimalloc is now included, optional but enabled by default if supported by the platform, and required for the free-threaded build mode. Docstrings now have their leading indentation stripped , reducing memory use and the size of .pyc files. (Most tools handling docstrings already strip leading indentation.) The dbm module has a new dbm.sqlite3 backend that is used by default when creating new files. The minimum supported macOS version was changed from 10.9 to 10.13 (High Sierra) . Older macOS versions will not be supported going forward. WASI is now a Tier 2 supported platform . Emscripten is no longer an officially supported platform (but Pyodide continues to support Emscripten). iOS is now a Tier 3 supported platform . Android is now a Tier 3 supported platform . Typing Support for type defaults in type parameters . A new type narrowing annotation , typing.TypeIs . A new annotation for read-only items in TypeDicts . A new annotation for marking deprecations in the type system . Removals and new deprecations PEP 594 (Removing dead batteries from the standard library) scheduled removals of many deprecated modules: aifc , audioop , chunk , cgi , cgitb , crypt , imghdr , mailcap , msilib , nis , nntplib , ossaudiodev , pipes , sndhdr , spwd , sunau , telnetlib , uu , xdrlib , lib2to3 . Many other removals of deprecated classes, functions and methods in various standard library modules. C API removals and deprecations .  (Some removals present in alpha 1 were reverted in alpha 2, as the removals were deemed too disruptive at this time.) New deprecations , most of which are scheduled for removal from Python 3.15 or 3.16. For more details on the changes to Python 3.13, see What's new in Python 3.13 . More resources Online Documentation PEP 719 , 3.13 Release Schedule Report bugs at https://github.com/python/cpython/issues . Help fund Python directly (or via GitHub Sponsors ), and support the Python community . Full Changelog Files Version Operating System Description MD5 Sum File Size GPG Sigstore SBOM Gzipped source tarball Source release 6192ce4725d9c9fc0e8a1cd38410b417 28.0\u00a0MB SIG .sigstore SPDX XZ compressed source tarball Source release 4c2d9202ab4db02c9d0999b14655dfe5 21.6\u00a0MB SIG .sigstore SPDX macOS 64-bit universal2 installer macOS for macOS 10.13 and later 9916903cff14723bdbc41e3ed5530eeb 67.8\u00a0MB SIG .sigstore Windows installer (64-bit) Windows Recommended 40d2c830eedee3dd78f4b707f04fd1d2 27.3\u00a0MB SIG .sigstore SPDX Windows installer (32-bit) Windows 91941eaa5086d500384cb55ad247be87 26.0\u00a0MB SIG .sigstore SPDX Windows installer (ARM64) Windows Experimental 252c8265c8768e14f7eeee3e1fcc39fc 26.6\u00a0MB SIG .sigstore SPDX Windows embeddable package (64-bit) Windows 4c9d083e2d79c07e8d9e5e2d02127980 10.4\u00a0MB SIG .sigstore SPDX Windows embeddable package (32-bit) Windows 60bbb372a73146c08702f5513ec2714d 9.2\u00a0MB SIG .sigstore SPDX Windows embeddable package (ARM64) Windows 6814e678a029bb545e6fb2472ddc1153 9.7\u00a0MB SIG .sigstore SPDX \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python 3.13.2", "This is the second maintenance release of Python 3.13", "Major new features of the 3.13 series, compared to 3.12", "New features", "Typing", "Removals and new deprecations", "More resources", "Files"]}
{"url": "https://www.python.org/psf-landing/", "title": "Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse The Python Software Foundation is an organization devoted to advancing open source technology related to the Python programming language. We support the Python Community through... Grants In 2023, the PSF awarded $697,000 USD to 174 groups or individuals in 52 countries around the world. Infrastructure We support and maintain python.org , The Python Package Index , Python Documentation ,\r\n          and many other services the Python Community relies on. PyCon US We produce and underwrite the PyCon US Conference ,\r\n          the largest annual gathering for the Python community.\r\n          Our sponsors\u2019 support\r\n          enabled us to award more than $280,000 USD in financial aid to 374 attendees for PyCon 2023. Mastodon Become a Member Help the PSF promote, protect, and advance the Python programming language and community! Membership FAQ Donate Assist the foundation's goals with a donation. The PSF is a recognized 501(c)(3) non-profit organization. How to Contribute Volunteer Learn how you can help the PSF and the greater Python community! How to Volunteer Sponsors Without our sponsors we wouldn't be able to help the Python community grow and prosper. Sponsorship Possibilities PSF Grants Program The Python Software Foundation welcomes grant proposals for projects related to the development of Python, Python-related technology, and educational resources. Proposal Guidelines, FAQ and Examples PSF News PSF Newsletter: Awards, Grants, & PyCon US 2025! Powering Python together in 2025, thanks to our community! PSF Grants: Program & Charter Updates (Part 1) PSF Grants: Program & Charter Updates (TLDR) PSF Grants: Program & Charter Updates (Part 2) PSF Grants: Program & Charter Updates (Part 3) Announcing Python Software Foundation Fellow Members for Q3 2024! \ud83c\udf89 Do you know the PSF's next sponsor? PSF End-of-Year Fundraiser & PyCon US 2025 Updates! PSF Board Retreat 2024 \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["The Python Software Foundation is an organization devoted to advancing open source technology related to the Python programming language.", "We support the Python Community through...", "Grants", "Infrastructure", "PyCon US", "Become a Member", "Donate", "Volunteer", "Sponsors", "PSF Grants Program", "PSF News"]}
{"url": "https://www.python.org/about/legal/", "title": "Legal Statements | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse Legal Statements Trademarks Python and PyCon are trademarks or registered trademarks of the Python Software Foundation . All other trademarks mentioned on this website are the property of their\nrespective owners. Copyright Except where otherwise specified, the contents of this website are\ncopyright \u00a9 1990-2014, Python Software Foundation ,\n9450 SW Gemini Dr., ECM# 90772, Beaverton, OR 97008, USA.  All rights reserved. Licenses Python, its standard libraries, and Jython, are distributed under the Python License . The intellectual property rights behind\nPython and Jython are held and managed by the Python Software Foundation . The licenses, trademarks, and copyrights for other implementations of Python\n(such as IronPython, Stackless Python, and PyPy) may vary and are managed by\ntheir respective owners. Third-Party Content The Python Software Foundation (\u201cPSF\u201d) does not claim ownership of any\nthird-party code or content (\u201cthird party content\u201d) placed on the web\nsite and has no obligation of any kind with respect to such third\nparty content. Any third party content provided in connection with\nthis web site is provided on a non-confidential basis. The PSF is free\nto use or disseminate such content on an unrestricted basis for any\npurpose, and third party content providers grant the PSF and all other\nusers of the web site an irrevocable, worldwide, royalty-free,\nnonexclusive license to reproduce, distribute, transmit, display,\nperform, and publish such content, including in digital form. Third party content providers represent and warrant that they have\nobtained the proper governmental authorizations for the export and\nreexport of any software or other content contributed to this web site\nby the third-party content provider, and further affirm that any\nUnited States-sourced cryptographic software is not intended for use\nby a foreign government end-user. Individuals and organizations are advised that the PyPI website is hosted in\nthe US, with mirrors in several countries outside the US (see http://www.pypi-mirrors.org/ ).  Any uploads of packages must comply\nwith United States export controls under the Export Administration\nRegulations. Legal Mailing List If you have any questions, please send them to the legal mailing list at: legal@python.org . The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Legal Statements", "The PSF"]}
{"url": "https://www.python.org/dev/security/", "title": "Python Security | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Report a Security Issue Python Security Reporting security issues with PyPI or a project hosted on PyPI See the security issue information for pypi.org here . Reporting security issues The Python Software Foundation and the Python developer community take\nsecurity vulnerabilities very seriously.  A Python Security Response Team (PSRT) has\nbeen formed that does triage on all reported vulnerabilities and works to resolve them.  To reach the response team, send email to security at python dot org . Only the response team members will see your\nemail, and it will be treated confidentially. The PSRT mailing list is tightly controlled, so you can have confidence that\nyour security issue will only be read by a highly trusted cabal of Python\ndevelopers.  If for some reason you wish to further encrypt your message to this mailing list\n(for example, if your mail system does not use TLS),\nyou can use our shared OpenPGP key which is also available on the public\nkeyservers. The PSRT accepts security reports for the following projects: CPython versions (supported and end-of-life) available at https://python.org/downloads pip versions available at https://pypi.org/project/pip The PSRT does not accept reports for third-party redistributions of Python or pip.\nThose reports should be directed towards their corresponding distribution security contact. Vulnerability handling The following is an overview of the vulnerability handling process from reporting to disclosure: The reporter reports the vulnerability privately to the PSRT. If the PSRT determines the report isn't a vulnerability, the issue can be opened in a public issue tracker if applicable. If the report constitutes a vulnerability, the PSRT will work privately with the reporter to resolve the vulnerability. The project creates a new release to deliver the fix. The project publicly announces the vulnerability and describes how to apply the fix\nvia an advisory. At this point the vulnerability can be discussed publicly by the reporter and team. Bug bounties While we sincerely appreciate and encourage reports of suspected security problems in supported Python releases and the PSF web infrastructure, please note that the Python Software Foundation does not run any bug bounty programs. We are a nonprofit organization, depending on donation and support from the community. Published advisories and mailing list Security advisories are published to multiple public locations. Advisories are sent via email to the security-announce@python.org mailing list . Subscribe to the mailing list if you'd like to be updated\non newly published security advisories. The mailing list has a public archive including all historical advisories sent to the list. There is also an advisory database published to GitHub using the Open Source Vulnerability (OSV) format which can be consumed\nusing automated tooling. CVE Numbering Authority (CNA) contact If you need to contact the Python Software Foundation CNA directly, such as for updating or disputing a CVE record,\nyou can send an email to cna at python dot org . Be sure that the CVE record in question was\nissued by the PSF CNA and not a different CNA. OpenGPG Key Key fingerprint: pub   2048R/D067453C 2010-09-08\n      Key fingerprint = F314 452F E3F9 BF87 0435  7732 D273 E0FF D067 453C\nuid                  Python Security Response Team <security@python.org>\nsub   2048R/0953421B 2010-09-08 Key data: -----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v1.4.10 (GNU/Linux)\n\nmQENBEyH8KIBCADLe9mczGnhhLFBbxWDgxHzzr/eExGuVQb+VYsa0WDZG4z/y+Kx\nKsZ8da/adKaiig2soQJiZtYb6w1JDtugwy8+ySDY8ECAB7qdGK6gB17P1UFsI93d\nIAe25DdEybbi0sMPbw0Q5Ka+ihI1ZnPifyG0oLK901QfTutOYAk42J7V/p6fHzK+\npCeOri+aSGlWxVtC03iPNIiL5InfKPCEvZ5ih8/98hCqccp6teDaGxhnab+5GYZq\nwDknmK230r5UWd/VlGSiC4DJCuE+GY1r1DXx+E/ANjeMZOXQ4kBMxp8aFz7k1vFX\nMbqv+TWD+BZzgu6Fa4KCgWW7Jn1syKpwA7ahABEBAAG0M1B5dGhvbiBTZWN1cml0\neSBSZXNwb25zZSBUZWFtIDxzZWN1cml0eUBweXRob24ub3JnPokBOAQTAQIAIgUC\nTIfwogIbAwYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQ0nPg/9BnRTwRowf+\nIN0rG5Gj/quhfhS0CyqoYYu3H9I8WDSw9I7GjVQY0KZAbYEmNbZ/Kmwa59opXoIG\nKfo2KEDVwADf17vpdIER9bcpFF0fPFnAGI1XWQKkZX8uckB4TkEQvxZpLjD14XX8\neFMXwLBc3IGMYRJUIgEC5C2/TkaCc5qgTw0P8tCd7JNgey+Ogf1KE0ks34MKsXD4\nxV4WS2Kfu2HjoAURhqQHr3Ug5kFKIHAeKY7EAVUvGp6r4uMCsAWKKUWUZfYSpH7+\nUAWOtxEbDpDt5IrmOI2V60X3qGaNMxF+wQc/MpM+L1BN4bdf6dlB3u6gHkixdoMl\nYh6/T7NZMZ3HKV3RC5hf6IkCHAQQAQgABgUCTIf47gAKCRASbrVjp0sGv5+9D/wI\naR0a/S5lin5FfNUCLL528+aJlV0XHMrugPrwB8jOdM3367ORgHxx3qHcgLJuoBRn\nzQ1v1SaqvN4TvQ1tDtS5+lsCSBjCpzMQxcZY6VMm59ulZ80PHsOqYVj5ev8KHq/h\npDAHSCvnE52MUKNm33+SJ2q6KLGs0hb3HL2RBEX9f9+3XCLdOlbETPiQIipN2jx3\nQFhcIZTAlVOY7R3ENrFNx8pmK5Dpsu7vchPEDl4ssfnQom9mTU5en9Ix7UDSTNLC\nXmMxvaoafRYgBH9rzXJgHvHO/37uE/2PstTF0h40Vl0UoNSqr2aKN1fR0DJgr4A4\naiOyaHCXvPanVuNcW4FJYiO9QlYQfZvjvGtazqRSc+WzuKDYfKYpRgcYsSAUz1DI\n0voJ/oaaQ8XcTeW5l8P6AlFfYCJ/yqKOL4lQ5qM64So4MuQyplos/LvqKTt9MYPt\n2MjEwa7n5++YWKIYMywb2A7KXymav6yf+kMLRpymQweH5f8ZHoR1mSs4Ac5HpZ1M\nCOtGrHRY6iWw/5SLkm+INm6jqo1bU0Vzm/2ju4omie68jVkv9byoGcrty9xookfA\n+fHCVx8LV4hBFWcCKmH7NFWY8Iq3UgrbpHYal4vuOJlmEMZayHRJ4dtEZTD/kGul\ngQL/xmVVGLtNGCvodmcx5VU8QAUBr0p0dWX79yVlCLkBDQRMh/CiAQgAsWKEEJTn\nD+pf0zZc1bt0fHNLEk36G+aHMK77LzhPpeAOCm3296vjjoKy99OAKuyKMVFY59nK\nzZ3lXvP89yuxgJwWJM7uf0iZ0njo1DPxyZ1jldPiZEiXhShwDNAQR3EkP8IvilsV\n3BKcWO/E6wCiMLQFpWDlPdTw7v3LwGnDNk6AmU6Jiy0tbraNyq7USIu+80yUcJ/K\nHYXPgx0ZEZIWhQKonekN+AhpJaSOUPVeYdxMwj3ZSHOTfzORXVnjbscPnfStz5F6\nfVnikDnSZYgOauaJCEwqVEpdxM9O7wuRsZf4UGN13wMMbRnEDnmt2VBsNK2NNqvQ\nUcimMcbO9y2V5wARAQABiQEfBBgBAgAJBQJMh/CiAhsMAAoJENJz4P/QZ0U8KaMI\nAIukbpQFcoVVzA/DbQhkCYkCdYYWXacC71xoq45mnM/gSDMGBaitZIX/ngvDLH7I\n7tf+fOcIo0w+mPBuGQZfGHyYZ2Qv1DHgdYJC4U8ccftnzv6GxYxiwB6elVFgOrS8\n8B5Y9GdUDzjO8ZF3zzdq0Hy4AN/cn+ybkDWDxwLncdM9FX39cHnEEmZE+u9qaacK\nr/uhVveqbNOH9N6iwrp0Oc0D6Ktq9uU+sGC+6XBRhZlUT0yExyxEG1abpIIC1Kby\ntQvO+Ejsx6fV55784qypqDyp7dtPHWCXD7mwI3zneYZbnV0nZvznBhNE4DqHuqvI\n8C7KT7DjqaL3FVHdMtyrcPk=\n=Z6PM\n-----END PGP PUBLIC KEY BLOCK----- The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Security", "Reporting security issues with PyPI or a project hosted on PyPI", "Reporting security issues", "Vulnerability handling", "Bug bounties", "Published advisories and mailing list", "CVE Numbering Authority (CNA) contact", "OpenGPG Key", "The PSF"]}
{"url": "https://www.python.org/dev/core-mentorship/", "title": "Python Core Mentorship | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python >>> Core Mentorship Python Core Mentorship Introduction The Python Core Mentorship Program is predicated on\nthe idea that Python core, and Python as a whole would be served by\nfurther lowering the barrier to entry of contribution to Python core\n( original proposal ) The mission of the Python Core Mentor Program is to provide an open\nand welcoming place to connect students, programmers \u2013 and anyone interested in contributing to the Python core\ndevelopment. This project is based on the idea that the best way to\nwelcome new people into any project is a venue which connects them to\na variety of mentors who can assist in guiding them through the\ncontribution process, including discussions on lists such as python-dev,\nand python-ideas, the bug tracker, Git questions, code reviews, etc. Additionally, mentors assist in something incredibly critical to\nmaintain contributor interest: getting patches through the process and actually committed . We all know \u2013 not everyone who is mentor will have all the\nanswers, so mentors also act as conduits to others who will have the\nanswer. The most important point to make is that everyone is welcome and no\none, no matter who they are, is turned away. Keep to the code of conduct, and\nhelp those around you. Resources The mailing list (signup there) The list archives (The current archive is only available to the list members.) The Python Developer's Guide should be your first stop - we will be adding to it based on feedback from the mentorship list The Python bug tracker you're going to want to bookmark it. The Python Discourse instance Code of Conduct The following code of conduct is not meant as a means for punishment, action\nor censorship for the mailing list or project. Instead, it is meant to set the\ntone and expectations and comfort level for mentors and those wishing to be\nmentored on the list. We ask everyone to be welcoming, friendly, and patient. Flame wars and insults are unacceptable in any fashion, by any party. Anything can be asked, and \"RTFM\" is not an acceptable answer. Neither is \"it's in the archives, go read them\". List archives are available only to subscribers, but subscription is open to everyone. Since the archives are \"closed\" - cross posting to public mailing lists is discouraged. Statements made by core developers can be quoted outside of the list. Statements made by others can not be quoted outside the list without explicit permission.\n- Anonymised paraphrased statements \"someone asked about...\" are OK - direct quotes with or without names are not appropriate. We endorse the PSF's Diversity statement The list administrators reserve the right to revoke the subscription of members (including mentors) that persistently fail to abide by this Code of Conduct.\n- All mentors are signed up as administrators. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Core Mentorship", "Introduction", "Resources", "Code of Conduct", "The PSF"]}
{"url": "https://www.python.org/dev/", "title": "Python Developer's Guide | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python Developer's Guide Python's Developer Guide can be found at https://devguide.python.org/ . The pieces of documentation hosted here are: PEPs (Python Enhancement Proposals) Buildbots Python.org Maintenance and Administration The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Developer's Guide", "The PSF"]}
{"url": "https://www.python.org/psf/board/", "title": "PSF Officers & Board Members | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF Officers & Board Members Officers & Directors by Year 2024-2025 2023-2024 2022-2023 2021-2022 2020-2021 Earlier Officers & Directors by Name Officers By Title Officers & Directors by Year See also Duties & Responsibilities of Directors 2024-2025 Officers President/Chair: Dawn Wages Vice Chair Elect: Chris Neugebauer Vice Chair: Tania Allard Executive Director: Deb Nicholson Secretary: Deb Nicholson Assistant Secretaries: Olivia Sauls Treasurer: Georgi Ker PyCon US Chair: Elaine Wong Board of Directors Tania Allard Kwon-Han Bae Kushal Das Cheuk Ting Ho Georgi Ker Jannis Leidel Christopher Neugebauer Deb Nicholson Denny Perez Dawn Wages Simon Willison Cristi\u00e1n Maureira-Fredes Active Board Committees and Voting Members 2024-2025 Executive Committee : Dawn Wages, Christopher Neugebauer, Georgi Ker, Tania Allard, Deb Nicholson Finance Committee : Kushal Das, Cheuk Ting Ho, Georgi Ker, Jannis Leidel, Deb Nicholson PyCon US Committee : Tania Allard, Denny Perez, Christopher Neugebauer, Cristi\u00e1n Maureira-Fredes, Deb Nicholson Membership Committee : Dawn Wages, Cheuk Ting Ho, Georgi Ker, KwonHan Bae, Christopher Neugebauer, Denny Perez 2023-2024 Officers President/Chair: Dawn Wages Vice Chair Elect: D\u00e9bora Azevedo Vice Chairs: Christopher Neugebauer Executive Director: Deb Nicholson Secretary: Deb Nicholson Assistant Secretary: Olivia Sauls Treasurer: Kushal Das PyCon US Chair: Mariatta Wijaya Board of Directors Tania Allard D\u00e9bora Azevedo Kwon-Han Bae Kushal Das Cheuk Ting Ho Georgi Ker Jannis Leidel Christopher Neugebauer Deb Nicholson Denny Perez Dawn Wages Simon Willison Active Board Committees and Voting Members 2023-2024 Executive Committee : D\u00e9bora Azevedo, Kushal Das, Christopher Neugebauer, Dawn Wages, Deb Nicholson Finance Committee : Kushal Das, Cheuk Ting Ho, Georgi Ker, Jannis Leidel, Simon Willison PyCon US Committee : Tania Allard, D\u00e9bora Azevedo,  Cheuk Ting Ho, Georgi Ker, Jannis Leidel, Christopher Neugebauer, Dawn Wages Membership Committee : Tania Allard, D\u00e9bora Azevedo, Cheuk Ting Ho, Georgi Ker, Jannis Leidel, Christopher Neugebauer, Denny Perez 2022-2023 Officers President: Guido van Rossum Chair: Thomas Wouters Vice Chair Elect: D\u00e9bora Azevedo Vice Chairs: Jeff Triplett, Nina Zakharenko Executive Director: Deb Nicholson Secretary: Deb Nicholson Assistant Secretary: Olivia Sauls Treasurer: Dawn Wages Communications: PyCon US Chair: Mariatta Wijaya Board of Directors D\u00e9bora Azevedo Tania Allard Kushal Das Dustin Ingram Deb Nicholson Jannis Leidel Joannah Nanjekye Jeff Triplett Dawn Wages Simon Willison Thomas Wouters Nina Zakharenko 2021-2022 Officers Chair: Lorena Mesa Vice Chair Elect: Thomas Wouters Vice Chairs: Marlene Mhangami, Joannah Nanjekye Executive Director: Deb Nicholson Secretary: Deb Nicholson Assistant Secretary: Olivia Sauls Treasurer: Jeff Triplett Communications: Jannis Leidel, Nina Zakharenko, D\u00e9bora Azevedo General Counsel: Van Lindberg Event Coordinator: Jackie Augustine PyCon Chair: Emily Morehouse-Valcarcel Board of Directors D\u00e9bora Azevedo Tania Allard Kushal Das Dustin Ingram Deb Nicholson Jannis Leidel Van Lindberg Lorena Mesa Marlene Mhangami Joannah Nanjekye Jeff Triplett Thomas Wouters Nina Zakharenko 2020-2021 Officers President: Guido van Rossum Chair: Lorena Mesa Vice Chair Elect: Thomas Wouters Vice Chairs: Marlene Mhangami, Christopher Neugebauer Executive Director: Ewa Jodlowska Secretary: Ewa Jodlowska Assistant Secretary: Betsy Waliszewski Treasurer: Jeff Triplett Communications: Jannis Leidel, Katie McLaughlin General Counsel: Van Lindberg Event Coordinator: Jackie Augustine, Betsy Waliszewski PyCon Chair: Emily Morehouse-Valcarcel Board of Directors Kushal Das Ewa Jodlowska Jannis Leidel Van Lindberg Lorena Mesa Katie McLaughlin Marlene Mhangami Christopher Neugebauer Anna Ossowski Jeff Triplett Thomas Wouters Nina Zakharenko Dustin Ingram Earlier 2019-2020 Officers President: Guido van Rossum Chair: Naomi Ceder Vice Chairs: Lorena Mesa, Anna Ossowski, Christopher Neugebauer Executive Director: Ewa Jodlowska Secretary: Ewa Jodlowska Assistant Secretary; Betsy Waliszewski Treasurer: Jacqueline Kazil Communications: Marlene Mhangami, Kushal Das, Jannis Leidel General Counsel: Van Lindberg Event Manager: Jackie Augustine PyCon Chair: Emily Morehouse-Valcarcel Board of Directors Naomi Ceder Kushal Das Eric Holscher Ewa Jodlowska Jacqueline Kazil Jannis Leidel Van Lindberg Lorena Mesa Katie McLaughlin Marlene Mhangami Christopher Neugebauer Anna Ossowski Jeff Triplett 2018-2019 Officers Guido van Rossum, President Chair: Naomi Ceder, Chair Jacqueline Kazil, Vice Chair Elect Van Lindberg, Vice Chair Thomas Wouters, Vice Chair Marlene Mhangami, Communication Chair Lorena Mesa, Communication Chair Ee Durbin, PyCon Chair Ewa Jodlowska, Director of Operations Kurt Kaiser, Treasurer Van Lindberg, General Counsel Ewa Jodlowska, Secretary Betsy Waliszewski, Assistant Secretary Ewa Jodlowska & Betsy Waliszewski, Event Coordinators Board of Directors Van Lindberg Naomi Ceder Eric Holscher Jacqueline Kazil Anna Ossowski Lorena Mesa Thomas Wouters Kushal Das Marlene Mhangami Christopher Neugebauer Jeff Triplett Katie McLaughlin Ewa Jodlowska 2017-2018 Officers Guido van Rossum, President Chair: Naomi Ceder, Chair Van Lindberg, Vice Chair Ee Durbin, PyCon Chair Ewa Jodlowska, Director of Operations Kurt Kaiser, Treasurer Van Lindberg, General Counsel Ewa Jodlowska, Secretary Betsy Waliszewski, Assistant Secretary Ewa Jodlowska & Betsy Waliszewski, Event Coordinators Board of Directors Van Lindberg Naomi Ceder Eric Holscher Jacqueline Kazil Paul Hildebrandt Lorena Mesa Thomas Wouters Kushal Das Marlene Mhangami Kenneth Reitz Trey Hunner Ewa Jodlowska Paola Katherine Pacheco 2016-2017 Officers Guido van Rossum, President Diana Clarke, Chair Van Lindberg & Naomi Ceder, Vice Chairs Brandon Rhodes, PyCon Chair Ewa Jodlowska, Director of Operations Kurt Kaiser, Treasurer Van Lindberg, General Counsel Ewa Jodlowska & Betsy Waliszewski, Event Coordinator Ewa Jodlowska , Secretary Betsy Waliszewski, Assistant Secretary Board of Directors Annapoornima Koppad (resigned 2017-01-17) Carrie Ann Philbin Carol Willing Jacqueline Kazil Kushal Das Lorena Mesa Trey Hunner Younggun Kim Naomi Ceder Diana Clarke Van Lindberg 2015-2016 Officers Guido van Rossum, President Van Lindberg, Chair Kurt Kaiser, Treasurer Diana Clarke, Communications Brandon Rhodes, PyCon Chair Ewa Jodlowska, Director of Operations Lynn Root & Naomi Ceder, Vice Chairs Betsy Waliszewski, Event Coordinator / Administrator Board of Directors Naomi Ceder Diana Clarke Alyssa (Nick) Coghlan Alex Gaynor Marc-Andre Lemburg Van Lindberg Ashwini Oruganti Anna Ossowski Carrie Ann Philbin Lynn Root Carol Willing 2014-2015 Officers Guido van Rossum, President Van Lindberg, Chair Kurt Kaiser, Treasurer Brian Curtin, Communications Diana Clarke, PyCon Chair Ewa Jodlowska, Secretary and Event Coordinator David Mertz, Vice-Chair and Chair Elect Board of Directors Alyssa (Nick) Coghlan Brian Curtin Kushal Das Selena Decklemann Alex Gaynor Marc-Andre Lemburg Van Lindberg Jessica McKellar David Mertz Travis Oliphant Lynn Root 2013-2014 Officers Guido van Rossum, President Van Lindberg, Chairman Kurt Kaiser, Treasurer Brian Curtin, Communications Diana Clarke, PyCon Chair Ewa Jodlowska, Secretary and Event Coordinator Jesse Noller, Vice Chairman Board of Directors Brett Cannon Brian Curtin Alex Gaynor Marc-Andre Lemburg Van Lindberg Jessica McKellar David Mertz Doug Napoleone Jesse Noller Tim Peters Lynn Root 2012-2013 Officers: Guido van Rossum, President Van Lindberg, Chairman Kurt Kaiser, Treasurer Brian Curtin, Communications Jesse Noller, PyCon Chair Ewa Jodlowska, Secretary and Event Coordinator Marc-Andre Lemburg, Vice Chairman Board of Directors: Brian Curtin Steve Holden Andrew Kuchling Marc-Andre Lemburg Van Lindberg Martin von L\u00f6wis Jessica McKellar David Mertz Doug Napoleone Jesse Noller Tim Peters 2011-2012 Officers: Guido van Rossum, President Steve Holden, Chairman Pat Campbell, Secretary Kurt Kaiser, Treasurer Doug Hellmann, Communications Jesse Noller, PyCon Chair Board of Directors: Raymond Hettinger Steve Holden Marc-Andre Lemburg Martin von L\u00f6wis David Mertz Doug Napoleone Jesse Noller Tim Peters Allison Randal Jeff Rush Greg Stein (resigned 2011-09-19) James Tauber (resigned 2011-07-18) Gloria Willadsen 2010-2011 Officers: Guido van Rossum, President Steve Holden, Chairman Pat Campbell, Secretary Kurt Kaiser, Treasurer Doug Hellmann, Communications Van Lindberg, PyCon Chair Board of Directors: Raymond Hettinger Steve Holden Marc-Andre Lemburg Martin von L\u00f6wis David Mertz Doug Napoleone Jesse Noller Tim Peters Allison Randal Jeff Rush Greg Stein James Tauber Gloria Willadsen 2009-2010 Officers: Guido van Rossum, President Steve Holden, Chairman David Goodger, Secretary Kurt Kaiser, Treasurer Raymond Hettinger, Assistant Treasurer Brett Cannon, Executive Vice President Van Lindberg, PyCon Chair Board of Directors: Brett Cannon Raymond Hettinger Steve Holden Andrew Kuchling Martin von L\u00f6wis David Mertz Tim Peters Jeff Rush James Tauber (David Goodger resigned from the Board in July 2009 when appointed\nConference Coordinator.) 2008-2009 Officers: Guido van Rossum, President Steve Holden, Chairman David Goodger, Secretary & PyCon Chair Kurt Kaiser, Treasurer Raymond Hettinger, Assistant Treasurer Brett Cannon, Executive Vice President James Tauber, Vice President Board of Directors: Brett Cannon Stephan Deibel David Goodger Raymond Hettinger Steve Holden Martin von L\u00f6wis Tim Peters James Tauber 2007-2008 Officers: Guido van Rossum, President Stephan Deibel, Chairman Steve Holden, Vice Chairman David Goodger, Secretary Kurt Kaiser, Treasurer Neal Norwitz, Assistant Treasurer Brett Cannon, Executive Vice President Andrew Kuchling, Vice President Board of Directors: David Ascher Brett Cannon Stephan Deibel David Goodger Steve Holden Andrew Kuchling Martin von L\u00f6wis Tim Peters 2006-2007 Officers: Guido van Rossum, President Stephan Deibel, Chairman Steve Holden, Vice Chairman Kurt Kaiser, Treasurer Neal Norwitz, Assistant Treasurer David Goodger, Secretary Jeremy Hylton, Assistant Secretary David Ascher, Executive Vice President Andrew Kuchling, Vice President Martin von L\u00f6wis, Vice President Brett Cannon, Vice President Board of Directors: David Ascher Brett Cannon Stephan Deibel David Goodger Steve Holden Andrew Kuchling Martin von L\u00f6wis Tim Peters 2005-2006 Officers: Guido van Rossum, President Stephan Deibel, Chairman of the Board Neal Norwitz, Treasurer through October 18, Assistant Treasurer thereafter Kurt Kaiser, Assistant Treasurer through October 18, Treasurer thereafter Jeremy Hylton, Secretary David Goodger, Assistant Secretary Board of Directors: David Ascher Stephan Deibel Steve Holden Jeremy Hylton Andrew Kuchling Martin von L\u00f6wis Tim Peters (Guido van Rossum was elected to the Board of Directors at the\n2005-03-24 members' meeting, but resigned at the Board meeting the\nsame day.  He retained the post of President.) 2004-2005 Officers: Stephan Deibel, Chairman of the Board Guido van Rossum, President Neal Norwitz, Treasurer Jeremy Hylton, Secretary Board of Directors: David Ascher Stephan Deibel Steve Holden Jeremy Hylton Martin von L\u00f6wis Tim Peters Guido van Rossum 2003-2004 Officers: Guido van Rossum, President and Chairman of the Board Neal Norwitz, Treasurer Jeremy Hylton, Secretary Board of Directors: David Ascher Jeremy Hylton Marc-Andr\u00e9 Lemburg Martin von L\u00f6wis Tim Peters Guido van Rossum Thomas Wouters 2002-2003 Officers: Guido van Rossum, President, Chairman of the Board Jeremy Hylton, Treasurer and Secretary Board of Directors: David Ascher Jeremy Hylton Marc-Andr\u00e9 Lemburg Martin von L\u00f6wis Tim Peters Guido van Rossum Thomas Wouters 2001-2002 Officers: Dick Hardt, President Shawn O'Donnell, Secretary Board of Directors: David Ascher Paul Everitt Fredrik Lundh Tim Peters Guido van Rossum Greg Stein Thomas Wouters First Board Meeting (March 5, 2001) Officer: Greg Stein, temporary Chairperson Board of Directors: Paul Everitt Greg Stein Officers & Directors by Name Tania Allard David Ascher D\u00e9bora Azevedo Brett Cannon Pat Campbell Diana Clarke Naomi Ceder Alyssa Coghlan Brian Curtin Kushal Das Selena Deckelmann Stephan Deibel Paul Everitt Alex Gaynor David Goodger Dick Hardt Doug Hellmann Raymond Hettinger Paul Hildebrandt Steve Holden Eric Holscher Trey Hunner Jeremy Hylton Dustin Ingram Ewa Jodlowska Kurt Kaiser Jacqueline Kazil Younggun Kim Annapoornima Koppad Andrew Kuchling Jannis Leidel Marc-Andr\u00e9 Lemburg Van Lindberg Martin von L\u00f6wis Fredrik Lundh Jessica McKellar Katie McLaughlin Marlene Mhangami David Mertz Lorena Mesa Joannah Nanjekye Doug Napoleone Christopher Neugebauer Deb Nicholson Jesse Noller Neal Norwitz Shawn O'Donnell Travis Oliphant Anna Ossowski Paola Katherine Pacheco Tim Peters Carrie Ann Philbin Allison Randal Kenneth Reitz Guido van Rossum Lynn Root Jeff Rush Greg Stein James Tauber Jeff Triplett Gloria Willadsen Dawn Wages Carol Willing Simon Willison Thomas Wouters Nina Zakharenko Tania Allard Director, 2021-2023 David Ascher Director, 2001-2008 Executive Vice President, 2006-2007 D\u00e9bora Azevedo Director, 2021-2023 Vice chair elect, 2022-2023 Communications officer, 2021-2022 Brett Cannon Director, 2006-2010, 2013-2014 Executive Vice President, 2007-2010 Vice President, 2006-2007 Pat Campbell Secretary, 2010-2012 Diana Clarke PyCon Chair, 2014-2015 Director, 2015-2017 Communications Officer, 2015 Chair, 2016-2017 Naomi Ceder Chair, 2017-2020 Director, 2015-2020 Vice Chair, 2015-2016 Alyssa Coghlan Director, 2014 - 2016 (as Nick Coghlan) Brian Curtin Director, 2012-2015 Communications Officer, 2012-2015 Kushal Das Director, 2014-2015, 2016-2023 Communications Officer, 2019-2020 Selena Deckelmann Director, 2014-2015 Stephan Deibel Director, 2004-2009 Chairman of the Board, 2004-2008 Paul Everitt Director, 2001-2002 Alex Gaynor Director, 2013-2016 David Goodger Director, 2006-2009 Secretary, 2006-2010 Assistant Secretary, 2005-2006 PyCon Chair, 2008-2009 PyCon Chair (informal), 2007-2008 Dick Hardt President, 2001-2002 Doug Hellmann Communications Officer, 2010-2012 Raymond Hettinger Director, 2008-2012 Assistant Treasurer, 2008-2010 Paul Hildebrandt Director, 2017-2018 Steve Holden Director, 2004-2013 Vice Chairman, 2006-2008 Chairman of the Board, 2008-2012 PyCon Chair (informal), 2002-2005 Eric Holscher Director, 2017-2020 Trey Hunner Director, 2016-2018 Jeremy Hylton Director, 2002-2006 Treasurer, 2002-2003 Secretary, 2002-2006 Assistant Secretary, 2006-2007 Dustin Ingram Director, 2020-2023 Ewa Jodlowska Executive Director, 2019-2021 Director of Operations, 2015-2019 Secretary, 2012-2021 Event Coordinator, 2012-2019 Kurt Kaiser Treasurer, 2005-2019 Assistant Treasurer, 2005 Jacqueline Kazil Director, 2016-2020 Treasurer, 2019-2020 Vice chair elect, 2018-2019 Younggun Kim Director, 2016-2017 Annapoornima Koppad Director, 2016-2017 Andrew Kuchling Director, 2005-2008, 2009-2010, 2012-2013 Vice President, 2006-2008 PyCon Chair (informal), 2005-2007 Jannis Leidel Director, 2019-2023 Communications officer, 2019-2022 Marc-Andr\u00e9 Lemburg Director, 2002-2004, 2010-2016 Vice Chairman, June 2012-2013 Vice President, 2003-2004 Van Lindberg Director, 2012-2023 Chairman, 2012-2016 Vice Chairman, April-May 2012, 2016-2019 PyCon Chair, 2009-2011 General Council, 2016-2023 Martin von L\u00f6wis Director, 2002-2013 Vice President, 2006-2007 Fredrik Lundh Director, 2001-2002 Jessica McKellar Director, 2012-2014 Katie McLaughlin Director, 2018-2021 Communications Officer, 2020-2021 Marlene Mhangami Director, 2017-2022 David Mertz Director, 2009-2014 Vice-Chair and Chair Elect, 2014-15 Lorena Mesa Chair, 2020-2022 Director, 2016-2022 Communications Officer, 2016-2022 Joannah Nanjekye Director, 2021-2023 Vice chair, 2021-2022 Doug Napoleone Director, 2010-2014 Christopher Neugebauer Director, 2018-2021 Vice chair, 2019-2021 Deb Nicholson Executive Director, 2022-2023 Secretary, 2022-2023 Jesse Noller Director, 2010-2014 Vice Chairman, 2013-2014 PyCon Chair, 2012-2013 Neal Norwitz Treasurer, 2003-2005 Assistant Treasurer, 2005-2008 Shawn O'Donnell Secretary, 2001-2002 Travis Oliphant Director, 2014-2015 Anna Ossowski Director, 2018-2021 Vice chair, 2019-2020 Paola Katherine Pacheco Director, 2017-2018 Tim Peters Director, 2001-2014 Carrie Ann Philbin Director, 2015-2017 Allison Randal Director, 2010-2012 Kenneth Reitz Director, 2017-2018 Guido van Rossum Director, 2001-2005 President, 2002-2023 Chairman of the Board, 2002-2004 Lynn Root Director, 2013-2016 Vice-Chair Elect, 2015 Jeff Rush Director, 2009-2012 PyCon Chair (informal), 2006-2007 Greg Stein Director, 2001-2002, 2010-2012 Temporary Chairperson, March 5, 2001 James Tauber Director, 2008-2012 Vice President, 2008-2009 Jeff Triplett Director, 2018-2023 Vice chair, 2022-2023 Treasurer, 2020-2022 Gloria Willadsen Director, 2010-2012 Dawn Wages Director, 2022-2023 Treasurer, 2022-2023 Carol Willing Director, 2015-2017 Simon Willison Director, 2022-2023 Thomas Wouters Director, 2001-2004, 2017-2019, 2020-2023 Chair, 2022-2023 Vice chair elect, 2020-2022 Vice chair, 2018-2019 Nina Zakharenko Director, 2020-2023 Vice chair, 2022-2023 Communications officer, 2021-2022 Officers By Title President Director of Operations Chair Vice Chair General Council Secretary Assistant Secretary Event Coordinator Treasurer Assistant Treasurer Executive Vice President Vice Presidents PyCon Chair Communications Officer President 2002-2023: Guido van Rossum 2001-2002: Dick Hardt Director of Operations 2015-2019: Ewa Jodlowska Chair 2022-2023: Thomas Wouters 2020-2022: Lorena Mesa 2017-2020: Naomi Ceder 2016-2017: Diana Clarke 2012-2016: Van Lindberg 2008-2012: Steve Holden 2004-2008: Stephan Deibel 2002-2004: Guido van Rossum 2001-03-05: Greg Stein Vice Chair 2022-2023: D\u00e9bora Azevedo, Jeff Triplett, Nina Zakharenko 2021-2022: Thomas Wouters, Marlene Mhangami, Joannah Nanjekye 2020-2021: Thomas Wouters, Marlene Mhangami, Christopher Neugebauer 2019-2020: Lorena Mesa, Anna Ossowski, Christopher Neugebauer 2018-2019: Jackie Kazil, Van Lindberg, Thomas Wouters 2017-2018: Van Lindberg 2016-2017: Naomi Ceder, Van Lindberg 2015-2016: Lynn Root, Naomi Ceder 2014-2015: Marc-Andre Lemburg, David Mertz 2013-2014: Jesse Noller 2012-2013: Marc-Andre Lemburg April-Man 2012: Van Lindberg 2006-2008: Steve Holden General Council 2016-2023: Van Lindberg Secretary 2022-2023: Deb Nicholson 2012-2021: Ewa Jodlowska 2010-2012: Pat Campbell 2006-2010: David Goodger 2002-2006: Jeremy Hylton 2001-2002: Shawn O'Donnell Assistant Secretary 2015-2021: Betsy Waliszewski 2006-2007: Jeremy Hylton 2005-2006: David Goodger Event Coordinator 2021-2023: Jackie Augustine 2020-2021: Jackie Augustine, Betsy Waliszewski 2012-2020: Ewa Jodlowska 2015-2019: Betsy Waliszewski Treasurer 2022-2023: Dawn Wages 2020-2022: Jeff Triplett 2019-2020: Jackie Kazil 2005-2019: Kurt Kaiser 2003-2005: Neal Norwitz 2002-2003: Jeremy Hylton Assistant Treasurer 2008-2010: Raymond Hettinger 2005-2008: Neal Norwitz 2005: Kurt Kaiser Executive Vice President 2007-2010: Brett Cannon 2006-2007: David Ascher Vice Presidents 2008-2009: James Tauber 2006-2008: Andrew Kuchling 2006-2007: Brett Cannon 2006-2007: Martin von L\u00f6wis PyCon Chair The position of PyCon Chair was formalized as a PSF officer on March 14, 2008. 2022-2023: Mariatta Wijaya 2019-2022: Emily Morehouse-Valcarcel 2017-2019: Ee Durbin 2015-2017: Brandon Rhodes 2013-2015: Diana Clarke 2011-2013: Jesse Noller 2009-2011: Van Lindberg 2008-2009: David Goodger Prior to March 2008, the PyCon Chair was an informal position, not an\nofficer of the PSF. 2007-2008: David Goodger 2006-2007: Andrew Kuchling & Jeff Rush (co-chairs) 2005-2006: Andrew Kuchling 2002-2005: Steve Holden Communications Officer 2021-2022: Jannis Leidel, Nina Zakharenko, D\u00e9bora Azevedo 2020-2021: Jannis Leidel, Katie McLaughlin 2019-2020: Marlene Mhangami, Kushal Das, Jannis Leidel 2018-2019: Lorena Mesa, Marlene Mhangami 2016-2017: Kushal Das, Lorena Mesa 2015-2016: Diana Clarke 2012-2015: Brian Curtin 2010-2012: Doug Hellmann The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["PSF Officers & Board Members", "2019-2020", "2018-2019", "2017-2018", "2016-2017", "2015-2016", "2014-2015", "2013-2014", "2012-2013", "2011-2012", "2010-2011", "2009-2010", "2008-2009", "2007-2008", "2006-2007", "2005-2006", "2004-2005", "2003-2004", "2002-2003", "2001-2002", "First Board Meeting (March 5, 2001)", "The PSF"]}
{"url": "https://www.python.org/psf/mission/", "title": "Mission | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> About >>> Mission Statement Mission The mission of the Python Software Foundation is to promote,\nprotect, and advance the Python programming language, and to\nsupport and facilitate the growth of a diverse and international community of Python programmers. You can help fund the PSF by making a donation or becoming a member . The following is the official mission statement of the PSF: The Python Software Foundation (PSF) is a non-profit membership\norganization devoted to advancing open source technology related\nto the Python programming language.  It qualifies under the US\nInternal Revenue Code as a tax-exempt 501(c)(3) scientific and\neducational public charity, and conducts its business according to\nthe rules for such organizations. The PSF: Produces the core Python distribution, made available to the public\nfree of charge.  This includes the Python language itself, its\nstandard libraries and documentation, installers, source code,\neducational materials, and assorted tools and applications. Establishes PSF licenses, ensuring the rights of the public to freely\nobtain, use, redistribute, and modify intellectual property held by\nthe PSF. Works with the Open Source Initiative to ensure that PSF licenses\nconform to the Open Source Definition. Holds Python's intellectual property rights for releases 2.1 and\nfollowing. Seeks to obtain the intellectual property rights for Python releases\nprior to 2.1, for relicensing under the PSF Python license, to relieve\nthe legal burden on Python's users.  The PSF may also seek rights\nto other Python-related software for relicensing under a PSF license. Protects the Python name, and the names, service marks and trademarks\nassociated with all other intellectual property held by the PSF. Solicits and manages contributions to the Python codebase, and may\nperform these services on behalf of other open source Python-related\ncodebases. Raises funds to support PSF programs and services.  The regulations\nfor public charity funding are complex.  Some consequences are that\nthe vast bulk of funding must come from private contributions\n(including sponsoring memberships) and public grants, must come from\na broad base, and that no single private donor can supply a\nsubstantial percentage of the PSF's total funding.  Additional\nrevenue may be pursued in ways consistent with then-current rules for\npublic charities and with Python's standing as an open source project.\nFor example, the PSF may offer to sell conference proceedings, special\nPython distributions, or merchandise with distinctive insignia. Publicizes, promotes the adoption of, and facilitates the ongoing\ndevelopment of Python-related technology and educational resources.\nThis includes, but is not limited to, maintaining a public web site,\nplanning Python conferences, and offering grants to Python-related\nopen source projects. Encourages and facilitates Python-related research in the public\ninterest. \"Open source\" is defined as: freely available technology licensed\nunder terms compatible with Version 1.9 (or later) of the Open\nSource Definition, as established by the Open Source Initiative\n(see http://www.opensource.org/ ). Note The mission statement above was approved by the PSF Board of\nDirectors on March 2, 2002, and amended by the Board on August 15,\n2006, and September 14, 2009 (brief version).  See the PSF Board\nResolutions page for details. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Mission", "The PSF"]}
{"url": "https://www.python.org/psf/about/", "title": "About the Python Software Foundation | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> About About the Python Software Foundation The Python Software Foundation is the organization behind the open source Python programming language. We are devoted to creating the conditions for Python and the Python community to grow and thrive. We fulfill our mission through these core activities: Infrastructure STRUCTURE AND STABILITY SO THE PYTHON LANGUAGE, ITS CONTRIBUTORS, AND USERS CAN THRIVE. We distribute Python , free of charge and available to all, for ever. We are the stewards of Python intellectual property\u2014We establish PSF licenses, hold intellectual property rights to most Python releases, and protect Python-related trademarks. We put resources behind and help coordinate and improvements to the Python codebase and new Python releases. Community CONNECTION, DIVERSITY, SUPPORT, AND GROWTH FOR ALL WITHIN THE PYTHON COMMUNITY. We host PyCon US , the longest running annual event for celebrating, learning about, and coming together around Python. We give grants to groups around the world hosting events for and by Pythonistas supporting each other and welcoming newcomers.  In 2021 we awarded $117,000 USD for over 129 grants to recipients in 41 different countries. We are responsible for establishing, maintaining, and enforcing the Python Code of Conduct , to work towards a Python community that is a safe and welcoming space for all. We provide and support resources to attract new Python users and keep the community growing, diverse, and healthy. We fiscally sponsor 20 Python-related community groups, conferences, and projects \u2014including PyLadies, PyCascades, and Palletsto allow them to continue their contributions to the community with organizational infrastructure behind them. Investing in Python & Tools WE BUILD, SUPPORT, AND MAINTAIN CRITICAL PUBLIC GOODs FOR THE PYTHON COMMUNITY. We host PyPI , the Python package repository relied on by thousands of users with a huge range of projects. We've brought on board a Packaging Project Manager to best serve PyPI users We've added a full-time CPython Developer in Residence to our team, who amplifies volunteer contributors\u2019 impact by processing CPython pull requests and tackling structural improvements. OUR SPONSORS DONATE TO THE PSF BECOME A MEMBER GET INVOLVED ANNUAL IMPACT REPORT NEWS & UPDATES PSF FAQ APPLY FOR A GRANT PYCON  US The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["About the Python Software Foundation", "Infrastructure", "Community", "Investing in Python & Tools", "The PSF"]}
{"url": "https://www.python.org/jobs/location/nagercoil-kanyakumari-district-india/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit nagercoil, Kanyakumari District \u2013 India 1 Python job in\n        \n            nagercoil, Kanyakumari District \u2013 India New Python/MATLAB Programmer Panacorp Software Solutions nagercoil, Kanyakumari District, India Machine Learning Posted: 14 February 2025 Researcher / Scientist Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["nagercoil, Kanyakumari District \u2013 India", "1 Python job in\n        \n            nagercoil, Kanyakumari District \u2013 India", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/location/london-uk/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit London \u2013 UK 1 Python job in\n        \n            London \u2013 UK New Senior Backend Engineer BactoBio London, UK Back end Posted: 22 January 2025 Developer / Engineer Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["London \u2013 UK", "1 Python job in\n        \n            London \u2013 UK", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/location/hove-east-sussex-united-kingdom/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Hove, East Sussex \u2013 United Kingdom 1 Python job in\n        \n            Hove, East Sussex \u2013 United Kingdom Python Engineering Manager Tillo Hove, East Sussex, United Kingdom Back end Posted: 13 December 2024 Manager / Executive Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Hove, East Sussex \u2013 United Kingdom", "1 Python job in\n        \n            Hove, East Sussex \u2013 United Kingdom", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/location/bogota-latin-america/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Bogota \u2013 Latin America 1 Python job in\n        \n            Bogota \u2013 Latin America Senior Data Engineer (SaaS) Poplin Bogota, Latin America Posted: 16 January 2025 Developer / Engineer Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Bogota \u2013 Latin America", "1 Python job in\n        \n            Bogota \u2013 Latin America", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/location/telecommute/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Telecommute Jobs 6 Python jobs that offer telecommuting New Python/MATLAB Programmer Panacorp Software Solutions nagercoil, Kanyakumari District, India Machine Learning Posted: 14 February 2025 Researcher / Scientist New Senior Python Backend Engineer Reef Technologies Warsaw (fully remote), Poland Back end , Database Posted: 11 February 2025 Developer / Engineer New Lead Python Backend Engineer Reef Technologies Warsaw (fully remote), Poland Back end , Lead Posted: 11 February 2025 Developer / Engineer New Machine Learning Engineer for Agentic AI Scalable Path Remote, Remote, Latin America Back end , Machine Learning , Agentic Workflows Posted: 30 January 2025 Data Analyst Senior Software Engineer, AI UpDoc, Inc. Remote, Remote, United States Back end , Cloud , Machine Learning , Web Posted: 18 January 2025 Developer / Engineer Senior Data Engineer (SaaS) Poplin Bogota, Latin America Posted: 16 January 2025 Developer / Engineer Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Telecommute Jobs", "6 Python jobs that offer telecommuting", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/locations/", "title": "Job Locations | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Jobs by Location! 15 Python jobs  in 13 different locations. Canada Richmond, BC India nagercoil, Kanyakumari District Latin America Bogota, Remote, Remote Poland Warsaw (fully remote), remote, Remote Remote, MG UK London, US San Jose, Tucson, United Kingdom Hove, East Sussex West Winch, Norfolk United States Remote, Remote Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Jobs by Location!", "15 Python jobs  in 13 different locations.", "Canada", "India", "Latin America", "Poland", "Remote", "UK", "US", "United Kingdom", "United States", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/category/researcher-scientist/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Researcher / Scientist 1 Python job in Researcher / Scientist New Python/MATLAB Programmer Panacorp Software Solutions nagercoil, Kanyakumari District, India Machine Learning Posted: 14 February 2025 Researcher / Scientist Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Researcher / Scientist", "1 Python job in Researcher / Scientist", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/category/other/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Other 1 Python job in Other New Python Annotator Summa Linguae Technologies Remote, Remote Machine Learning , Text Processing Posted: 28 January 2025 Other Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Other", "1 Python job in Other", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/category/manager-executive/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Manager / Executive 1 Python job in Manager / Executive Python Engineering Manager Tillo Hove, East Sussex, United Kingdom Back end Posted: 13 December 2024 Manager / Executive Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Manager / Executive", "1 Python job in Manager / Executive", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/category/developer-engineer/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Developer / Engineer 10 Python jobs in Developer / Engineer New Senior Python Backend Engineer Reef Technologies Warsaw (fully remote), Poland Back end , Database Posted: 11 February 2025 Developer / Engineer New Lead Python Backend Engineer Reef Technologies Warsaw (fully remote), Poland Back end , Lead Posted: 11 February 2025 Developer / Engineer New Sr. Software Engineer - R&D Modeling and Simulation ASML San Jose, US Image Processing , Support, Linux, Python, Unix, NodeJS Posted: 31 January 2025 Developer / Engineer New Senior Backend Engineer BactoBio London, UK Back end Posted: 22 January 2025 Developer / Engineer New G2i Remote, MG, Remote Back end Posted: 20 January 2025 Developer / Engineer Senior Software Engineer, AI UpDoc, Inc. Remote, Remote, United States Back end , Cloud , Machine Learning , Web Posted: 18 January 2025 Developer / Engineer Senior Data Engineer (SaaS) Poplin Bogota, Latin America Posted: 16 January 2025 Developer / Engineer Senior Backend Engineer - Poland Focal Systems remote, Poland Back end Posted: 05 December 2024 Developer / Engineer Software Programmer J.F.T. Maintenance Services Limited West Winch, Norfolk, United Kingdom Back end , Database , Front end Posted: 01 December 2024 Developer / Engineer Python Developer Leidos Tucson, US Web Posted: 25 November 2024 Developer / Engineer Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Developer / Engineer", "10 Python jobs in Developer / Engineer", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/category/data-analyst/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Data Analyst 2 Python jobs in Data Analyst New Machine Learning Engineer for Agentic AI Scalable Path Remote, Remote, Latin America Back end , Machine Learning , Agentic Workflows Posted: 30 January 2025 Data Analyst Data Administrator Pepper Wireless Richmond, BC, Canada Database Posted: 07 January 2025 Data Analyst Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Data Analyst", "2 Python jobs in Data Analyst", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/categories/", "title": "Our Job Categories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Job Categories 15 Python jobs in 5 different categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Job Categories", "15 Python jobs in 5 different categories", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/type/web/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Web 2 Python jobs in Web Senior Software Engineer, AI UpDoc, Inc. Remote, Remote, United States Back end , Cloud , Machine Learning , Web Posted: 18 January 2025 Developer / Engineer Python Developer Leidos Tucson, US Web Posted: 25 November 2024 Developer / Engineer Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Web", "2 Python jobs in Web", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/type/text-processing/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Text Processing 1 Python job in Text Processing New Python Annotator Summa Linguae Technologies Remote, Remote Machine Learning , Text Processing Posted: 28 January 2025 Other Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Text Processing", "1 Python job in Text Processing", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/type/machine-learning/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Machine Learning 4 Python jobs in Machine Learning New Python/MATLAB Programmer Panacorp Software Solutions nagercoil, Kanyakumari District, India Machine Learning Posted: 14 February 2025 Researcher / Scientist New Machine Learning Engineer for Agentic AI Scalable Path Remote, Remote, Latin America Back end , Machine Learning , Agentic Workflows Posted: 30 January 2025 Data Analyst New Python Annotator Summa Linguae Technologies Remote, Remote Machine Learning , Text Processing Posted: 28 January 2025 Other Senior Software Engineer, AI UpDoc, Inc. Remote, Remote, United States Back end , Cloud , Machine Learning , Web Posted: 18 January 2025 Developer / Engineer Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Machine Learning", "4 Python jobs in Machine Learning", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/type/lead/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Lead 1 Python job in Lead New Lead Python Backend Engineer Reef Technologies Warsaw (fully remote), Poland Back end , Lead Posted: 11 February 2025 Developer / Engineer Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Lead", "1 Python job in Lead", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/type/image-processing/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Image Processing 1 Python job in Image Processing New Sr. Software Engineer - R&D Modeling and Simulation ASML San Jose, US Image Processing , Support, Linux, Python, Unix, NodeJS Posted: 31 January 2025 Developer / Engineer Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Image Processing", "1 Python job in Image Processing", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/type/front-end/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Front end 1 Python job in Front end Software Programmer J.F.T. Maintenance Services Limited West Winch, Norfolk, United Kingdom Back end , Database , Front end Posted: 01 December 2024 Developer / Engineer Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Front end", "1 Python job in Front end", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/type/database/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Database 3 Python jobs in Database New Senior Python Backend Engineer Reef Technologies Warsaw (fully remote), Poland Back end , Database Posted: 11 February 2025 Developer / Engineer Data Administrator Pepper Wireless Richmond, BC, Canada Database Posted: 07 January 2025 Data Analyst Software Programmer J.F.T. Maintenance Services Limited West Winch, Norfolk, United Kingdom Back end , Database , Front end Posted: 01 December 2024 Developer / Engineer Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Database", "3 Python jobs in Database", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/type/cloud/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Cloud 1 Python job in Cloud Senior Software Engineer, AI UpDoc, Inc. Remote, Remote, United States Back end , Cloud , Machine Learning , Web Posted: 18 January 2025 Developer / Engineer Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Cloud", "1 Python job in Cloud", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/doc/essays/pepparade/", "title": "Parade of the PEPs | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Parade of the PEPs Parade of the PEPs To start off Developer's Day at the Python10 conference I gave a\r\nkeynote ending in what I dubbed \"the parade of the PEPs\".  It was a\r\nbrief overview of all\r\nopen PEPs , where I gave my highly personal and subjective opinion\r\nfor each PEP.  Later, I realized that this might have been of interest\r\nto other developers.  I didn't take notes at the conference, so below\r\nis a different set of comments that I created from scratch during a\r\nsingle two-hour sitting on March 7, 2002.  I intend to occasionally\r\nupdate this with new comments and new PEPs. --Guido van Rossum PEP 42 - Small Feature Requests - Hylton Frankly, this is mostly a dumpster for \"would be nice\" ideas that\r\ndon't have enough priority to ever get implemented.  It seems nobody\r\never goes through this and finds a nice idea for which they write the\r\ncode and submit a patch.  So in effect, an idea that is moved to PEP\r\n42 is worse off than one that is outright rejected -- it's in a zombie\r\nzone from which there is no possible escape either to heaven or to\r\nhell.  How can we change this? PEP 206 - 2.0 Batteries Included - Zadka This is a good idea.  But PythonLabs doesn't have the energy to carry\r\nit forward, nor does the original author.  How can we make this a\r\ncommunity effort? PEP 209 - Adding Multidimensional Arrays - Barrett, Oliphant March 28, 2002: My previous comments were based on several\r\nmisunderstandings.  (E.g. slices in the new Numeric acts the same as\r\nin the old version, and don't make copies as I mistakenly thought.)\r\nQuoting Perry Greenfield: difference coercion rules when scalars are combined with\r\n   arrays. At the scientific Python BoF, there was consensus\r\n   that this change was a Good Thing. Types are represented by type objects rather than single\r\n   character codes. We've implemented this so that it is\r\n   backward compatible so there should be very little old\r\n   Python code broken with this. No array attributes (namely shape, flat, real and imag)\r\n   for Python versions previous to 2.2 (we use the properties\r\n   feature to support this for 2.2 and later; so it is only\r\n   incompatible with Numeric with older versions of Python) There are more minor differences, but these are the major\r\nbackward compatiblity issues at the Python level. Two of\r\nthem should not be problems for most users using Python 2.2\r\nor later. It does have a number of important enhancements,\r\nbut these are not a compatiblity issue. Probably the biggest\r\nissues for its acceptance are: A incompatible C API. We can provide tools to make it\r\n   easier to adapt C code but we can't make it automatic. A lack of libraries. We are starting on documenting the\r\n   API, providing examples of how to add C code, and adding\r\n   some standard libraries now. There will have to be enough\r\n   support in libraries (including plotting) before there is\r\n   critical mass of functionality to cause people to begin\r\n   to switch (outside of astronomy, those will be driven by\r\n   our libraries that are using numarray) Slower performance for small arrays. Since more of it\r\n   is written in Python, it is an order of magnitude slower for\r\n   smaller arrays (but just as fast or faster for large arrays\r\n   (> 1MB)). Optimization is in our plans, but won't be done\r\n   until we fill out the libraries and finish the safety issue\r\n   (which is near completion). Because of 1) and 2), not many people are using it yet\r\n   (some are busy and find Numeric suitable for their purpose;\r\n   it takes more than just its availablity for them to try it\r\n   out and give their opinion.) Well it's still our goal and we are working towards that end\r\n(we are even beginning to look at converting the documentation\r\nto the Python standard). There is a draft manual available.\r\nI imagine it may be a year before there is a significant switch-\r\nover of the community to start using it (assuming we are succesful\r\nin getting them to do so). On the other hand, I don't think that timescale should necessarily\r\nbe the driver for when (or whether) it is accepted into the core.\r\nIt could accepted into the core before that (they have different\r\nnames and can coexist) or well after that. I think that decision\r\nshould be made on a somewhat different basis. Paul Dubois sent me email supporting Perry's message, announcing\r\nthat he'll be a Numarray user soon for one particular application.\r\nPaul also mentions the C API as the only nasty issue.  He doesn't\r\nthink that the performance problem for small array is much of an\r\nissue. Based on this feedback, I expect that this PEP will move forward\r\nslowly but steadily.  I expect that the authors will eventually\r\nprovide me with a patch set to incorporate their code base into the\r\nPython CVS tree.  Whether this will be for Python 2.3 or later I can't\r\ntell. PEP 215 - String Interpolation - Yee I don't foresee that the debate here will ever yield a clear\r\nconclusion.  Some people think it's a clear case of YAGNI (You Ain't\r\nGonna Need It), while others think this is the most important missing\r\nfeature for beginning programmers.  I don't know which side is right.\r\nEven if it's a needed feature, the syntax is problematic: the first $\r\nin print $\"The area of a $x by $y rectangle is $z\" is very questionable, but none of the alternatives I've seen proposed\r\n(e.g. i\"...\") look very good either.  We can't just always turn on\r\nstring interpolation in literals because that would break existing\r\ncode.  Maybe \"from __future__ import interpolation\" would enable\r\ninterpolation in string literals?  (Only in literals!) There's also the question whether to allow arbitrary expressions like print \"The area is ${x*y}\" PEP 216 - Docstring Format - Zadka This has very little contents.  Maybe it should be withdrawn?  There\r\nare several other PEPs that deal with doc strings, notably 256-258,\r\nwhich I like much better. PEP 228 - Reworking Python's Numeric Model - Zadka, van Rossum This is way too much Py-in-the-sky.  There are way too many unresolved\r\nissues, and many aren't even mentioned in the PEP.  I think it should\r\nbe rejected; maybe if there is interest in the future a task force or\r\nSIG could be created to explore this subject in more depth. PEP 237 - Unifying Long Integers and Integers - Zadka, van Rossum This one is already accepted, and we should implement phase B1 in\r\nPython 2.3.  Need I say more? PEP 239 - Adding a Rational Type to Python - Zadka Like 228, I think this is not a realistic PEP, it's just a collection\r\nof open issues.  A rational type seems to create more problems than it\r\nresolves. Maybe, just maybe there could be an efficient rational type\r\nimplemented in C (using Python longs of course) in an extension\r\nmodule.  But that's just a matter of hard work, and nobody seems\r\ninterested.  In the mean time, if you need rational numbers, there are\r\nplenty of implementations in pure Python available (including\r\nDemo/classes/Rat.py). PEP 240 - Adding a Rational Literal to Python - Zadka Given my comments on 239, I propose to reject this. PEP 242 - Numeric Kinds - Dubois Nobody except the author seems to be interested in pursueing this.\r\nPersonally, I think the idea is not particularly Pythonic -- the trend\r\nis towards fewer numeric types, nor more (see PEP 237).  I believe the\r\nauthor has said that it would be better to retract the PEP. PEP 243 - Module Repository Upload Mechanism - Reifschneider Sure, nice, but this should be a community effort.  Maybe Kapil's\r\nmodule repository project (Gideon,\r\n/usr/local/WWW/ftp.python.org/pub/www.python.org/sigs/catalog-sig)\r\nwill bring new life to it? I think the issue here is not so much software, but (a) setting up a\r\nserver (or set of replicas) capable of being hit by the entire\r\ncommunity, and (b) rallying the community into submitting all their\r\ncode to the repository. Another issue is review.  I think CPAN hasn't completely solved this\r\neither (given the number of complaints I hear about non-working\r\npackages).  How do you know which contributions are good?  Count\r\ndownloads?  A \"vote on this package\" form? What is the original author planning to do? PEP 245 - Python Interface Syntax - Pelletier Jim Fulton has said that this PEP was premature.  I agree.  It\r\nintroduces a new keyword, 'interface', and I'm not yet convinced that\r\nthat is needed.  On the other hand, the way this is currently done in\r\nZope also looks butt-ugly, so something may indeed be needed.  I think\r\nthat at some point in the future when we have more experience with\r\nusing interfaces (especially in Zope 3) we'll go back to this PEP and\r\nsee how much of it we can use.  Maybe there should be a special status\r\n\"frozen\" meaning not rejected but also not under consideration for the\r\nnear future?  But with a different meaning than Py-in-the-sky -- this\r\nPEP at least has lots of concrete proposals and studies the\r\nconsequences. PEP 246 - Object Adaptation - Evans I never even understood what this PEP was about until Alex Martelli\r\nexplained it to me.  I think it's similar to an operation in Zope 3\r\nthat looks for an adapter to a given object that implements a given\r\ninterface.  If the object itself implements the interface, it is\r\nreturned itself; otherwise a table of registered adapters is searched\r\nsystematically to find the most suitable adapter. But that's about all I know of the subject, and I think it should\r\nremain a nice idea, until we have a standard way to talk about\r\ninterfaces.  So I think this will have \"frozen\" status (see above) at\r\nleast as long as PEP 245. I have to admit that I never read the whole PEP, and certainly never\r\ntried to read and understand the specification or the sample\r\nimplementation, so maybe I'm still off base. PEP 254 - Making Classes Look More Like Types - van Rossum This PEP was intended to describe changes to the classic class\r\nimplementation that would take it closer to new-style classes.  I\r\nhaven't made a start with this work, and I think maybe it's not\r\nnecessary -- the classic clas simplementation may as well remain\r\nexactly the way it is, until it is simply dropped in Python 3000.\r\nSomewhere along the way, when we believe that most users are using\r\nnew-style classes anyway, we should add warnings for uses of old-style\r\nclasses.  The PEP could be used to describe the timeframe for these\r\nwarnings.  But before then, we should first make sure that the entire\r\nstandard library (and the demos and tools) use new-style classes.  And\r\nthat's not even going to happen in Python 2.3.  Also, that may break\r\nuser code that subclasses a particular standard class, e.g. if a user\r\ndefines a subclass that depends on coercions, which aren't supported\r\nby new-style classes. PEP 256 - Docstring Processing System Framework - Goodger PEP 257 - Docstring Conventions - Goodger, van Rossum PEP 258 - DPS Generic Implementation Details - Goodger I'll discuss these together.  I believe David Goodger is doing good\r\nwork, and I still see frequent posts by him in the doc-sig.  But I\r\nhaven't been following this work at all.  Since this doesn't affect\r\nthe language, just a convention, I'm not particularly concerned about\r\nthis. PEP 262 - Database of Installed Python Packages - Kuchling I think this was a distutils Py-in-the-sky project?  Maybe someone\r\nshould just implement this; I have no issues with that, but I don't\r\nparticularly feel the need myself. PEP 263 - Defining Python Source Code Encodings - Lemburg This one is very close to being checked in.  Martin and Marc-Andre are\r\nhashing out the implementation.  When they are ready, I think I'll\r\njust approve it.  There was some serious opposition by an outside\r\nexpert, Stephen Turnbull, who wants us to define the language pure\r\nin terms of UTF-8, and implement encodings as site-specific (?)\r\nhooks.  But nobody agreed with him, and I've responded myself saying\r\nthat I think it's best to do it MAL's way. PEP 265 - Sorting Dictionaries by Value - Griffin This is a small idea that's very important to its proposer, but that\r\nIMO attempts to solve a problem that is better solved in some other\r\nway, e.g. by teaching newbies the correct algorithm/idiom.  I note\r\nthat the PEP uses sloppy language, e.g. it talks about \"sorting a\r\ndictionary\" while the dictionary itself is never sorted -- the PEP\r\nonly proposes methods that return the items or keys in sorted order. The PEP also suffers from lack of definiteness: it proposes a whole\r\nslew of alternatives frowm which I guess I am supposed to pick the one\r\nI like best.  Making me the bad guy again. :-) Finally, the proposed \"reversed=<bool>\" optional argument seems\r\nutterly application-specific. I would like to reject this because it doesn't solve a general enough\r\nproblem in a general enough way, it just clutters the dictionary API.\r\nI'd rather add dict.popitem(key). PEP 266 - Optimizing Global Variable/Attribute Access  Montanaro PEP 267 - Optimized Access to Module Namespaces - Hylton PEP 280 - Optimizing access to globals - van Rossum These three should be considered together; at most one of them can be\r\nimplemented (or maybe a hybrid).  I would like one of them to be\r\nimplemented eventually, because I think it may have a big performance\r\nbenefit: not only avoiding dict lookups for globals and builtins, but\r\nalso recognizing certain builtins in the parser and generating code\r\nthat knows what the built-in does, like an opcode for len(x) and\r\nspecial code for \"for i in range(x, y, z)\". I think that Montanaro's proposal is too complex.  I like Hylton's\r\nversion about as well as my own; his version has some optional\r\nfeatures (like support for attributes of globals denoting\r\n\"module.attribute\") that I think aren't worth the added complexity. At the last PythonLabs meeting, we decided to do something much less\r\nambitious first, and see if there's time before 2.3 to do more after\r\nthat is done.  The less ambitious thing is to refactor the compiler,\r\nusing a much more appropriate abstract parse tree, and introducing\r\nexplicit multiple passes.  I predict that this alone is already barely\r\ndoable in the time left before 2.3 beta1 (July 17). PEP 268 - Extended HTTP functionality and WebDAV - Stein I'm all for this, but it's library development work, and I'm not going\r\nto do it. It seems the author has dropped the ball, and nobody has picked it up.\r\nThere's an actual prototype checked into the sandbox/Lib directory\r\n(strange name), from September 2001; maybe we should beat up the\r\nauthor to finish the work, or ask what he's waiting for. PEP 269 - Pgen Module for Python - Riehl I know Martin von Loewis doesn't like this (on account of its lack of\r\ngenerality, e.g. there's no way to change the lexer beyond defining\r\nthe set of reserved words), but I think it might be somewhat useful\r\nfor people experimenting with Python-like languages (e.g. Python\r\npreprocessors that add new keywords and syntax).  Since pgen is pretty\r\ntightly bound to the Python distribution, it makes sense that an\r\nextension making pgen available to the Python programmer should also\r\nbe in the Python distribution. So, we should ask the author if he's planning to implement it.  If\r\nnot, it should probably be dropped for lack of interest. PEP 270 - uniq method for list objects - Petrone Same story as for PEP 265.  As the battling cookbook entries on this\r\ntopic prove, this is a lot harder to do in full generality than it\r\nseems.  The PEP is unfinished: it doesn't even specify the required\r\nsemantics!  And why isn't the author's implementation included, if\r\nit's only 20 lines? I propose to reject this, to save the author work (he should still\r\nreveal his implementation). PEP 273 - Import Modules from Zip Archives - Ahlstrom I like this concept.  I haven't studied the PEP or the proposed\r\nimplementation in detail, so I don't know if it always does the right\r\nthing.  I hope that it will make it into 2.3. PEP 274 - Dict Comprehensions - Warsaw If we were to adopt dict comprehensions, this PEP says everything\r\nthat needs to be said.  But I don't even want to think about this for\r\nPython 2.3; I think it's way too minor a feature. This would be a lot easier to adopt if there was a working\r\nimplementation in patch form. Sometimes it would be nice if things like this could be defined using\r\nhygienic macros or some other kind of preprocessor or whatever, and\r\nimported from a module, rather than requiring major hacking in the\r\nparser, the bytecode compiler, and the virtual machine. PEP 275 - Switching on Multiple Values - Lemburg I'm still not convinced that we need a switch statement, and the\r\nproposed syntax has problems: e.g. why only constants? why not allow\r\nranges?  In addition, it proposes many different alternatives without\r\npicking one. The first alternative proposed by the PEP, however, doesn't add any\r\nnew syntax but simply proposes that the parser recognizes a certain\r\ncommon pattern and generates better code for it.  I'm all for that,\r\nprovided it can be shown that the generated code is either\r\nsignificantly faster, significantly smaller, or both.  This\r\nproject would probably a lot easier after the compiler refactoring\r\nproposed above in the comments for PEPs 266, 267, 280. PEP 276 - Simple Iterator for ints - Althoff I made the mistake of telling the author that I found this butt-ugly.\r\nWhatever the words, I do think it flies in the face of being Pythonic.\r\nTo me: for i in 12:\r\n        print i just doesn't look right.  Maybe for i in len(L):\r\n        print i, L[i] is attractive, but somehow I just don't think this is the right\r\nsolution. PEP 277 - Unicode file name support for Windows NT - Hodgson I don't know the status of this, but I believe this is already\r\nimplemented or at least close to being implemented?  Is it\r\ncontroversial amongst the Germans? PEP 278 - Universal Newline Support - Jansen I've sent Jack a bunch of devil's advocate questions.  The issue is\r\nreal, and I'd like to see it solved, but I'm wary that this is too\r\nmuch of a hack.  Here's the list: What on earth is a source() call? Why not support setting the delimiter for output files too? The 't' mode conflicts with the use of this mode on Windows to be an\r\n  explicit way to invoke the default text translation mode. Why can't 't' be used together with '+'?  Text mode on Windows\r\n  supports '+' AFAIK. How does this interact with xreadlines?  With \"for line in file\" ? Why settle for a compile-time option that's off by default?  That's\r\n  asking for problems; people who turn it on will write code that uses\r\n  the 't' mode and then find that it's not portable. You say that 't' mode is used by import.  What about parsing source\r\n  code from a string?  What about Unicode strings? I think I need more clarification of your remark about locks.  If\r\n  the implementation can be abused to create core dumps, I'm not for\r\n  it. PEP 279 - Enhanced Generators - Hettinger March 28, 2002: The author took my advice and removed the\r\nrestartable iterators idea, which I had called evil in a previous\r\ncomment.  Here are my current comments: New builtin: indexed() I like the idea of having some way to iterate over a sequence and\r\n   its index set in parallel.  It's fine for this to be a builtin. I don't like the name \"indexed\"; adjectives do not make good\r\n   function names.  Maybe iterindexed()? I don't like the start and stop arguments.  If I saw code like for i, j in iterindexed(\"abcdefghij\", 5, 10): print i, j I would expect it to print 5 f\r\n     6 g\r\n     7 h\r\n     8 i\r\n     9 j while the spec in the PEP would print 5 a\r\n     6 b\r\n     7 c\r\n     8 d\r\n     9 e Very confusing.  I propose to remove the start/stop arguments, or change the spec to: def iterindexed(sequence, start=0, stop=None):\r\n         i = start\r\n         while stop is None or i < stop:\r\n             try:\r\n                 item = sequence[i]\r\n             except IndexError:\r\n                 break\r\n             yield (i, item)\r\n             i += 1 This reduces the validity to only sequences (as opposed to all\r\n   iterable collections), but has the advantage of making\r\n   iterindexed(x, i, j) iterate over x[i:j] while reporting the index\r\n   sequence range(i, j) -- not so easy otherwise. The simplified version is still attractive because it allows\r\n   arbitrary iterators to be passed in: def iterindexed(collection):\r\n       i = 0\r\n       it = iter(collection)\r\n       while 1:\r\n         yield (i, it.next())\r\n         i += 1 Generator comprehensions I don't think it's worth the trouble.  I expect it will take a lot\r\n   of work to hack it into the code generator: it has to create a\r\n   separate code object in order to be a generator.  List\r\n   comprehensions are inlined, so I expect that the generator\r\n   comprehension code generator can't share much with the list\r\n   comprehension code generator.  And this for something that's not\r\n   that common and easily done by writing a 2-line helper function.\r\n   IOW the ROI isn't high enough. Generator exception passing This is where the PEP seems weakest.  There's no real motivation\r\n   (\"This is a true deficiency\" doesn't count :-).  There's no hint as\r\n   to how it should be implemented.  The example has a \"return log\"\r\n   statement in the generator body which is currently illegal, and I\r\n   can't figure out to where this value would be returned.  The\r\n   example looks like it doesn't need a generator, and if it did, it\r\n   would be easy to stop the generator by setting a global \"please\r\n   stop\" flag and calling next() once more.  (If you don't like\r\n   globals, make the generator a method of a class and make the stop\r\n   flag an instance variable.) PEP 281 - Loop Counter Iteration with range and xrange Hetland An alternative to irange() from PEP 212 (which is in the rejected\r\npile, but doesn't have text explaining why it was rejected).  As long\r\nas we're going to introduce a notation FOO(sequence) that returns a\r\n(lazy or otherwise) version of range(0,len(sequence)), I think using\r\nFOO==range is more confusing than anything else.  IOW if we have to do\r\nthis, invent a new name for it. PEP 282 - A Logging System - Mick I asked for this, and haven't even looked at it.  But I like it\r\nalready!  I hope this can be implemented in 2.3. PEP 284 - Integer for-loops - Eppstein, Ewing Yet another way to address the fact that some people find for i in range(10): too ugly.  My main gripe with this one is that for 0 <= i < 10: puts the index variable in the middle, rather than right after the for\r\nkeyword.  And in the case where the lower bound is a variable, this is\r\nconfusing for the casual reader: for i <= j < k: looks similar to for i in j, k: but in one case the loop counter is j, in the other case it is i. The good thing about this PEP is that it quotes and comments on all\r\nthe previous PEPs that have attempted to solve this issue (204, 212,\r\n276, and 281). I think that the current parser generator will have to be abused\r\nseverely to allow the two syntactic alternatives for <target_list> in <expression_list> and for <expression> <comparison> <target> <comparison> <expression> because a <target_list> can start with <expression> <comparison>. Closing Remarks Whew!  That's all.  Well, there are a few PEPs in the abandoned\r\ncategory that might deserve a comment, but I'll wait until someone\r\nwants to revive them.  We should definitely make a clearer distinction\r\nbetween rejected and deferred PEPs.  And no rejected PEP should be\r\nwithout an explanation for the rejection. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Parade of the PEPs", "Parade of the PEPs", "- Small Feature Requests - Hylton", "- 2.0 Batteries Included - Zadka", "- Adding Multidimensional Arrays - Barrett, Oliphant", "- String Interpolation - Yee", "- Docstring Format - Zadka", "- Reworking Python's Numeric Model - Zadka, van Rossum", "- Unifying Long Integers and Integers - Zadka, van Rossum", "- Adding a Rational Type to Python - Zadka", "- Adding a Rational Literal to Python - Zadka", "- Numeric Kinds - Dubois", "- Module Repository Upload Mechanism - Reifschneider", "- Python Interface Syntax - Pelletier", "- Object Adaptation - Evans", "- Making Classes Look More Like Types - van Rossum", "- Docstring Processing System Framework - Goodger", "- Docstring Conventions - Goodger, van Rossum", "- DPS Generic Implementation Details - Goodger", "- Database of Installed Python Packages - Kuchling", "- Defining Python Source Code Encodings - Lemburg", "- Sorting Dictionaries by Value - Griffin", "- Optimizing Global Variable/Attribute Access  Montanaro", "- Optimized Access to Module Namespaces - Hylton", "- Optimizing access to globals - van Rossum", "- Extended HTTP functionality and WebDAV - Stein", "- Pgen Module for Python - Riehl", "- uniq method for list objects - Petrone", "- Import Modules from Zip Archives - Ahlstrom", "- Dict Comprehensions - Warsaw", "- Switching on Multiple Values - Lemburg", "- Simple Iterator for ints - Althoff", "- Unicode file name support for Windows NT - Hodgson", "- Universal Newline Support - Jansen", "- Enhanced Generators - Hettinger", "- Loop Counter Iteration with range and xrange Hetland", "- A Logging System - Mick", "- Integer for-loops - Eppstein, Ewing", "Closing Remarks", "The PSF"]}
{"url": "https://www.python.org/doc/essays/cp4e/", "title": "Computer Programming for Everybody | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Computer Programming for Everybody Computer Programming for Everybody This is the text of a revised funding proposal that we sent to\r\nDARPA in August 1999.  In March, we heard that at least an earlier version of the proposal was\r\naccepted by DARPA; the work has begun late 1999 and will hopefully\r\nlast two years, although we've only received funding for the first\r\nyear (through October 2000).  We're keeping our fingers crossed for\r\nthe rest. Unfortunately, the move of the Python development team to other\r\nemployers meant that we didn't get to complete the CP4E project at\r\nCNRI. This move was motivated in a large part by the disappointingly\r\nsmall amount of funding that DARPA committed to CP4E. The project is now in limbo; IDLE is still being developed, but we\r\naren't actively pursuing the other goals of CP4E.  Other people are,\r\nhowever; this is generally discussed in the EDU-SIG mailing list. Note: I have made one change to the text of the\r\nproposal: At the request of some supporters of other languages, I've\r\nwithdrawn a language comparison chart that contained highly personal\r\nand sometimes unfounded opinions of other languages.  The table was\r\nbeing used out of context in a way that some found objectionable.\r\n(Not all of the table is disputed, but it seems wiser not to engage in\r\ndirect language comparisons without a lot more\r\ndocumentation.) I've also removed some administrative details from the text and\r\nmade some minor changes to accommodate HTML.  I apologize for the\r\nwriting style, which is at times more representative of funding\r\nproposals than most of the prose I write.  I would like to thank\r\nJeremy Hylton, Barry Warsaw, Al Vezza, Bob Kahn, Randy Pausch and\r\nDavid Beazley for contributions and suggestions that made this a\r\nsuccessful proposal. -- Guido van\r\nRossum More resources are listed on the pages below: Python in Education Special Interest Group (EDU-SIG) IDLE - Python's own Interactive DeveLopment Environment DARPA proposal - where it all started Discussion of CP4E on Ward Cunningham's original Wiki. Computer Programming for Everybody (Revised Proposal) A Scouting Expedition for the Programmers\r\nof Tomorrow Corporation for National Research Initiatives July 1999 CNRI Proposal # 90120-1a PI: Guido van Rossum Point of Contact: Guido van Rossum Corporation for National Research Initiatives 1895 Preston White Drive, Suite 100 Reston, VA 20191-5434 Tel: (703) 620-8990 Fax: (703) 620-0913 Email: guido@cnri.reston.va.us Innovative\r\nClaims In the seventies, Xerox PARC asked: \"Can we have a computer on every\r\ndesk?\" We now know this is possible, but those computers haven't necessarily\r\nempowered their users. Today's computers are often inflexible: the average\r\ncomputer user can typically only change a limited set of options configurable\r\nvia a \"wizard\" (a lofty word for a canned dialog), and is dependent on\r\nexpert programmers for everything else. We ask a follow-up question: \"What will happen if users can program\r\ntheir own computer?\" We're looking forward to a future where every computer\r\nuser will be able to \"open the hood\" of their computer and make improvements\r\nto the applications inside. We believe that this will eventually change\r\nthe nature of software and software development tools fundamentally. We compare mass ability to read and write software with mass literacy,\r\nand predict equally pervasive changes to society. Hardware is now sufficiently\r\nfast and cheap to make mass computer education possible: the next big change\r\nwill happen when most computer users have the knowledge and power to create\r\nand modify software. The open source movement claims that peer review of software by thousands\r\ncan greatly improve the quality of software. The success of Linux shows\r\nthe value of this claim. We believe that the next step, having millions\r\n(or billions) of programmers, will cause a change of a different quality--the\r\nabundant availability of personalized software. The tools needed for this new way to look at programming will be different\r\nfrom the tools currently available to professional programmers. We intend\r\nto greatly improve both the training material and the development tools\r\navailable. For example, non-professional programmers should not have to\r\nfear that a small mistake might destroy their work or render their computer\r\nunusable. They also need better tools to help them understand the structure\r\nof a program, whether explicit or implied in the source code. Our plan has three components: Develop a new computing curriculum suitable for high school and college\r\nstudents. Create better, easier to use tools for program development and analysis. Build a user community around all of the above, encouraging feedback and\r\nself-help. These components come together in the scientific exploration of the role\r\nof programming in next generation computing environments. We intend to start with Python, a language designed for rapid development.\r\nWe believe that Python makes a great first language to learn: Unlike languages\r\ndesigned specifically for beginners, Python is also the choice of many\r\nprogramming professionals. It has an active, growing user community which\r\nhas already expressed much interest in this proposal, and we expect that\r\nthis will be a fertile first deployment ground for the teaching materials\r\nand tools we propose to create. During the course of the research we will\r\nevaluate Python and propose improvements or alternatives. Rationale CNRI proposes to undertake a research effort\r\ncalled Computer Programming for Everybody (CP4E). This effort intends\r\nto improve the state of the art of computer use, not by introducing new\r\nhardware, nor even (primarily) through new software, but simply by empowering\r\nall users to be computer programmers. Recent developments in computer and communication hardware have given\r\nmany people access to powerful computers, in the form of desktops, laptops,\r\nand embedded systems. It is time to give these users more control over\r\ntheir computers through education and supporting software. If users have\r\na general understanding of computers at the level of software design and\r\nimplementation, this will cause a massive surge in productivity and creativity,\r\nwith a far-ranging impact that can barely be anticipated or imagined. On a shorter term, the quantity and quality of available computer software\r\nwill improve drastically, as the imagination and labor of millions is applied\r\nto the problem. Inventive users will be able to improve the software that\r\nsupports them in their tasks, and share their improvements with their colleagues\r\nor--via the Internet--with others far away who are faced with the same tasks\r\nand problems. The ability to modify or customize software is important\r\nin crisis situations, when experts cannot be appealed to for help. It is\r\nalso important for day-to-day activities: The number of unfilled programming\r\njobs is currently estimated by some at 200,000 to 400,000. Research\r\nGoals The two major research goals are the development of a prototype of a\r\nnew programming curriculum and matching prototype software comprising\r\na highly user-friendly programming environment. We envision that\r\nthe typical target audience will consist of high school and (non-CS major)\r\nundergraduate college students, although younger students and adults will\r\nalso be considered. Course and software will normally be used together,\r\nso they should be tightly tuned to each other; each will also be usable\r\non its own. We will also explore the role of programming in the future. We are rapidly\r\nentering an age where information appliances, wearable computers, and deeply\r\nnetworked, embedded CPUs in everyday objects offer users control over their\r\nphysical and information environments. End-user programmability will be\r\nthe key to unlocking the potential of these technologies. (This is a common\r\ntheme of DARPA's Information Technology Expeditions, cf. [Dertouzos].) The research effort will not be done in isolation. We will engage academic\r\nresearch groups as well as several leading high schools. We will also build\r\na larger community by making our course materials and software freely available\r\non the Internet. We plan to start by basing both components on Python, a popular free\r\ninterpreted object-oriented language [Python] [Lutz] [Watters]. Originally\r\ndeveloped at CWI in Amsterdam, Python is currently being developed and\r\nmaintained by CNRI. Python is extremely suitable for teaching purposes,\r\nwithout being a \"toy\" language: it is very popular with computer professionals\r\nas a rapid application development language. Python combines elements from\r\nseveral major programming paradigms (procedural, functional and object-oriented)\r\nwith an elegant syntax that is easy on the eyes and easy to learn and use.\r\nWhile we believe that Python is a good starting point, undoubtedly we will\r\nlearn that improvements are possible. As part of our research, we will\r\nevaluate the effectiveness of Python for education and use by beginners,\r\nand design improvements or alternatives. We expect that the fruits of our research will be demonstrable within\r\ntwo years and can impact society as a whole within a decade. This is the\r\npoint when children who learn computer programming using our course in\r\nhigh school will start joining the work force (and the military). We expect\r\nthe new mobile and embedded computing and communication technologies mentioned\r\nabove to reach maturity around the same time. Thus, our timelines are nicely\r\nmatched. Motivation In the dark ages, only those with power or great wealth (and selected\r\nexperts) possessed reading and writing skills or the ability to acquire\r\nthem. It can be argued that literacy of the general population (while still\r\nnot 100%), together with the invention of printing technology, has been\r\none of the most emancipatory forces of modern history. We have only recently entered the information age, and it is expected\r\nthat computer and communication technology will soon replace printing as\r\nthe dominant form of information distribution technology. About half of\r\nall US households already own at least one personal computer, and this\r\nnumber is still growing. However, while many people nowadays use a computer, few of them are\r\ncomputer programmers. Non-programmers aren't really \"empowered\" in how\r\nthey can use their computer: they are confined to using applications in\r\nways that \"programmers\" have determined for them. One doesn't need to be\r\na visionary to see the limitations here. An even more radical change is the introduction of computing and communications\r\nembedded in home and office systems. The number of devices that will contain\r\nprogrammable elements is expected to grow dramatically in the coming years.\r\nWe must learn how to expose this programmability to users in a meaningful\r\nway and to make it easy for non-programmers to control and program these\r\ndevices. In this \"expedition into the future,\" we want to explore the notion\r\nthat virtually everybody can obtain some level of computer programming\r\nskills in school, just as they can learn how to read and write. There are many challenges for programming languages and environments\r\nto be used by a mass audience. If everybody is a programmer, poor programmers\r\nwill surely abound. Coping with this situation adequately requires a rethinking\r\nof the fundamental properties of programming languages and development\r\ntools. Yet, we believe that there should be no clear-cut distinction between\r\ntools used by professionals and tools used for education--just as professional\r\nwriters use the same language and alphabet as their readers! Given the ever more pervasive use of computers and software in every\r\naspect of society, we expect the need for programming skills will only\r\nincrease. While most quality software will be produced by professionals,\r\nthere will be a need for more programming and customizability by end users. Examples of this drive for flexibility can be seen in both present-day\r\ncomputing and its likely future: Increasingly powerful applications for desktop and laptop computers use\r\nscripting and macro facilities. Growth of the Internet has led directly to greater need for programmability\r\nto create active and interactive Web content. End-user information appliances and networks of CPUs embedded in everyday\r\nobjects--both will demand user control and personalization. Mobile and intelligent software agents will be commonplace and require\r\ncustomization by users. Our\r\nVision In the future, we envision that computer programming will be taught\r\nin elementary school, just like reading, writing and arithmetic. We really\r\nmean computer programming --not just computer use (which is already\r\nbeing taught). The Logo project [Papert][Logo], for example, has shown\r\nthat young children can benefit from a computing education. Of course,\r\nmost children won't grow up to be skilled application developers, just\r\nas most people don't become professional authors--but reading and writing\r\nskills are useful for everyone, and so (in our vision) will be general\r\nprogramming skills. For the time being, we set our goals a bit less ambitious.\r\nWe focus on teaching programming to high school and (non-CS major) college\r\nundergraduates. If we are successful here, we expect that the lower grades\r\nwill soon follow, within their limitations. In addition to the goal of teaching how computers work, a course in\r\ncomputer programming will return to the curriculum an emphasis on logical\r\nthought which was once the main benefit of teaching geometry. Two general computing trends of particular interest are the move towards\r\ninformation appliances and the growth of embedded CPUs in everyday machines\r\nand appliances--whether in the military or the civilian sector. The decreasing\r\nsize of computing and the increasing reach of networking, particularly\r\nwireless networking, make it possible to share information between devices\r\nand to interact with them. The ability to program will greatly improve\r\nusers' ability to control these devices. Imagine that users could make\r\ntheir own changes to the software embedded in, say, their GPS receiver\r\nor handheld organizer, rather than (or in addition to) downloading upgrades\r\nfrom a vendor or buying \"canned\" add-on applications from third parties.\r\nThis would greatly empower people to improve their life by programming\r\ntheir personal tools to do exactly what they need them to do. If we are successful, non-experts will be able use their computers and\r\nother intelligent devices much more effectively, reducing their level of\r\nfrustration and increasing their productivity and work satisfaction. (New\r\nleisure possibilities will undoubtedly ensue as well!) Computer users will\r\nbe able to solve their own computer problems more often, reducing the need\r\nfor technical support. Even if most users do not program regularly, a familiarity with programming\r\nand the structure of software will make them more effective users of computers.\r\nFor example, when something goes wrong, they will be able to make a better\r\nmental model of the likely failure, which will allow them to fix or work\r\naround the problem. They will also be able to assess better when they can\r\nmake the changes themselves and when they will need the services of an\r\nexpert. They will be more able to converse with experts, since they will\r\nnow share more of a common language. An analogy is obtaining basic literacy\r\nin automotive maintenance: you know enough to check your oil and add a\r\nfew quarts if necessary, but you also know that you shouldn't try to change\r\nyour own brakes. When the mechanic says \"your rotors are warped and you\r\nneed new pads,\" you understand what he is talking about. If this effort is successful, there could be many millions, eventually\r\nbillions of computer programmers, at various levels of proficiency. The\r\neffects this will have on the state of the art of software development\r\nis hard to imagine. The nature of software will change to accommodate the\r\nneeds of these programmers, allowing customization through source code\r\nmodifications--and personalizations will be plentiful. The effort could also have a major impact on getting women and minorities\r\ninto computer programming--currently, these groups are vastly underrepresented. The recently popular open source movement [OpenSource] is promising\r\nto improve the quality of key software packages through the peer review\r\nof thousands, as well as the ability for programmers to \"scratch their\r\nown itch\" (i.e., tweak the software in a minor way that only one individual\r\ncares about). We expect that moving from thousands to millions or billions\r\nof programmers will further change the nature of the software development\r\nprocess. Personal programming will become more important (and feasible)\r\nat this scale, while mass peer review will become relatively less important,\r\ndue to diminished returns (the logistics of integrating bug fixes from\r\nthousands of sources is already a formidable task). But most current software,\r\nopen source or otherwise, is too complex to allow anyone to do personal\r\ncustomization without first investing a serious amount of effort and time\r\ninto understanding the software they're using. We are interested in changes\r\nto the whole software development process that will fix this as well--in\r\nparticular, development tools. In\r\naddition, by enabling the programmability of applications by anybody, we\r\nwill leverage economies of scale without sacrificing the desire of users\r\nfor highly personalized software. Applications can be mass-produced, without\r\nforcing everyone to fit the same mold in their use of the software (or\r\ninto just those eddies of customizability planned by the developers). Users\r\nwill want to personalize their systems for a number of reasons; these include\r\nbecoming more productive, solving a problem peculiar to their needs, or\r\njust expressing their creativity and setting themselves apart from their\r\npeers. They will be able to achieve this if they have the basic programming\r\nliteracy we envision. Challenges Some broad questions help frame our specific research goals, such as:\r\nWill the programming language taught in schools resemble the programming\r\nlanguages we know today? Will it even be called a programming language?\r\nHow will we teach it? Will there be only one language? What other tools\r\nare essential to the teaching and use of this language? Is it even possible\r\nto have a language and tools that are both good for teaching and useful\r\nfor experts? Just as interesting are questions like these: How and for what purposes\r\nwill people use their programming skills? How will a near-universal ability\r\nto read and write computer programs change the structure and utility of\r\ncomputer software? (This is especially interesting in combination with\r\nfuture versions of the Internet, which promise high-speed ubiquitous access\r\nto computing and storage elements.) Will people be motivated to actually\r\nprogram their systems once they have the confidence that they can? Will\r\nthey even be interested in the first place? A clear concern is the expectation that, if most people are programmers,\r\nmany of them will most likely be poor programmers. People who can't\r\nwrite understandable sentences in their native tongue or balance their\r\ncheckbook are unlikely to write well-structured computer programs! Our\r\nintent, however, is to make programming accessible, if not easy, for everyone.\r\nSome users will employ or contract a third party programming and customization\r\nservice. This is much like a homeowner contracting out for a remodeling\r\njob. We therefore need to investigate ways to improve the quality of the\r\ninteraction between the programmer and the system, to help even poor programmers\r\nget the most out of their computers. For example, you might want to write\r\na program to customize your PDA or toaster, but you might be discouraged\r\nif a small mistake could wipe out your address book or set your house on\r\nfire. Safeguards against disasters are needed, as well as ways of backing\r\nout of unwanted changes to a system as a whole. (\"Undo\", while very powerful,\r\nusually only applies to one file at a time. Backing out of unwanted global\r\nsystem changes typically requires a reboot or even painful data restoration\r\nfrom back-up media.) Another concern regards configuration management. Without superior configuration\r\nmanagement, businesses are going to find themselves either unable to correct\r\nproblems, or held hostage by programmers who have modified the operating\r\nsystem or applications in a manner that precludes either upgrading or making\r\nother changes. In general, all locally made changes to large software systems\r\nare currently in danger of being incompatible with future upgrades of the\r\nprimary product. Even locally produced software may be rendered unusable\r\nwhen the primary developer leaves, due to a number of reasons including\r\nlack of testing or documentation. Apart from the fear that something might go wrong, another concern for\r\nbeginning programmers who are interested in customizing their computer\r\nis the daunting task of trying to understand a large piece of existing\r\nsoftware. We need to look into user-friendly tools for program analysis;\r\nmore about this later. Another intellectual challenge is visualization\r\nof (application-generated) data in ways that help novices. Spreadsheets\r\nare of great value here, but not all data fits the matrix form. Scripting languages are growing in popularity among professional programmers\r\n[Ousterhout], but questions remain about performance, software reuse, and\r\nintegration with components written in other languages. We can address\r\nthese challenges by enhancing the facilities of JPython [Hugunin1], a Python\r\ndialect seamlessly integrated with Java, and SWIG, an interface generator\r\nthat creates interfaces between scripting languages and systems languages\r\nlike C or C++. Why\r\nTeach a \"General\" Programming Language? It is well understood that there is something of a dichotomy between\r\n\"general\" programming languages on the one hand and \"domain-specific\" languages\r\non the other. For this discussion, we use the term \"general\" in a broad\r\nand loose sense, to include functional programming languages and possibly\r\neven logic programming languages, to the extent to which they are usable\r\nas a general programming tool. Turing-completeness is the key concept here. The domain-specific category then contains everything else, from command\r\nline argument syntax to email headers and HTML. The distinguishing factor\r\nhere is the presence of a relatively narrow application domain. In this\r\ncategory we also place things like Microsoft's \"wizards\" (really just sequences\r\nof predefined dialogs connected by simple flow charts) and the controls\r\nand dials on microwave ovens or nuclear reactors. A typical property of domain-specific languages is that they provide\r\nexcellent control in the application domain for which they were intended,\r\nand (almost) no freedom in unanticipated areas. For example, HTML has no\r\ninherent ability for conditional inclusion of text, or for variable expansion.\r\n(The fact that such features have been added many times as incompatible\r\nextensions merely proves this point.) General languages, on the other hand, usually aren't as good in any\r\nparticular domain. For example, it is much harder to write a program in\r\na general language to format a paragraph of text than it is in HTML. However,\r\ngeneral languages make up for this through their Turing-completeness, which\r\nmakes it possible to solve any problem that might come up (assuming\r\navailability of sufficient resources). General languages are therefore\r\nideal when used in combination with domain-specific languages. For example, if cell phones were programmable, one would still use the\r\nregular domain-specific interface (the keypad) to dial a specific number,\r\nsince that's the most convenient way to access that specific functionality.\r\nHowever, without programmability, there is no way to make it try several\r\ndifferent numbers for a particular friend until one is answered, unless\r\nthe cell phone vendor anticipated this particular feature. Why\r\nStart with Python? We propose to start by making it possible to teach programming in Python,\r\nan existing scripting language, and to focus on creating a new development\r\nenvironment and teaching materials for it. We have anecdotal evidence that\r\nPython is a good language to teach as a first programming language. Our\r\neffort will focus on creating tools and educational materials for this\r\npurpose and on fostering a community around those materials. This will\r\nallow us to study in what ways Python is a good (or bad) language for teaching,\r\nand instigate directions for future development. Why start with an existing language? Our experience indicates that the\r\ndesign and implementation of a new language takes years--and that this work\r\nmust be (nearly) completed before a user-friendly development environment\r\nand teaching materials can be created. So we jump-start our project by\r\nusing an existing language. Depending on user feedback, we may make changes\r\nto Python or design a new language altogether during the project. We already have some evidence of where changes might be necessary. Prof.\r\nRandy Pausch at Carnegie Mellon University (see below) has conducted some\r\nusability studies of Python within their limited problem domain. Their\r\nusers seemed most confused by the case sensitivity of Python's variable\r\nnames and by the truncation of integer division. More extensive and generalized\r\nstudies will serve to drive specific changes to Python, or indicate the\r\nneed for a newly designed language. Python is a good language for teaching absolute beginners. It derives\r\nmany of its critical features from ABC, a language that was designed specifically\r\nfor teaching programming to non-experts [ABC] [Geurts]. The Python community\r\nhas seen many reports from individuals who taught their children programming\r\nusing Python. The consensus from these reports is that the language itself\r\nis well suited for this purpose--unlike, for example, C++, Java, Perl, Tcl,\r\nor Visual Basic, which are too cluttered with idiosyncrasies. Table 1 on the next page is a (highly subjective) chart comparing a\r\nfew relevant aspects of Python to some other languages. From this table\r\n(and our experience), we conclude that Python is a good first choice for teaching which also serves well as a language for more serious application\r\ndevelopment. Unlike other languages proposed for teaching to novices (e.g.\r\nLogo, LogoMation, even Python's ancestor ABC), Python isn't just a teaching language. It is suitable for developing large real applications,\r\nas shown by projects here at CNRI [Knowbots] [Mailman] as well as elsewhere.\r\nFor example, Industrial Light and Magic has converted its entire tool base\r\nto Python and considers this an advantage over the competition. Moreover, Python is extensible by modules written in other languages\r\n(e.g. C, C++, or Java), to mediate access to advanced functionality that\r\nis not easily accessible from Python directly (for example, high-speed\r\n3-D computer graphics packages). While we don't expect students to write\r\nthese extension modules, the use of such modules makes it possible\r\nto spruce up their learning experience greatly. This extensibility gives\r\nteachers an opportunity to tailor lessons to the interests of their students\r\nby providing them with guarded access to other software packages. The fact that Python can be used to develop large applications plays\r\ninto a different aspect of our vision, namely the development of open source\r\napplication software that can be tailored by users who are not expert programmers,\r\nbut have learned some programming skills. Although this is not the focus\r\nof our effort here, we hope that we will see at least some initiatives\r\ntowards this goal, and we will encourage companies and organizations wishing\r\nto take steps in this direction. We expect that the existence of JPython\r\nwill be an important enabling factor here. Python's programming environment and documentation are less than ideal\r\nfor teaching to novices. In particular, the existing program development\r\ntools and tutorials for Python (there are several of each) all assume that\r\nthe user is a dyed-in-the-wool developer, who knows a suite of external\r\ntools to edit, run and debug programs, and who already knows one or more\r\nother programming languages and their development environments. This currently\r\nstands in the way of more widespread experimentation with Python as a first\r\nprogramming language. Table 1. Language comparison chart (withdrawn) Approach We will create a next-generation programming environment and teaching\r\nmaterials that empower ordinary users to write simple programs and to understand\r\nthe structure and organization of larger programs. We will also explore\r\nhow widespread programming literacy will affect the production and use\r\nof software in a ubiquitous computing environment. Our work is organized into three distinct areas: a new computing curriculum suitable for high school and college students. better, easier to use tools for program development and analysis. a user community formed around the above, encouraging feedback and self-help. As explained before, we will initially use the Python programming language.\r\nThis will get the world ready for the next step. The \"next generation computing\r\nenvironment\" may not use Python, but Python and CP4E are useful experimental\r\nsteps in the right direction. As soon as initial versions of the newly developed course and tools\r\nare released to the community, the feedback channels will be opened. The\r\ninitial feedback will mostly go into improvements of the environment and\r\nteaching materials. This is where the community building begins. Curriculum\r\nDevelopment A key goal of the CP4E effort is the development of a curriculum for\r\nteaching programming literacy to a range of students, from non-computer\r\nscience major undergraduates, down to secondary school and eventually lower-\r\nand middle-school students. The approach for each of these grade levels\r\nmay differ so as to better relate to and reach students as they mature,\r\nbut CP4E strives to provide a unified approach which will grow as the student\r\ngrows, presenting richer and more in-depth topic material along the way.\r\nThe initial effort will focus mainly on high school and undergraduate students. CNRI will develop the basic materials for the curriculum, including\r\nsoftware that will be used in the teaching environments, and tutorial and\r\nintroductory material which may serve as the basis for textbooks on programming.\r\nCNRI will be working closely with educators experienced in producing textbooks\r\nand other teaching materials in order to best tailor these tools for the\r\nintended age groups. Our goal is to take the software environments and tools used by more\r\nexperienced programmers, and produce versions of these that will be useful\r\nin teaching programming skills. We are inspired by the existing Python\r\ninteractive interpreter and by IDLE (a graphical development environment\r\nfor Python), both of which can be used either as productivity tools for\r\nprofessional programmers, or as teaching aides when used in conjunction\r\nwith tutorial material. Our new tools will provide useful functionality\r\nfor novice and experienced programmer alike. New computing\r\ncourse CNRI proposes to work with the University of Chicago to develop a new\r\ncourse in computer science, using Python as the programming language for\r\nall levels of programming instruction. Python is a particularly appropriate\r\nlanguage for this purpose because it is easy to learn, read, and use, yet\r\npowerful enough to illustrate essential aspects of programming languages\r\nand software engineering. Thus even young students could be taught the\r\nbasics of programming using Python, but they would not be limited in their\r\napplication domain as they would be with Logo. The use of Python would\r\nallow each student to explore and progress at their own pace. Especially\r\nexciting is the fact that gifted students would have a powerful programming\r\nlanguage and environment already at their fingertips, should they become\r\nmotivated to learn more, or at a faster pace. The University of Chicago would develop a series of courses that introduce\r\nprogramming and computer concepts to non-computer science students at the\r\nundergraduate and high-school level. Currently, courses at this level tend\r\nto emphasize either programming languages (with a strong mathematical flavor)\r\nor web-programming topics such as HTML and JavaScript. Unfortunately, both\r\nof these approaches have serious limitations. If a course is excessively\r\nformal and mathematical, it may only appeal to computer science majors\r\nand students of a technical mindset. On the other hand, Web-programming\r\ncourses, while capitalizing greatly on the popularity of the Internet,\r\ntend to narrowly focus on specific technologies such as HTML, Perl, or\r\nJavaScript. As a result students learn little about computing within a\r\ngreater context or gain the problem solving skills needed to solve the\r\ncomputational problems of the future. The course to be developed at Chicago will address the aspects of computing\r\nthat we feel everyone must know in order to be a knowledgeable computer\r\nuser: Basic computer organization. Students will learn the basics of how computers\r\nwork and how they are put together. Topics would include Boolean algebra,\r\nlogic, and simple computer architecture (e.g. CPU, memory, I/O). Simply\r\nstated, this is the stuff going on \"under the hood\"--stated in easily understandable\r\nterms. Ultimately, we would hope to demystify computers as much as possible. An introduction to programming. This will introduce different ways people\r\nhave programmed computers. Students will learn about procedural, functional,\r\nand object oriented programming, but in an informal manner. Rather than\r\ntrying to turn students into professional programmers, the goal will be\r\nto introduce students to some of the ways people have tried to simplify\r\nthe use of computers. Software architecture. In the future, it is increasingly likely that computers\r\nwill be programmed largely by assembling existing software components and\r\nwriting a small amount of glue code. In order to make this possible, an\r\nunderstanding of how software is put together will be essential. Student\r\nwill learn about software design and software organization (just what in\r\nthe heck are all those DLL's anyway?). Debugging and problem solving. How to survive when all else fails--without\r\nhaving to call customer support. At all levels of education, it is vitally important that usability studies\r\nfor both the software tools and the textbook material are conducted and\r\nevaluated. This is the only way that such materials and tools will be improved\r\nand tailored for the specific age and experience groups. Usability studies\r\nof the type conducted by Prof. Pausch of CMU will be developed and conducted\r\nat all three levels of teaching. Of course, we will also develop traditional\r\ntests to allow teachers to measure individual students' performance. 3D Game\r\nPlaying We intend to engage in small-scale teaching efforts ourselves, e.g.\r\nat the local high schools listed in the collaboration section, but we don't\r\nexpect that we will be doing much teaching. If our experience with Python's\r\npopularity is any indication, we won't have to: others are eager to participate\r\nin this experiment. The courses will use the new development environment described in the\r\nnext section. As an incentive to make programming more \"fun\", we intend\r\nto connect the development environment to an existing programmable 3-D\r\ngame-playing engine as used in popular computer games. Several such engines\r\nare or will likely become available for use with Python; we will select\r\none and create an interface library for it suitable to our audience. Why use a 3-D game-playing engine? The experiences with Logo show that\r\ngraphics are a good way to catch a younger audience's attention, but its\r\n2-D graphics look somewhat boring compared to the video games teenagers\r\nare familiar with these days. Alice is a good example of an engaging 3-D\r\ngraphics environment. Knowbot\r\nPrograms In addition to using a 3-D game as a testbed,\r\nwe may use CNRI's Knowbot technology [Knowbots] as a motivating application\r\nfor novice programmers. Knowbot programs are independent mobile programs\r\ncapable of migrating between Knowbot \"service stations\" (specially equipped\r\nhosts) throughout the Internet. Service stations provide services to the\r\nKnowbot programs such as search services, digital object repositories,\r\nauction services, etc. Another way of looking at a Knowbot program is as a small component\r\nworking within the larger framework of the service station. A Knowbot program\r\nis a modular, independent program that can be easily written to move around\r\nthe Internet, but which has powerful functionality due to its integration\r\ninto the framework, and its use of the environments it encounters. We will be exploring several ideas on how to use Knowbot programs in\r\nthe teaching curriculum. We imagine cooperative gaming scenarios, where\r\nstudents can create Knowbot programs that exhibit certain behaviors and\r\nmust work together to solve a common problem. This would be a great way\r\nto motivate students from all over the Internet to collaborate. We might envision treasure hunts, where students have to apply the programming\r\nskills they just learned in order to discover and migrate to a service\r\nstation, solve a puzzle at the site, and receive the treasure. We might\r\ndesign distributed virtual simulations, similar to MIT's Virtual Fishtank\r\n[Fishtank], where students can create their own discrete elements of a\r\ncomplex system (e.g. implement a virtual fish in a Knowbot program) and\r\nwatch how their own elements interact with others. Because the Knowbot\r\ntechnology allows for highly distributed, very complex interactions across\r\nthe entire Internet, it gives us a unique platform for experimenting with\r\nrich cooperative learning opportunities. Programming\r\nTools We will design and build a programming environment specifically intended\r\nto support the teaching of programming to users with no previous programming\r\nexperience. Our aim is provide tools to support users when they are learning\r\nprogramming and when they are employing those skills in their homes and\r\noffices. We believe that most ordinary users will employ their programming skills\r\nto customized and extend their computing environment. Rather than writing\r\nnew programs from scratch, most people will add new code to existing programs.\r\nThere are three significant challenges that must be addressed by programming\r\ntools aimed at this audience. First, the environment must significantly ease the burden of writing,\r\ninstalling, and debugging new programs. The current generation of development\r\ntools can be cumbersome for expert users, let alone novices. We must focus\r\ncareful design and usability studies on the development of new programming\r\nenvironments. The second challenge is to provide for the continual evolution and modification\r\nof software artifacts by consumers as well as producers. We will develop\r\ntools to help users understand the structure of large programs so that\r\nthey can identify where to make changes and what impact those changes will\r\nhave. Our tools will also help users manage and configure software, so\r\nthat individual components can be replaced or upgraded over time. These\r\ntools will help users share new and modified programs by automatically\r\ntracking versions and dependencies. The final challenge is to build tools that will be useful in a ubiquitous\r\ncomputing environment. The desktop computing environment will be rapidly\r\novertaken by networks of computer-controlled devices and physical systems.\r\nThis new environment exacerbates problems of installing, debugging, and\r\nmanaging software. It also poses new challenges for system designers to\r\nbuild software that allows end-user customization. This section is organized around these three challenges. The first section\r\ndiscusses the proposed programming environment. The second section discusses\r\nprogram analysis and configuration management tools. The third section\r\ndiscusses application frameworks to support end-user programmability of\r\nubiquitous computing environments. Our approach to this problem will be to look at how traditional programming\r\ntools, such as editors, debuggers, and class browsers, can be augmented\r\nand enhanced by more advanced ways of analyzing, inspecting, and understanding\r\nprograms. Programming\r\nEnvironments The most basic activities of programmers are editing source code, running\r\nthe program to test it, and debugging the program. (Python doesn't have\r\na separate compilation phase.) A programming environment must of course\r\nsupport these activities. We have been developing a portable programming\r\nenvironment for Python named IDLE, which allows the user to execute individual\r\nstatements interactively. It is mostly targeted at experienced programmers,\r\nbut will server as a starting point for an environment for absolute beginners. IDLE only scratches the surface of the kind of programming environment\r\nneeded to help novice programmers. For example, its source code colorization\r\nand indentation features could be replaced by a much more powerful program\r\nchecker which would point out all syntax errors, undefined identifiers,\r\ntype mismatches, and so on, while the user is typing (like a spelling checker).\r\nThe debugger could support retracing execution steps, editing the source\r\ncode of the running program, etc. The program editor could support a flexible\r\nform of template-based editing (the Alice group has very good experiences\r\nwith this in their limited domain). The undo feature, which currently allows\r\nundoing source code changes only, could be extended to undo changes to\r\nthe run-time state of the program or even side-effects to the environment\r\n(within reason--we can't expect to undo printing or the sending of an email\r\nmessage). As an example, the Alice software provides full undo for all\r\nactions involving changes to the 3D world it manages. Two specific areas of work are undo and an extended type checker. \"Undo\" is an extremely important tool for beginners because it is the\r\nprogrammer's first line of defense. Along with version control, auto-save,\r\nand other features, the ability to rollback an unlimited number of near-term\r\nchanges means that the programmer has more leeway to experiment and learn.\r\nHowever, most undo implementations are quite limited in their scope. Our\r\napproach will investigate such concepts as selective and global undo. In\r\na traditional undo system, the editor simply keeps a linked list of changes\r\nto a file, and those changes can be unapplied or reapplied by moving through\r\nthis list (there are variations on this theme, including undo rings, and\r\nundo/redo). One of the problems with traditional undo is where some undesirable\r\nchanges overlap with some desirable changes; the programmer often has to\r\nlose the desirable ones to eliminate the undesirable ones. With selective undo, changes can be localized to a finer granularity.\r\nFor example, suppose a programmer made three changes to function A at the\r\ntop of the file intermingled with four changes to function Z at the bottom\r\nof the file. Now the programmer discovers that function A should never\r\nhave changed; selective undo allows changes to function A to be rolled\r\nback without affecting the changes to function Z. Global undo is similar to what version control provides, where system\r\nlevel changes can be tagged and rolled back when they adversely affect\r\nthe system. Where global undo differs however is that no a-priori decision\r\nhas to be made about tagging. We also plan to enhance the development environment with type-checking\r\ntools that help programmers find mistakes in their code and improve the\r\nperformance of compiled code. Python is a dynamically typed language, like\r\nSmalltalk or Scheme, that relies on extensive runtime checking to ensure\r\nthe correct use of built-in operations. Soft typing [Cartwright] is a mechanism\r\nto statically check programs in dynamically typed languages to detect errors\r\nand eliminate unnecessary runtime checks; the analysis is integrated with\r\nthe programming environment rather than with the language runtime. This\r\nmechanism has been applied to Scheme [Wright][Flanagan]. We will develop\r\na similar type checking mechanism for Python. The key challenges for developing\r\na soft type system for Python are extending the analysis to objects and\r\nmodules and accommodating Python's extremely dynamic execution environment,\r\nwhich allows modification of classes and instances at runtime. Preliminary work at CNRI demonstrated the value of type analysis for\r\nimproving the performance of JPython programs. Hugunin [Hugunin2] demonstrated\r\nperformance improvements of up to three orders of magnitude for JPython. Program\r\nAnalysis and Configuration Management We will augment the basic programming environment with a collection\r\nof tools that aid users in understanding large programs, so that they can\r\ncustomize and modify them, and in managing the installation and configuration\r\nof software, so that they can upgrade the software without destroying their\r\nmodifications. We will also develop and extend tools that build interfaces\r\nbetween low-level software components and scripting languages, which will\r\nenable greater user control over the low-level components. It is important that these program analysis tools, aimed at beginners,\r\nare simple to use, and that they allow grasping the results of the analysis without requiring detailed understanding of how the analysis is done. At the same\r\ntime, we strive for our tools to be powerful enough for experts too--they\r\nshould accommodate increasing expert levels as a user becomes more familiar\r\nwith the tool, and they should be able to handle large programs. An analysis\r\ntool that can effectively be applied to, say, the source code of the Netscape\r\nbrowser, is much more useful than one that only works well for small example\r\nprograms. Our focus on relatively inexperienced programmers requires that our\r\ntools contain excellent visualization modules, which can present the discovered\r\ndesign to the user without causing information overload. For example, current\r\nvisualization tools often lack \"common sense,\" and will mindlessly produce\r\nlarge tree or graph diagrams spanning many pages that consist of endlessly\r\nrepeated similar substructures; this effect causes the user to lose sight\r\nof the forest through the trees. We plan to focus initially on tools that work with Python programs.\r\nHowever, most of the techniques for program analysis that we expect to\r\ndevelop are essentially independent of the language being used. We will\r\nalso investigate the use of tools that cross language boundaries, so that\r\nusers can consider the effects of changes at the scripting level on low-level\r\ncomponents written in C or Java. The program analysis tools will help users understand the gross structure\r\nof programs by identifying the relationships between static program components.\r\nOne example of this kind of analysis tool is Womble, which extracts object\r\nmodels from Java bytecodes [Jackson]. Womble extracts object model directly\r\nfrom source (or object) code, rather than from a formal specification.\r\nBecause this method does not rely on the existence of a formal specification\r\n(such as a UML model), we believe it is more accessible to ordinary users.\r\nA similar approach can be used for analyzing Python programs, although\r\nPython's dynamic typing and \"first class\" functions and classes pose significant\r\nchallenges. We will also investigate program slicing [Tip] and program paths [Ball]\r\nas techniques to help users understand where to make changes and what impact\r\nthose changes will have. Slicing is a well-known technique for identifying\r\nsubsets of programs that affect a particular variable. Analysis via program\r\npaths shows the various possible execution paths through a body of code.\r\nEach technique has value for testing and debugging programs. Two challenges\r\nare to apply these techniques across language boundaries and to identify\r\nabstractions boundaries that are implicit in the code but expressed inexactly\r\nby the type system. Womble, for example, recognizes that Java container\r\nclasses are not an interesting part of an application's object model; it\r\nmerely represents a relationship between the object that uses the container\r\nand the contained objects. Similarly, a program slice could be performed\r\nwith respect to certain abstraction boundaries and aspects of the code.\r\nA program slice that presents the functional aspect of a program without\r\nincluding concurrency-specific code may be useful for understanding the\r\nprogram structure. (Of course, the concurrency-specific code is important\r\nto understand, but may be a separate concern.) A third area of work is one automatic generation of scripting language\r\ninterfaces to low-level code such as C, C++, or Java. The SWIG tool [SWIG],\r\ndeveloped by our collaborator David Beazley (see Collaboration Plans section\r\nbelow), helps users generate scripting language bindings from C and C++.\r\nWe will work to improve and extend SWIG to improve the amount of automatic\r\nprocessing that can be done and to allow greater customization of bindings\r\nby users. We will also enhance SWIG to produce more natural language bindings;\r\nfor example, when strings are passed as function parameters in C programs\r\nthey are typically represented by two variables, a pointer and a length.\r\nThe SWIG bindings should automatically convert between those two C variables\r\nand a single Python string argument. If users are empowered to modify and customize code, they will be challenged\r\nto maintain those changes when the underlying software is upgraded or when\r\nsystem components are replaced. Version control is already a vexing problem\r\nfor software developers, who must ensure that their products are compatible\r\nwith many operating systems and shared libraries. Users will also want\r\nto share their customizations with others - co-workers or friends and relatives.\r\nWe will provide tools to help users maintain and share programs and modifications\r\nto programs. One of the most important issues that our programming tools research\r\nwill address is the burden that user customizability will place on system\r\nconfiguration management. When a user makes a change to an application,\r\nwhat assurances are there that a future update to the application by the\r\nvendor will be compatible with these changes? How does the user himself\r\nkeep track of just what changes they've made to an application? What happens\r\nwhen a future version of the product adds a feature, previously missing,\r\nthat the user has added (in a different form)? Our tools will help users keep track of changes they've made, through\r\nsuccessive revisions, and help users merge their changes back when the\r\nprimary application itself has been modified or updated by the vendor.\r\nA key to this approach is identifying each version of software and a simple\r\nlanguage for describing its properties and dependencies. For example, we\r\nintend to improve version control systems so that they track changes at\r\ndifferent abstraction levels and granularities than current systems, e.g.\r\nlabeling changes based on the features they implement instead of the source\r\nfiles (or parts of files) they modify. The tool will automatically identify\r\ndependencies on other libraries and component. We will investigate ways\r\nto integrate testing frameworks into the configuration management systems\r\nso that when the primary application is upgraded, each feature change a\r\nuser has installed, will be merged and tested. We will also create community-enhancing tools that make it easier to\r\nshare, integrate, and use peer-developed software. Issues to be addressed\r\ninclude dependency management between packages, ease of installation (and\r\nde-installation!), coping with changes to both the operating system, applications,\r\nand libraries, version control, and package maintenance. Software must\r\nbe described and classified, and forums for discussion, feedback, bug reports\r\nand patches (both to the maintainer and from the maintainer) must be established.\r\nOf greatest importance is that these community-building tools must be primarily\r\nmanaged by the community itself; they must be highly distributed, replicated,\r\nand secure. For example, users could share information about compatibility\r\nproblems between various libraries; when coupled with automatic distribution\r\ntools, this information could prevent software upgrades that prevent other\r\napplications from working. There are several existing tools that attempt to address some or all\r\nof these issues. The Comprehensive Perl Archive Network attempts to contain\r\nall the Perl material a Perl programmer would ever need [CPAN]. It is distributed\r\nand replicated, and it makes the job of installing Perl modules easier\r\n(though not always easy enough). It is not, however, very adaptable to\r\nother types of archival material. Within the Python community, the distribution-utilities special interest group is attempting to make the distribution and installation\r\nof third party software easier, but it does not address the wider issues\r\ninvolved, and again, it is narrowly focused on Python software [Distutils].\r\nThe most ambitious related work we are familiar with is the self-updating\r\nsoftware [Liskov] project. Application\r\nFrameworks We will examine the impact of future changes in computing and communications\r\non the way users control computers, and the implications of such developments\r\nas near infinite bandwidth, greater accessibility to much more powerful\r\ncomputers, the ubiquity of computing resources, and a much greater level\r\nof internetworking, even at the micro-device level. These changes affect\r\nboth what kinds of programs users will write and what kinds of computers\r\nthose programs will run on. Our approach in this area will be to work with experimental and prototype\r\nsystems in order to understand how end user programmability should be exposed.\r\nAs these technologies mature, we may incorporate our experiences into teaching\r\nmaterials. Many non-programmers begin writing small programs that are used within\r\nspecific domains and within the contexts of application frameworks. The\r\nspreadsheet is perhaps the best example of programming in a limited context.\r\nIt provides a limited language targeted specifically at manipulating tables\r\nof numerical data. The application provides the coordination framework--managing\r\nthe display, control flow, I/O, etc.--and lets the user concentrate on a\r\nspecific problem. A macro facility, which is one part of a spreadsheet's\r\nprogramming suite, aids the use of many applications, allowing users to\r\nautomate repetitive tasks. A second example can be found in MS Word macros,\r\nwhich are also a common form of user customization. The Internet has exposed many non-professionals to programming, especially\r\nin domain-specific languages like HTML and active content languages like\r\nJavaScript, PHP and CGI. In these situations, too, non-programmers are\r\ntypically creating small programs which fit within the larger context,\r\nfor example, of a Web server which takes care of details such as managing\r\nthe TCP/IP connections to the clients, setting up the environment in which\r\nthe user programs run, handling error situations, and adhering to standard\r\nprotocols. In the future, non-programmers will be using a plethora of information\r\nappliances. One example area where programmability of these devices will\r\nsignificantly improve their usefulness is in the management of information\r\nflow--and perhaps more crucially, the limiting of information flow.\r\nA person may have messages arriving over many media--text, voice, video--and\r\naccess them via many devices such as PDA, mobile phone, and computer screen.\r\nWe expect seamless interoperability, so that for example a mobile phone\r\ncan be used to follow up to an email with a voice response without having\r\nto look up the number. Small programs could be used to customize the interfaces\r\non these devices and to filter and limit the flow of messages through them. Some examples include: Trying several different phone numbers to reach a person, perhaps depending\r\non time of day or day of week. Diverting incoming phone calls to voice mail or email when you do not want\r\nto be disturbed-but still letting important calls through. Lowering the volume on TV or radio when you answer the phone. Recording copies of certain phone calls, perhaps by invoking a speech-to-text\r\nconverter. Limiting the amount of personal information transferred to stores or companies\r\nas part of an e-commerce transaction. Each of these interface features might be accommodated by the designers\r\nof a particular device. However, feature-rich interfaces are harder to\r\nuse, so designers may intentionally limit the interface. It is also likely\r\nthat inventive users will always think of features the designer has overlooked.\r\nAllowing for end user programmability and customization lets the user adapt\r\nthe device to her particular needs. These examples indicate an important pattern in programming scope: users\r\nwill be customizing applications and appliances in the context of the system's\r\ncomputational model and software framework. Thus our expedition will explore\r\nways to modularize applications, and organize these modules so that users\r\ncan add the small bits of functionality they want without having to concern\r\nthemselves with the operation of the system as a whole. One of the key goals of empowering non-programmers to modify and customize\r\nsoftware in the context of application frameworks or embedded devices is\r\nto reduce the cognitive load required to understand how the modification\r\nfits into the larger program. This is true even for experienced programmers\r\nnew to an application's code base. Applications must be modular and provide\r\nsufficient high level abstractions so that their constituent parts can\r\nbe understood quickly and independently. This lets people concentrate primarily\r\non the parts that need to be changed. In our approach we will explore several\r\nideas intended to improve the modularity of software. We intend to look at existing techniques, such as object-oriented programming\r\nand component composition as ways to organize the software. In theory it\r\nis much easier to swap out a black box component for some different functionality,\r\nas long as the interfaces and input/output semantics are maintained. In\r\nreality, it is currently very difficult to write classes and components\r\nthat are independent of the rest of the system. We will also be exploring\r\nnew concepts such as Aspect Oriented Programming [AOP], a new way of modularizing\r\nsoftware based on cross-cutting concerns. Perhaps some combination of these,\r\nor new modularizing techniques will prove effective, for example, by organizing\r\neach function as an aspect of a component. Community\r\nBuilding Besides working with selected partners, we will seek the involvement\r\nof the community at large. We will do this by sharing prototypes of the\r\ndeveloped courses and software through a website, and by soliciting feedback\r\non those materials through a variety of channels such as newsgroups and\r\nmailing lists. CNRI has considerable experience with community involvement\r\nthrough the web and via other means. For example, the key focus for the\r\nPython community is the Python website [Python], which also hosts many\r\nPython-related mailing lists; an important focus for the digital library\r\ncommunity is the D-Lib website [D-Lib]. Both sites are run by CNRI. The\r\nexisting Python community is already showing great interest in the CP4E\r\nproposal, and we expect that this will be the perfect place to bootstrap\r\ncommunity activities specific to the CP4E effort. Such explicit facilities for community involvement will greatly benefit\r\nour research, and allow the community to reap the most benefit from our\r\nresearch. Benefits of early and large-scale community involvement for our\r\nresearch will include: volunteers who help \"test-drive\" our courses and\r\nsoftware prototypes; new courses developed by community members aimed at\r\nspecific target audiences or aimed at teaching specific skills or subjects;\r\nlocalized variants, translations etc. of existing courses; new or modified\r\nexamples (you can never have enough examples, and examples that are tailored\r\nto specific audiences are more effective); new applications developed by\r\nand for students of our courses using our program development software;\r\nand so on. In the Python community, we receive many such contributions\r\n(including complete foreign-language translations of key documents) completely\r\nunsolicited! Benefits for the community include early access to new courses and software,\r\nand help for teachers in teaching and in convincing their management of\r\nthe importance of teaching computer programming to all students (as opposed\r\nto the advanced placement crowd). We also expect that the proposed community\r\nfacilities will foster a large amount of self-sufficiency among community\r\nmembers. For example, in co-tutoring projects, students in need of tutoring\r\nhelp will find volunteer tutors on the net (often other students who are\r\nmore advanced), and teachers will be able to exchange their experiences\r\ndirectly. This kind of tutoring activity already occurs in the Python community,\r\nand will help defray the load on our research team caused by repeated requests\r\nfor help with simple questions. In the spirit of \"mass computer literacy\" and the open source movement\r\n[OpenSource], our website will make the courses and software widely and\r\nfreely available. In addition to the website, we will create and maintain\r\none or more mailing lists with archives, and perhaps a \"chat\" service for\r\nusers. We will actively participate in the mailing lists in order to foster\r\na community, and also collect and analyze the feedback provided by the\r\ncommunity to us through these (and other) channels. It is clear that we consider community involvement essential for the\r\nsuccess of this project. Therefore, we want to go beyond the typical website\r\nsetup. We plan to create an automated archival site for teachers, students\r\nand programmers, which can be used to exchange course notes, examples,\r\nuseful software, and so on. We also plan to develop prototype software\r\nto aid users in maintaining consistent collections of software packages,\r\nboth locally developed and downloaded, on one or more machines. The expected\r\nfrequent exchange of extensions, upgrades, patches, end user modifications,\r\nand so on, would cause a nightmare of version control problems using the\r\nexisting practice. This is elaborated in the subsection \"Sharing and Maintaining\"\r\nabove. Collaboration\r\nPlans We will build into the program a certain amount of planned cooperation\r\nwith other academic and non-academic institutions in order to ensure the\r\nsuccess of the research. In particular, we propose to subcontract some\r\nactivities to groups at Carnegie Mellon University and the University of\r\nChicago. The Alice group at CMU has successfully used Python as an end\r\nuser programming language for their popular virtual reality software; the\r\nUniversity of Chicago has considerable experience and interest in CS curriculum\r\ndevelopment. We also plan to work informally with other academic groups\r\nand to open up the participation to others as practicable. Carnegie Mellon\r\nUniversity The Alice group [Alice] [Pausch], under leadership of Prof. Randy Pausch,\r\ndevelops affordable 3-D graphics and virtual reality software for Windows,\r\noriginally at the University of Virginia and now at Carnegie Mellon University.\r\nThey use Python both for end user programming and in the implementation\r\nof large parts of their system (almost everything except the rendering\r\nengine). They probably have the most extensive and best-documented case\r\nstudy of teaching Python programming (albeit in a limited domain) to users\r\nwith no prior programming experience, and their enthusiasm for Python has\r\nbeen a great encouragement for us to consider using Python in a general\r\nprogramming curriculum. They are also one of the only groups to apply usability\r\ntesting to programming languages and Application Programmer Interfaces. We plan to provide the Alice group with limited funding to continue\r\nthis part of their research in a mutually beneficial way. We expect to\r\nbenefit from their experience in teaching Python to novice users, from\r\nthe simple but effective programming tools they have built into the Alice\r\nsystem, and from their proficiency in user testing--very important for both\r\nthe tutorial and the software we plan to develop. They will benefit from\r\nour tutorial (giving Alice users broader instruction in software development)\r\nas well as from our software (more powerful program construction tools). University\r\nof Chicago The University of Chicago can contribute to the CP4E research effort\r\nin two core areas: curriculum development and software development tools.\r\nWe also plan to work with the University of Chicago Laboratory School,\r\na private K-12 school operated by the University of Chicago. Our liaison\r\nat the University of Chicago is Prof. David Beazley, an experienced Python\r\nuser. We plan to provide the University of Chicago with limited funding\r\nfor curriculum development. This will be to our benefit because of their\r\ninterest and experience in teaching; their benefit will be the use of a\r\nsuperior programming language and tools. Local Schools Finally, we plan to work directly with selected local schools to \"test-drive\"\r\nthe developed materials. Working with local schools makes regular face-to-face\r\nmeetings with both teachers and students possible; we consider this essential\r\nfor the evaluation of our prototype course and software. The Yorktown High\r\nSchool in Arlington County, Virginia, has already shown interest in this\r\nproposal [Yorktown]. Another possible candidate might be the Thomas Jefferson High School\r\nfor Science and Technology, a public magnet school in Fairfax County, Virginia,\r\nwhich already offers a computer science curriculum to advanced students\r\n[TJHSST]. We will be contacting other local schools in Maryland, Virginia,\r\nand the District of Columbia for collaboration purposes during the course\r\nof this project. Other Research\r\nGroups We also plan to work informally with academic and other research groups\r\nwho are developing personal computing hardware and software for the future\r\n(\"ubiquitous computing\" projects); these projects all envision end user\r\nprogrammability of sorts. Some examples of such projects are Project Oxygen\r\nat MIT [Dertouzos], Portolano/Workscape at Xerox PARC and the University\r\nof Washington [Portolano], and Invisible Computing at CMU. We expect that the main benefit for us of such cooperation will be early\r\ndeployment of our technology in advanced systems, while their benefit will\r\nbe improved end user programmability of the systems they are developing.\r\nNote that the timing is excellent here: widespread deployment of the personal,\r\nembedded systems as envisioned in e.g. Project Oxygen is expected around\r\nthe same time that our curriculum and software could be in widespread use. Comparison\r\nto Other Research ABC. Python's predecessor, ABC, was designed in the early eighties as\r\na teaching language. Its motto was \"stamp out Basic\"--acknowledging the\r\nmain competition in languages for non-experts at the time. ABC's designers\r\nhad a lot of experience teaching \"classic\" programming languages like ALGOL\r\nto novices. They found that their students were often so overwhelmed by\r\nthe incidental details of using a computer language (such as running the\r\ncompiler, dealing with different numeric formats, arcane I/O operations,\r\nand low-level memory management) that they never managed to concentrate\r\non the essentials of good program and algorithm design. To counteract this effect, ABC's designers went back to first principles.\r\nThey set out to design a language and an environment for that language\r\nthat would take care of all the incidentals, leaving the student more time\r\nto learn what's essential in programming independent of the programming\r\nlanguage at hand, such as clear control flow and powerful data structures,\r\nand focusing on the elegant expression of programs. They proposed both\r\na new language design and new terminology that deviated radically from\r\nwhat was (and still is) current among computer scientists and programmers.\r\nIn fact, the single largest reason why ABC didn't make as much of an impact\r\nas expected is probably that they deviated too much from current practice.\r\nThe people who had access to the hardware that was needed to run ABC (initially\r\nit only ran on Unix system, although it was later ported to the Mac and\r\nPC) were often experienced computer users who felt frustrated that ABC\r\ndidn't \"speak the same language\" as the rest of their applications. About a decade later, Python grew out of this frustration. It shares\r\nABC's focus on elegance of expression, fundamentals of programming, and\r\ntaking away incidentals, but adds object-orientation, extensibility, and\r\na powerful library of modules that interface to other applications, via\r\nmany different mechanisms: shared files, program embedding, RPC interfaces\r\nlike CORBA or COM, and network protocols (supporting all the protocols\r\ntypically used on the Internet). Logo. Really a family of languages related to Lisp and mostly\r\ndeveloped at MIT, Logo is of course the most well-known programming language\r\nfor children. It has a rich tradition, strong roots in schools, and a number\r\nof commercial offerings. There is ongoing research being done by the Epistemology\r\nand Learning Group at the MIT Media Lab, e.g. the \"programmable brick\"\r\n(in cooperation with LEGO). A key difference between Logo and our proposal lies in our vision that\r\nmillions of (amateur) programmers will be developing open source software\r\ntogether--Logo appears content with teaching limited programming skills\r\nto younger children, for whom computer programming is mostly a way to train\r\ntheir mind in abstract thinking. Logo also has limited applicability in\r\nthe real world of software development. LogoMation. A company called Magic Square sells LogoMation, a\r\nlanguage not unlike Logo, with a similar emphasis on turtle graphics. It\r\ncomes with an excellent tutorial suitable for children from 8 up. LogoMation's\r\nsyntax is similar to Python (more so than Logo's syntax); which suggests\r\nthat we're on the right track with Python. But like Logo, LogoMation is limited in the growth path it offers. It\r\ndoesn't directly address the issue of \"what next,\" expecting its users\r\nto move on to other programming languages for real work. Alice. The testimonials on the Alice website clearly indicate\r\nthat Alice is successful at teaching programming to children as well as\r\nto adults with no prior computer experience. It also indicates the importance\r\nof a \"fun\" environment (and Alice's 3-D graphics are more attractive than\r\nLogo's turtle graphics). Alice also gives us some hints on what aspects\r\nof Python could be improved: for example, their experiences suggest that\r\nPython's case-sensitivity is a problem. However, the emphasis of the Alice project is on 3-D graphics--the Alice\r\ntutorial doesn't really teach much in the way of program or data structuring\r\ntechniques. While we agree that 3-D graphics are a great way to create\r\nand keep a young audience captive, we are interested more in teaching programming\r\nin general, not just graphics. For this reason, the emphasis in our initial\r\nwork will be on the development of a programming environment and tutorial\r\nwhere 3-D graphics is just one of the possible uses for a computer. DrScheme. The TeachScheme! Project at Rice University [TeachScheme]\r\naims to develop a new introductory computing curriculum based on the Scheme\r\nprogramming language. A central part of the Rice effort is the development\r\nof DrScheme [Findler], a programming environment targeted at beginning\r\nstudents. The focus of TeachScheme is on a relatively narrow audience--college\r\nstudents who have a solid grounding in high school algebra and an interest\r\nin studying computing and its application to scientific problems. We envision\r\na much wider audience, where the assumptions about a strong math background\r\nand interest in scientific problems do not hold. We also expect that Scheme,\r\na language that excels in exposing the fundamental building blocks of computation\r\nfor pedagogical purposes, would be inappropriate for a mass audience. It is interesting to note, however, that one of the key parts of the\r\nTeachScheme project is a development environment. While the audiences and\r\napproach are different, our project and TeachScheme share a sense that\r\nthe development environment is a crucial component. There is a need for\r\nan interactive read-eval-print loop, a powerful debugger, and tools to\r\nunderstand how programs work. Facilities We will use CNRI's existing computing infrastructure for development\r\nand distribution of the proposed materials, augmented with desktop workstations\r\nand a web server purchased specifically for this project. We will use the\r\nInternet and the World-Wide Web for all distribution of materials. List\r\nof Key Personnel Guido van Rossum will lead this effort at CNRI. He is a group leader\r\nat CNRI, and is the creator of Python, for which he still serves as the\r\nkey developer. He is also the lead designer of the Knowbot mobile agent\r\nsystem. In the past he has worked on ABC, a programming language developed\r\nfor teaching purposes, and Amoeba, a well known distributed operating system\r\ndeveloped in the 80s. He has a Masters' degree in mathematics and computer\r\nscience from the University of Amsterdam. Jeremy Hylton is a senior member of the CNRI technical staff. He is\r\none of the designers of the Knowbot mobile agent system, and has designed\r\nand implemented several agent-based information management applications.\r\nHe received a M.Eng. in electrical engineering and computer science and\r\nan S.B. in computer science and engineering from the Massachusetts Institute\r\nof Technology, both in 1996. Barry Warsaw is a senior member of the CNRI technical staff. He has\r\nbeen a contributing designer to several CNRI projects including the Application\r\nGateway System, the Knowbot Operating Environment, and JPython. He has\r\ncontributed to development of the Python language and to the Grail Internet\r\nBrowser. He received a B.S. in computer science from the University of\r\nMaryland in 1984. Previous to CNRI, he worked on robotic systems operator\r\ninterfaces at the National Institute of Standards and Technology from 1980\r\nthrough 1990, and on medical database information technology at the National\r\nLibrary of Medicine from 1990 through 1994. Statement\r\nof Work CNRI will perform the following work: Develop a prototype programming environment for Python, including program\r\nanalysis and management tools suitable for use by novices. Develop a prototype tutorial to teach programming using Python to non-programmers,\r\nespecially in high school or college, using the above programming environment. Develop example software aimed at the above audience; for example, a Python\r\nextension that allows the manipulation of a third-party 3-D game-playing\r\nenvironment. Set up and maintain a website and mailing lists promoting the above software\r\nand tutorial and soliciting feedback. Collaborate with selected high schools and universities. Engage in small-scale teaching and user testing efforts. Collect feedback regarding the above software and tutorial from users,\r\nstudents and teachers and use this to improve the software and tutorial.\r\nAlso use it to improve the Python language itself or to propose a better\r\nlanguage. Publish a final report documenting the research, the lessons learned, the\r\nresults of the research, and the recommended follow-on research. The Alice group at CMU will perform the following work: Integrate CNRI-developed tools into Alice. User testing of CNRI-developed tools and tutorial. The University of Chicago will perform the following work: Work with CNRI to develop the CNRI-developed tutorial into a CS curriculum\r\nsuitable for high school, and separately into a CS course suitable for\r\nnon-CS undergraduates in college. Teach classes using the developed curriculum in order to provide feedback. In order to maximize access to the materials produced, all software, educational\r\nmaterials, and reports produced for this project will be made freely available\r\non the World-Wide Web as open source material. Schedule We envision the following schedule for the effort: Year 1. Initial research at CNRI: develop initial prototype programming\r\nenvironment; design program analysis and measurement tools; develop first\r\nversion of tutorial; develop contacts with other researchers and with interested\r\nteachers. Year 2: At CNRI: initial implementation of program analysis and measurement\r\ntools; collect feedback from first software and tutorial experiences. At\r\nCMU: start working on integrating CNRI-developed tools into Alice and start\r\nuser testing. At U of C: start working on curriculum development for high\r\nschool and college students. Year 3: Continue above activities. In addition, at CNRI: integrate first\r\nprogram analysis and measurement tools into programming environment; small-scale\r\nroll-out of enhanced programming environment; develop initial example applications;\r\ndefine evaluation criteria for success. At CMU: user testing of program\r\nanalysis tools. At U of C: integrate use of program analysis tools into\r\ncurriculum. Year 4: Continue above activities, completing most of them. In addition,\r\nat CNRI: large-scale roll-out of enhanced programming environment; refine\r\nexample applications; start large-scale collection of end user feedback;\r\nstart working on Python language changes. At CMU: Completion of user testing,\r\nintegration into Alice. At U of C: completion and roll-out of curriculum. Year 5: Project completion: report experiences, evaluate success, technology\r\ntransfer to educational world and industry. Optional\r\nTasks There are no optional tasks in the proposal. References http://www.cwi.nl/~steven/abc/ Thomas Ball and James R. Larus. Programs Follow Paths. Microsoft Research\r\nTechnical Report MSR-TR-99-01, Jan. 1999. http://www.alice.org/ Gregor Kiczales, John Lamping, Anurag Mendhekar, Chris Maeda, Cristina\r\nVideira Lopes, Jean-Marc Loingtier, John Irwin. Aspect-Oriented Programming. In Proceedings of the European Conference on Object-Oriented Programming\r\n(ECOOP), Finland. Springer-Verlag LNCS 1241. June 1997. http://www.parc.xerox.com/spl/projects/aop/ http://www.mbhs.edu/ Robert Cartwright and Matthias Felleisen. Program verification through\r\nsoft typing. ACM Computing Surveys, June 1996, 28(2): 349-351. http://www.cpan.org/ Michael L. Dertouzos. The Future of Computing. Scientific American ,\r\nAug. 1999. http://www.python.org/sigs/distutils-sig/ http://www.dlib.org/ Robert Bruce Findler, Cormac Flanagan, Matthew Flatt, Shriram Krishnamurthi,\r\nand Matthias Felleisen. DrScheme: a pedagogic programming environment for\r\nScheme. In Proceedings of the 1997 Symposium on Programming Languages:\r\nImplementations, Logics, and Programs , Southampton, UK, Sept. 1997.\r\n(Lecture Notes in Computer Science, Vol. 1292.) http://el.www.media.mit.edu/groups/el/projects/fishtank/ Cormac Flanagan and Matthias Felleisen. Componential Set-Based\r\nAnalysis. ACM Transactions of Programming Languages and Systems, to appear. Leo Geurts, Lambert Meertens, Steven Pemberton. The ABC Programmer's\r\nHandbook. Prentice-Hall, 1990. Jim Hugunin. Python and Java - The best of both worlds. In Proceedings\r\nof the 6th International Python Conference , San Jose, Ca., Oct. 1997,\r\npp. 11-20. Jim Hugunin. JPython Update. Invited talk, 7th International Python\r\nConference. Houston, Tex., Nov. 1998. PowerPoint slides: http://www.jpython.org/jpython-talk-1.ppt Daniel Jackson and Allison Waingold. Lightweight Extraction of Object\r\nModels from Bytecode. In Proceedings of the International Conference on\r\nSoftware Engineering, Los Angeles, Ca., May 1999. http://www.jpython.org/ http://www.cnri.reston.va.us/home/koe/ http://sdg.lcs.mit.edu/~dnj/research/self-updating.html http://el.www.media.mit.edu/groups/logo-foundation/ http://www.magicsquare.com/LM2/ Mark Lutz. Programming Python. O'Reilly, 1996. http://www.mozilla.org/ http://www.list.org/ John K. Ousterhout. Scripting: Higher Level Programming for the 21st\r\nCentury. IEEE Computer , March 1998. Mindstorms: Children, Computers, and Powerful Ideas . New York:\r\nBasic Books, 1980. Randy Pausch, Tommy Burnette, A.C. Capeheart, Matthew Conway, Dennis\r\nCosgrove, Rob DeLine, Jim Durbin, Rich Gossweiler, Shuichi Koga, Jeff White. Alice:\r\nRapid Prototyping System for Virtual Reality . IEEE Computer Graphics\r\nand Applications , May 1995. http://www.cs.washington.edu/research/projects/portolano/ http://www.python.org/ http://www.swig.org/ Frank Tip. A survey of program slicing techniques. Journal of Programming\r\nLanguages, 3(3):121-189, September 1995. http://www.cs.rice.edu/CS/PLT/Teaching/ http://www.tjhsst.edu/ http://yhspatriot.yorktown.arlington.k12.va.us/ Aaron Watters, Guido van Rossum, Jim Ahlstrom. Internet Programming\r\nwith Python. MIS Press/Henry Holt, 1996. Andrew\r\nK. Wright , Robert\r\nCartwright . A Practical Soft Type System for Scheme. ACM Transactions\r\nof Programming Languages and Systems, Jan. 1997, 19(1): 87-152. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Computer Programming for Everybody", "Computer Programming for Everybody", "The PSF"]}
{"url": "https://www.python.org/doc/essays/everybody/", "title": "Computer Programming for Everybody | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Computer Programming for Everybody Computer Programming for Everybody This is the main text of a funding proposal that we sent to DARPA\r\nin January 1999.  In August 1999, we submitted a revised version of the proposal. Please look at the EDU-SIG home page (Python in Education Special Interest Group).\r\nThis is where the current project status is described and/or will be\r\ndiscussed, and where you'll find pointers to more resources. Note: I have made one change to the text of the\r\nproposal: At the request of some supporters of other languages, I've\r\nwithdrawn a language comparison chart that contained highly personal\r\nand sometimes unfounded opinions of other languages.  The table was\r\nbeing used out of context in a way that some found objectionable.\r\n(Not all of the table is disputed, but it seems wiser not to engage in\r\ndirect language comparisons without a lot more\r\ndocumentation.) Innovative Claims In the seventies, Xerox PARC asked itself: \"Can we have a computer\r\non every desk?\"  By the middle of the nineties, this question was\r\nanswered affirmatively. But all those computers haven't necessarily\r\nempowered their users.  Today's computers are often inflexible: the\r\naverage computer user can often only change a limited set of options\r\nconfigurable via a \"wizard\" (a lofty word for a canned dialog), and is\r\ndependent on expert programmers for everything else. We now ask ourselves a follow-up question: \"What would the world\r\nlook like if users could program their own computer?\"  We're looking\r\nforward to a future where every computer user will be able to \"open\r\nthe hood\" of their computer and make improvements to the applications\r\ninside.  We believe that this will eventually change the nature of\r\nsoftware and software development tools fundamentally. We compare mass ability to write and modify software with mass\r\nliteracy, and expect that equally fundamental changes to society may\r\nensue. Since hardware is now sufficiently fast and cheap to make mass\r\ncomputer education possible, we believe that the ability for the\r\naverage computer user to create and modify software (rather than just\r\ninstalling and using it) will enable the next big change-and we\r\nconsider it our next challenge. The open source movement claims that peer review of software by\r\nthousands can greatly improve the quality of software.  The success of\r\nan operating system like Linux indicates that there is value to this\r\nclaim.  We believe that the next step, having millions of\r\nprogrammers, will cause a change of a different quality-the abundant\r\navailability of personalized software. The tools needed for this new way to look at programming will be\r\ndifferent than the tools currently available to professional\r\nprogrammers.  We intend to greatly improve both the training material\r\nand the development tools available. As an example, non-professional\r\nprogrammers should not have to fear that a small mistake might destroy\r\ntheir work or render their computer unusable. The following factors will affect the success of our project: Programming language Development tools Training materials Community building For practical reasons, we propose to use an existing programming\r\nlanguage.  The design and implementation of a new language can take\r\nseveral years, and we have picked one that is good enough to start\r\nworking on the other three points.  Our choice is Python, an advanced\r\nscripting and prototyping language.  There is enough (anecdotal)\r\nevidence that Python is easy to learn for people who are (nearly)\r\ncomputer-illiterate.  There are currently no development tools or\r\ntraining materials for Python that suit such an audience.  We will\r\nmake development of these the main focus of our task.  We want to\r\nfoster a community specifically focused on our tools and materials, so\r\nwe can collect the necessary feedback; there is already interest in\r\nthe use of Python by \"newbies\" in the existing Python community\r\n(estimated at 20,000 programmers, and growing rapidly), so we expect\r\nthat it will be a fertile deployment ground. Technical Rationale and Approach 1. Introduction In the dark ages, only those in power or with great wealth (and\r\nselected experts) possessed reading and writing skills or the ability\r\nto acquire them.  It can be argued that literacy of the general\r\npopulation (while still not 100%!), together with the invention of\r\nprinting technology, has been one of the most emancipatory forces of\r\nrecent history. We are just now entering the information age, and it is expected\r\nthat computer technology will soon replace printing as the dominant\r\nform of information distribution technology.  About half of all US\r\nhouseholds already own at least one personal computer, and this number\r\nis still growing. However, while many people nowadays use a computer, few of them are\r\ncomputer programmers.  Non-programmers aren't really \"empowered\" in\r\ntheir computer use: they are confined to using applications in ways\r\nthat programmers have determined for them.  One doesn't need to be a\r\nvisionary to see that this causes a lot of grief. An even more radical change is the introduction of computing and\r\ncommunication embedded in the home and office.  The number of devices\r\nthat will contain programmable elements will grow dramatically in the\r\ncoming years.  We must learn how to expose this programmability to\r\nusers in a meaningful way and to make it easy for non-programmers to\r\ncontrol and program these devices.  Users must be empowered from the\r\nstart. In this \"expedition into the future,\" we want to explore the notion\r\nthat everybody can obtain some level of computer programming\r\nskills in school, just as everybody can learn how to read and write. Specifically, we are interesting in the development of educational\r\nmaterials, programming languages, and development tools.  We emphasize\r\nthat this is not an attempt at evolutionary improvement of the\r\nmaterials and tools that are currently in use; we believe that a\r\nradically new approach is necessary.  (However, for practical reasons\r\nwe will start by using an existing language.) There are many challenges for programming languages and\r\nenvironments if they are used by a mass audience.  Consider one\r\nexample: If everybody is a programmer, bad programmers will abound.\r\nThis requires a rethinking of the fundamental properties of\r\nprogramming languages and development tools.  We also believe that\r\nthere should be no clear-cut distinction between tools used by\r\nprofessionals and tools used for the educational process--just as\r\nprofessional writers use the same language and alphabet as their\r\nreaders! 2. The Vision In the conference call about this BAA, the following was said:\r\n\"Presumably these expeditions are going to [...] invent whole new\r\nfutures for the field, and we expect that there will be users\r\ninvolved, and that we'll have some impact so that the users may be in\r\nvery different roles than they are today.\"  We have a vision that will\r\nindeed give users a very different role. Our vision is that one day in the not-so-distant future, computer\r\nprogramming will be taught in elementary school, just like reading,\r\nwriting and arithmetic are today.  We really mean computer programming --not just computer use (which is already a part of our\r\nnation's educational system); and we mean serious programming, not\r\njust noodling around with turtle graphics (although this is a good\r\nteaching tool in lower grades).  Of course, most students would not\r\nbecome skilled application architects, just as most people who learn\r\nto write don't become bestseller authors-but reading and writing\r\nskills are useful for everyone, and so (in our vision) are general\r\nprogramming skills. We already see some indications that this is a realistic goal.  For\r\nexample, the Alice project reports that\r\nfreshmen and even teenagers with no previous programming experience\r\nstart writing programs to control virtual worlds within days.  Perhaps\r\nnot incidentally, Alice uses a version of the advanced scripting\r\nlanguage Python , developed by\r\none of the current proposal's authors. Experiences with the Logo programming language and similar languages (e.g. LogoMation by\r\nMagic Square ) are another\r\nindication that younger people can learn how to program.  Perhaps\r\nthese can be seen as precursors to Alice, showing their age by their\r\nuse of 2D instead of 3D graphics (although Alice places less emphasis\r\non learning how to program than do Logo and LogoMation). Imagine that users could make their own changes to the software\r\nembedded in, say, their GPS receiver or handheld organizer, rather\r\nthan (or in addition to) downloading upgrades from a vendor, or buying\r\n\"canned\" add-on applications from third parties.  This would greatly\r\nempower users to improve their life by programming their personal\r\ntools to do exactly what they need them to do. The recently popular open source movement is promising to improve the\r\nquality of key software packages through the peer review of thousands,\r\nas well as the ability for programmers to \"scratch their own itch.\"\r\n(I.e., tweak the software in a minor way that only one individual\r\ncares about.)  We expect that moving from thousands to millions will\r\nchange the nature of the software development process once\r\nagain. Scratching your own itch will become more important (and\r\nfeasible) at this scale, while mass peer review will become less\r\nimportant due to diminished returns (the logistics of integrating bug\r\nfixes from thousands of sources is already a formidable task).  But\r\nmost current software, open source or otherwise, is too complex to\r\nallow anyone to scratch their itch without first investing a serious\r\namount of effort and time into understanding the software they're\r\nusing.  We are interested in changes to the whole software development\r\nprocess that will fix this as well-in particular development tools. Why teach a \"general\" programming language?  It is well understood\r\nthat there is a bit of a dichotomy between \"procedural\" programming\r\nlanguages on the one hand and \"declarative\" languages on the other.\r\nFor this discussion, we use the term \"procedural\" in a broad and loose\r\nsense, to include functional programming languages and possibly even\r\nlogic programming languages to the extent in which they are usable as\r\na general programming tool.  Turing-completeness is the key concept\r\nhere. The \"declarative\" category then contains everything else, from\r\ncommand line argument syntax to email headers and HTML.  The\r\ndistinguishing factor here is the presence of a relatively \"narrow\"\r\napplication domain.  In this category we would also place things like\r\nMicrosoft's \"wizards\" (which are really just sequences of predefined\r\ndialogs connected by simple flow charts) and the controls and dials on\r\na microwave oven or nuclear reactor. A typical property of declarative languages is that they provide\r\nexcellent control in the application domain for which they were\r\nintended, and (almost) no freedom in unanticipated areas.  For\r\nexample, HTML has no inherent ability for conditional inclusion of\r\ntext, or variable expansion.  (The fact that such features have been\r\nadded as extensions to HTML proves the point.) Procedural languages, on the other hand, usually aren't as good in\r\nany particular domain (e.g. it takes a lot more work to write a\r\nprogram in a procedural language to format a paragraph of text than it\r\ndoes in HTML).  However, they make up for this through their\r\nTuring-completeness, which makes it possible to solve any problem that might come up (assuming availability of sufficient\r\nresources).  Procedural languages are therefore ideal in combination with declarative languages. For example, if my cell phone were programmable, I would still use\r\nthe regular declarative interface (i.e. the keypad) to dial a specific\r\nnumber, since that's the most convenient way to access that specific\r\nfunctionality.  However, without programmability, there is no way I\r\ncan make it try a couple of different numbers for a particular friend\r\nuntil one is answered, unless the cell phone vendor anticipated this\r\nparticular feature. 3. Challenges Some questions arise immediately.  What would the programming\r\nlanguage taught in schools look like?  Would it bear any resemblance\r\nto any of the programming languages we know today?  Would it even be\r\ncalled a programming language?  How would we teach it?  Would there be\r\nonly one language?  What other tools are essential to the teaching and\r\nuse of this language? Just as interesting are questions like these: How and for what\r\nwould people use their programming skills?  How would a near-universal\r\nability to read and write computer programs change the structure of\r\ncomputer software?  (Especially in combination with a future version\r\nof the Internet, which promises ubiquitous access to computing and\r\nstorage elements as well as to network connectivity.)  How would it\r\naffect the software market?  How far in the future might this become a\r\nreality? A clear potential worry is the expectation that, if most people are\r\nprogrammers, many of them will most likely be bad programmers.\r\nPeople who can't write understandable sentences in their native tongue\r\nor balance their checkbook are unlikely to write well-structured\r\ncomputer programs! We therefore need to investigate ways to improve the quality of the\r\ninteraction between the programmer and the system, to help even poor\r\nprogrammers get the most out of their computers.  For example, you\r\nmight want to write a program to customize your PDA or toaster, but\r\nyou might be discouraged if a small mistake could wipe out your\r\naddress book or set your house on fire.  Safeguards against disasters\r\nare needed, as well as ways of backing out of unwanted changes to a\r\nsystem as a whole.  (\"Undo\", while very powerful, usually only applies\r\nto one file at a time.  Backing out of global system changes typically\r\nrequires a reboot or even painful data restoration from back-up\r\nmedia.) Scripting languages have become incredibly popular, and an advanced\r\nscripting language like Python makes a good starting point for our\r\nexpedition.  One persistent criticism on scripting languages is that\r\ntheir performance is inadequate for some tasks.  Techniques like\r\nprogram analysis and advanced compiler technology may be able to\r\neliminate part of this problem, probably in combination with some form\r\nof optional static typing.  The challenge is to do this without\r\nobfuscating the programming language or making the development cycle\r\n(edit-run-debug) more tedious. Scripting languages are very good at gluing together existing\r\ncomponents in a new way, rather than starting from scratch.  One\r\nconclusion is that we need better techniques for software reuse-an\r\nissue of ongoing debate in object-oriented programming circles. Scripting languages are also good at gluing together components\r\nwritten in other languages.  However, what happens at the boundaries\r\nbetween languages is often very ugly.  There are two possible resorts\r\nhere.  One is to try to reduce the need for other languages, by adding\r\nfacilities to a scripting language that make it usable as a system\r\nlanguage (i.e. a language suitable for low-level programming, such as\r\nC or Java).  Here, we are once again looking at improving performance\r\nabove all.  The other possibility is to simply improve the\r\nsynchronicity between system and scripting languages.  A good example\r\nis JPython, a Python dialect that is seamlessly integrated with Java . 4. How Will it Change the World? Just as mass literacy has had a pervasive effect on western\r\nsociety, arguably leading to modern western democracy, the long-term\r\neffects of mass computer literacy on society will be tremendous.\r\nHaving a general understanding of computers at the level of software\r\ndesign and implementation will cause a massive surge in productivity\r\nand creativity, with a far-ranging impact that can barely be\r\nanticipated or imagined. On a shorter term, the quantity and quality of available computer\r\nsoftware will improve drastically, as the imagination and labor of\r\nmillions is applied to the problem.  Inventive office workers will be\r\nable to improve the software that supports them in their tasks, and\r\nshare their improvements with their colleagues or-via the\r\nInternet-with others far away who are faced with the same tasks and\r\nproblems. Now is the time to start working on this vision.  The developments\r\nin hardware for computation, storage and connectivity are such that\r\nfor the first time, the masses will have access to computers that are\r\npowerful enough to be useful to them, either as stand-alone desktop or\r\nlaptop computers, or embedded in appliances.  We need to start\r\ndeveloping software that will empower them to control their computers\r\ninstead of being controlled by them. 5. Expedition Plan Ideally, we want to come up with a programming language, a\r\ndevelopment environment, and teaching materials, suitable to teach\r\nprogramming to children in junior and senior high school, as well as\r\nto adults with no previous computer experience.  Around these\r\nmaterials, we expect to build a community of users that will provide\r\nus with feedback and that will eventually realize our vision of a\r\ndifferent way of software development and personalization. Recognizing our limitations, we propose to start by making it\r\npossible to teach an existing scripting language, Python, and to focus\r\non creating a new development environment and teaching materials for\r\nit.  We have anecdotal evidence that Python is a good language to\r\nteach as a first programming language.  Our effort will focus creating\r\ntools and educational materials for this purpose and on fostering a\r\ncommunity around those materials, so we will be able to study why Python is a good teaching language, and recommend\r\ndirections for future teaching language development. Why use an existing language?  Our experience indicates that the\r\ndesign and implementation of a new language is measured in years-and\r\nthat this work must be (nearly) completed before the development\r\nenvironment and teaching materials can be created.  So we must\r\njump-start our project by using an existing language. Why use Python?  We believe that Python is a good language for\r\nteaching to absolute beginners.  It derives many of its critical\r\nfeatures from ABC , a language that was designed specifically\r\nfor teaching programming to non-experts.  The Python community has\r\nseen many reports from individuals who taught their children\r\nprogramming using Python.  The consensus from these reports is that\r\nthe language itself is perfect for this purpose-unlike, say, Java,\r\nPerl, or Visual Basic, which are all too cluttered with\r\nidiosyncrasies. The table below is a (subjective) chart comparing a few relevant\r\naspects of Python to some other languages.  From this table, we\r\nconclude that Python is a good first choice for teaching which also\r\nserves well as a language for serious application development.  Unlike\r\nother languages proposed for teaching to novices (e.g. Logo,\r\nLogoMation, even Python's ancestor ABC), Python isn't just a\r\nteaching language.  It is suitable for developing large applications,\r\nas projects here at CNRI and elsewhere prove.  Moreover, Python is\r\nextensible by modules written in other languages, e.g. C, C++, or\r\nJava, to mediate access to advanced functionality that is not easily\r\naccessible from Python directly (for example, high-speed 3D computer\r\ngraphics packages).  While we don't expect our students to write\r\nextension modules, the use of such modules makes it possible to\r\nspruce up their learning experience, and gives teachers an opportunity\r\nto tailor lessons to the interests of their students by providing them\r\nwith guarded access to other software packages. (withdrawn) The fact that Python can be used to develop large applications\r\nplays into a different aspect of our vision: The development of open\r\nsource application software that can be tailored by users who are not\r\nexpert programmers, but have learned some programming skills.\r\nAlthough this is not the focus of our scouting task, we hope that we\r\nwill see at least some initiatives towards this goal, and we will\r\nencourage companies and organizations wishing to take steps in this\r\ndirection.  We expect that the existence of JPython (a Python\r\nimplementation seamlessly integrated with Java) will be an important\r\nenabling factor here. Python's programming environment and the available introductory\r\nmaterial are less than ideal for teaching to novices.  In particular,\r\nthe existing development environments and tutorials for Python (there\r\nare several of each) all assume that the user is a dyed-in-the-wool\r\ndeveloper, who knows a suite of external tools to edit, run and debug\r\na program, and who already knows one or more other programming\r\nlanguages and their development environments.  This currently stands\r\nin the way of more widespread experimentation with Python as a first\r\nprogramming language. By teaching Python to non-programmers, we expect we will collect\r\nvaluable information that will guide the design of a better\r\nprogramming language.  In fact, we expect that others will do most of\r\nthe actual teaching for us, and we will create web- and email-based\r\nfeedback channels that maximize the amount of (useful) feedback we\r\nget. Our plan for the initial scouting task has four major components: Create a Python development environment suitable for novices; Create training materials to teach Python to novices using this\r\nenvironment; Foster a user community for the above and extract feedback from\r\nit; Evaluate the feedback and recommend guidelines for follow-up\r\nresearch or development. As soon as an initial version of the development environment and\r\ntraining material is released to the Python community, the feedback\r\nchannels will be opened, and the initial feedback will mostly go into\r\nimprovements of the environment and materials. Later, when more feedback has come in, we will evaluate the use of\r\nPython for this project.  Maybe Python is perfect; quite possibly\r\nchanges are necessary; perhaps a drastically different language design\r\nis required after all.  Our interest here is in discovering what\r\naspects of Python work well in a teaching language.  Based on this\r\nevaluation, we will propose or undertake follow-on research and\r\ndevelopment activities. We will design and build a development environment specifically\r\nintended to teach Python programming to adults with no previous\r\nprogramming experience, as well as to children in middle school or in\r\njunior and senior high school (also without previous programming\r\nexperience). We will develop educational materials to go with the new\r\ndevelopment environment.  As an incentive to make programming more\r\n\"fun\", we intend to connect the development environment to an existing\r\nprogrammable 3D game-playing engine such as used in popular computer\r\ngames.  Several of such engines are or will likely become available\r\nfor use with Python; we will select one and create an interface\r\nlibrary for it suitable to our audience. Why a 3D game-playing engine?  The experiences with Logo show that\r\ngraphics are a good way to catch a younger audience's attention, but\r\nits 2D graphics look somewhat boring compared to the video games\r\nteenagers are familiar with these days.  Alice is another good example\r\nof a 3D graphics environment that is more engaging than turtle\r\ngraphics. In the spirit of \"mass computer literacy\" and the open source\r\nmovement, we will create and maintain a website to make the software\r\nand educational materials widely and freely available, and set up\r\nfeedback pages there.  In addition to the website, we will create and\r\nmaintain one or more mailing lists with archives, and perhaps a \"chat\"\r\nservice for users.  We will actively participate in the mailing lists\r\nin order to foster a community, and also collect and analyze the\r\nfeedback provided by the community to us through these (and other)\r\nchannels. We also intend to engage in small-scale teaching efforts ourselves,\r\nbut we don't expect that we will be doing much teaching.  If our\r\nexperience with the Python's popularity are any indication, we won't\r\nhave to: others are eager to participate in this experiment. Facilities We will use CNRI's existing computing infrastructure for\r\ndevelopment and distribution of the proposed materials, augmented with\r\ndesktop workstations and a web server purchased specifically for this\r\nproject.  We will use the Internet and the World-Wide Web for all\r\ndistribution of materials. Comparison to Other Ongoing Research ABC.  Python's predecessor, ABC, was designed in the early eighties\r\nas a teaching language.  It's motto was \"stamp out\r\nBasic\"-acknowledging the main competition in languages for non-experts\r\nat the time.  ABC's designers had a lot of experience teaching\r\n\"classic\" programming languages like Algol to novices.  They found\r\nthat their students were often so overwhelmed by the incidental\r\ndetails of using a computer language (such as running the compiler,\r\ndealing with different numeric formats, arcane I/O operations, and\r\nlow-level memory management) that they never managed to concentrate on\r\nthe essentials of good program and algorithm design. To counteract this effect, ABC's designers went back to basics.\r\nThey set out to design a language and an environment for that language\r\nthat would take care of all the incidentals, leaving the student more\r\ntime to learn what's essential in programming independent of the\r\nprogramming language at hand, such as clear control flow and powerful\r\ndata structures, and focusing on the elegant expression of programs.\r\nThey proposed both a new language design and new terminology that\r\ndeviated radically from what was (and still is) current amongst\r\ncomputer scientists and programmers.  In fact, the single biggest\r\nreason why ABC didn't make as much of an impact as expected is\r\nprobably that they deviated too much from current practice.  The\r\npeople who had access to the hardware that was needed to run ABC\r\n(initially it only ran on Unix system, although it was later ported to\r\nMac and PC) were often experienced computer users who felt frustrated\r\nthat ABC didn't \"speak the same language\" as the rest of their\r\napplications. About a decade later, Python grew out of this frustration.  It\r\nshares ABC's focus on elegance of expression, fundamentals of\r\nprogramming, and taking away incidentals, but adds object-orientation,\r\nextensibility, and a powerful library of modules that interface to\r\nother applications, via many different mechanisms: shared files,\r\nprogram embedding, RPC interfaces like CORBA or COM, and network\r\nprotocols (supporting all the protocols typically used on the WWW). Logo.  Really a family of languages related to Lisp and mostly\r\ndeveloped at MIT, Logo is of course the most well-known programming\r\nlanguage in the educational field.  It has a rich tradition, strong\r\nroots in schools, and a number of commercial offerings.  There is\r\nongoing research being done by the Epistemology and Learning Group at\r\nthe MIT Media Lab, e.g. the \"programmable brick\" (in cooperation with\r\nLEGO). The key difference between Logo and our proposal lies in our vision\r\nthat millions of (amateur) programmers will be developing open source\r\nsoftware together-Logo appears content with teaching limited\r\nprogramming skills to younger children, for whom computer programming\r\nis mostly a way to train their mind in abstract thinking. LogoMation.  A company called Magic Square sells LogoMation, a\r\nlanguage not unlike Logo, with a similar emphasis on turtle\r\ngraphics. It comes with an excellent tutorial suitable for children\r\nfrom 8 up. LogoMation's syntax is similar to Python (more so than\r\nLogo's syntax); which suggests that we're on the right track with\r\nPython. But like Logo, LogoMation is limited in the growth path it offers.\r\nIt doesn't directly address the issue of \"what next,\" expecting its\r\nusers to move on to other programming languages for real work. Alice.  The testimonials on the Alice website clearly indicate that\r\nAlice is successful at teaching programming to children as well as to\r\nadults with no prior experience.  It also indicates the importance of\r\na \"fun\" environment (and Alice's 3D graphics are more attractive than\r\nLogo's turtle graphics).  Since Alice actually uses (a slightly\r\nmodified version of) Python, this is another indication of Python's\r\nsuitability.  Alice also gives us some hints on what aspects of Python\r\ncould be improved: for example, their experiences suggest that\r\nPython's case-sensitivity might be a problem. However, the emphasis of the Alice project is on 3D graphics-their\r\ntutorial doesn't really teach much in the way of program or data\r\nstructuring techniques.  While we agree that 3D graphics are a great\r\nway to create and keep an audience, we are interested more in teaching\r\nprogramming, not just graphics.  For this reason, the emphasis in our\r\ninitial work will be on the development of a programming environment\r\nand tutorial where 3D graphics is just one of the possible\r\napplications for a computer. DrScheme.  The TeachScheme! Project at Rice University aims to develop a new\r\nintroductory computing curriculum based on the Scheme programming\r\nlanguage.  A central part of the Rice effort is the development of\r\nDrScheme , a programming environment\r\ntargeted at beginning students.  The focus of TeachScheme is on a\r\nrelatively narrow audience-college students who have a solid grounding\r\nin high school algebra and an interest in studying computing and its\r\napplication to scientific problems.  We envision a much wider\r\naudience, where the assumptions about a strong math background and\r\ninterest in scientific problems do not hold.  We also expect that\r\nScheme, a language that excels in exposing the fundamental building\r\nblocks of computation for pedagogical purposes, would be inappropriate\r\nfor a mass audience. It is interesting to note, however, that one of the key parts of\r\nthe TeachScheme project is a development environment.  While the\r\naudiences and approach are different, our project and TeachScheme\r\nshare a sense that the development environment is a crucial component.\r\nThere is a need for an interactive read-eval-print loop, a powerful\r\ndebugger, and tools to understand how programs work. List of Key Personnel Guido van Rossum is a group leader at CNRI, which he joined in\r\n1995.  He is the creator of Python, a popular interpreted\r\nobject-oriented programming language with capabilities not unlike\r\nJava.  He is also the lead designer of the Knowbot mobile agent\r\nsystem.  In the past he has worked on ABC, a programming language\r\ndeveloped for teaching purposes, and Amoeba, a well known distributed\r\noperating system developed in the 80s.  He has a Masters' degree in\r\nmathematics and computer science from the University of Amsterdam. Expected effort on the project: 50%. Other DARPA or NSF\r\nprojects: 40%. Other significant sources of support: Python Consortium\r\n(10%). Jeremy Hylton is a senior member of the technical staff.  He is one\r\nof the designers of the Knowbot mobile agent system, and has designed\r\nand implemented several agent-based information management\r\napplications.  He received a M.Eng. in electrical engineering and\r\ncomputer science and an S.B. in computer science and engineering from\r\nthe Massachusetts Institute of Technology, both in 1996.  He joined\r\nCNRI the same year. Expected effort on the project: 30%. Other DARPA or NSF\r\nprojects: 70%. Barry Warsaw has been a systems engineer with CNRI since 1994.  He\r\nhas been a contributing designer to several CNRI projects including\r\nthe Application Gateway System and the Knowbot Operating Environment.\r\nHe has contributed to development of the Python language and to the\r\nGrail Internet Browser.  He received a B.S. in computer science from\r\nthe University of Maryland in 1984.  Previous to CNRI, he worked on\r\nrobotic systems operator interfaces at the National Institute of\r\nStandards and Technology from 1980 through 1990, and on medical\r\ndatabase information technology at the National Library of Medicine\r\nfrom 1990 through 1994. Expected effort on the project: 30%. Other DARPA or NSF\r\nprojects: 70%. Other group members will carry out substantial effort on the\r\nproposed project. When other pending DARPA proposals are awarded, the\r\nlevel of effort on this project may be reduced somewhat and other\r\ngroup members will take over. No subcontractors will be used. Statement of Work CNRI will perform the following work: Design and implement a prototype interactive programming\r\nenvironment, written in Python, suitable for teaching Python to\r\ncomputer users without previous programming experience. Design and implement a prototype library of Python modules\r\nconnecting Python to an existing 3D game-playing engine for the\r\npurpose of teaching Python in an engaging environment. Write a tutorial that teaches general programming skills and good\r\nprogramming habits to students with no previous programming skills,\r\nusing the above software. Create and maintain a website and mailing lists to foster a\r\ncommunity focused on the above software and tutorial.  The website\r\nwill be used to provide easy access to all software and teaching\r\nmaterials produced for this project. Evaluate and report on the feedback gathered from the community\r\npertaining to the above software and tutorial.  Make recommendations\r\nfor follow-up research. In order to maximize access to the materials produced, all\r\nsoftware, teaching materials, and reports produced for this project\r\nwill be made freely available on the World-Wide Web as open source\r\nmaterial. Schedule The schedule is divided in four half-year periods from the start of\r\nthe funding award. 1. First half-year period Initial design for the programming environment.  Early prototype\r\nimplementation to gauge the implementability of the design.  Write\r\nearly draft version of part one of the tutorial, \"First steps into\r\nprogramming.\"  Select a 3D game-playing engine for use with the\r\ntutorial and the programming environment.  Connect with other groups\r\ninterested in similar research. 2. Second half-year period Refine programming environment design.  Start implementing the 3D\r\ngame-playing library modules.  Set up website and mailing lists to\r\nbegin community building. Release alpha versions of the\r\nimplementation.  Refine and release alpha versions of part one of the\r\ntutorial.  Start collecting feedback. Write early draft version of\r\npart two of the tutorial, \"Creating larger programs.\" 3. Third half-year period Use feedback to refine programming environment design.  Release\r\nalpha versions of the 3D game-playing library.  Release beta versions\r\nof the implementation and part one of the tutorial.  Release alpha\r\nversions of part two of the tutorial. Write early draft version of\r\npart three of the tutorial, \"Programming and the world-wide-web.\" 4. Fourth half-year period Release final version of the programming environment, the 3D\r\ngame-playing library, and of all three parts of the tutorial.\r\nEvaluate the use of Python for teaching purposes.  Evaluate the\r\neffectiveness of the programming environment and the tutorial.  Write\r\nfinal report. Optional Tasks There are no optional tasks in the current proposal. References http://www.cwi.nl/~steven/abc/ http://www.alice.org/ Robert Bruce Findler, Cormac Flanagan, Matthew Flatt, Shriram\r\nKrishnamurthi, and Matthias Felleisen.  DrScheme: a pedagogic\r\nprogramming environment for Scheme.  In Proceedings of the 1997\r\nSymposium on Programming Languages: Implementations, Logics, and\r\nPrograms, Southampton, UK, Sept. 1997.  (Lecture Notes in Computer\r\nScience, Vol. 1292.) Leo Geurts, Lambert Meertens, Steven Pemberton.  The ABC\r\nProgrammer's Handbook.  Prentice-Hall, 1990 http://www.python.org/jpython/ http://el.www.media.mit.edu/groups/logo-foundation/ http://www.magicsquare.com/LM2/ Mark Lutz. Programming Python. O'Reilly, 1996. http://www.opensource.org/ http://www.python.org/ http://www.cs.rice.edu/CS/PLT/Teaching/ Aaron Watters, Guido van Rossum, Jim Ahlstrom. Internet\r\nProgramming with Python. MIS Press/Henry Holt, 1996. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Computer Programming for Everybody", "Computer Programming for Everybody", "Innovative Claims", "Technical Rationale and Approach", "Facilities", "Comparison to Other Ongoing Research", "List of Key Personnel", "Statement of Work", "Schedule", "Optional Tasks", "References", "The PSF"]}
{"url": "https://www.python.org/doc/essays/refcnt/", "title": "Debugging Reference Count Problems | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Debugging Reference Count Problems Warning This page stays here for historical reasons and it may contain outdated or incorrect information. Debugging Reference Count Problems From: Guido van Rossum To: python-list@cwi.nl Date: Wed, 27 May 1998 11:09:40 -0400 Mike Fletcher wrote a number of posts about debugging C code that\r\nbombs, probably because of reference count problems.  His approach to\r\ndebugging this problem seems typical, but I think it's not very\r\nproductive, so I would like to suggest a different approach.\r\nBasically, it's often more productive to read your code carefully and\r\nreason about it than it is to use a bunch of generic debugging\r\ntechniques.  (Those techniques are very useful, but only once you've\r\nisolated the problem sufficiently.) Mike writes: PyErr_Print() let me know that I'm getting a KeyError on the GI of\r\nthe node (which only appears as the _value_ in any dictionary).  So,\r\nthinks I (with nudging from Guido) it's a refcount error... so, I\r\nforge ahead and say \"dang the memory leaks\", adding Py_INCREF's\r\neverywhere.  No go :( Exactly the same behaviour. Hmm...  This sounds like using an automatic weapon to kill a mosquito.\r\nKnow thy enemy before choosing thy weapon.  The problem is, of course,\r\nwith what \"everywhere\" is.  You may easily miss the one crucial place\r\nbecause you didn't think of it. You should start by re-reading section 1.2.1 of the Python/C API\r\nmanual again, and then carefully read the descriptions of the\r\nfunctions you're calling.  (I know, the manual is not complete; but it \r\nisn't *that* incomplete, and if you're finding a function that's not\r\nin the manual, reading its source usually gives a clue.) So says I (beginning to talk to self), why not print the environment\r\nin which the functions are being run to see what's going on... no\r\nsooner said than done.  And the error disappeared!  Take the\r\nprinting line out -- error reappears (iterate three or four times in\r\ndisbelief). This is a typical example of Heisenberg's law applied to programs: you\r\ncan't observe something without influencing it. I'm using: printf(\" Env as rule called:\\n\\t%s\\n\",\r\n       PyString_AsString(PyObject_Repr(env))); This creates a new string object that is never collected: the new\r\nstring object returned by PyObject_Repr().  Since this is presumably a\r\nbig string and you are allocating a lot of them (one each time you get\r\nto this print statement) the malloc pattern of your application\r\nbecomes very different and this means that you may see very different\r\nbehavior. So, (maybe from shock), I eliminate the Py_INCREFs and try with just\r\nthe printing... still works perfectly (save that I'm printing the\r\nentire parse tree on every iteration of the while loop (which isn't\r\ngood...)). Apparently, the INCREFs you added don't change your program's\r\nallocation behavior -- so obviously they aren't in the right places.\r\nThis is confirmed by what you said earlier: adding the INCREF calls\r\ndidn't remove the problem. So, my questions of the hour: 1) What's the c api equiv for sys.refcount? (so I can watch\r\nrefcounts across calls and determine which are reference neutral) (Echoed by Mark Hammond, who believes the reference count is the first \r\n2 bytes of the object -- in fact, it is the first 4 bytes, and this\r\nreveals that he is working in a little-endian machine, otherwise he\r\nwould have said it's the 3rd and 4th byte. :-) The reference count is the ob_refcnt field.  But I don't think this\r\nwill help you a lot.  If the reference count of an object doesn't\r\nchange during a call, that doesn't mean the call is reference\r\ncount-neutral -- it could store a copy of the object. For example, take PyList_SetItem(list, index, item).  It doesn't\r\nchange the reference count of either the list or the item, but it is\r\nfar from reference count neutral: it is neutral for the list, but it\r\nsteals a reference from the item, and it expects you to hand it the\r\nitem with the reference count already incremented.  (This particular\r\nfunction and its buddy, PyTuple_SetItem(), are used most often to\r\ninitialize lists/tuples with new objects that have been created with\r\nan initial reference count of 1, which nicely matches their behavior.) On the other hand, PySequence_SetItem(list, index, item) *does*\r\nincrement the reference count of the item.  And it is considered\r\nreference count neutral.  (But it doesn't work for tuples, which are\r\nimmutable; this is why you need PyTuple_SetItem().) 2) What the heck is going on with printing?  Am I somehow saving the\r\nobject from ignoble destruction by calling repr on it just before I\r\nneed it?  Could this be a problem with refcounting objects inserted\r\nin the dictionary (doesn't seem likely given that PyDict_SetItem is\r\nsaid to store it's own references to objects). As I said, it's not the printing, it's the repr() call.  I don't\r\nexpect repr() to save a reference to your object, unless you\r\nimplemented the object type yourself (then it could be a bug in your\r\ntp_repr or tp_str function). 3) Anyone else becoming _really_ interested in a bytecode-to-C\r\ntranslator (as discussed a while ago on the list) :) Later, Mike writes: Okay, trying to debug this weird stack corruption thing, I thought\r\nalong the lines of: 1) Stacks should only be corrupted if an object is decref'd which\r\nshouldn't be, or an object is created without a reference to begin\r\nwith? No -- corrupt stacks can also come from the use of uninitialized\r\npointer variables, or out-of bounds indexing.  There could be some\r\npretty subtle off-by-one errors in your code! 2) You only need to decref objects if you're worried about memory\r\nleaks, since I'm just debugging, I'm not worried right now You're doing yourself a big disfavor here.  Sure, core dumps are more\r\nserious problems than memory leaks, but memory leaks aren't any easier\r\nto find -- in fact, they are probably harder to find, because they\r\nhide in otherwise perfectly working code.  A memory leak that happens\r\nto be triggered in a loop can grow your memory so fast that you have\r\nno choice but start debugging right there! The proper approach is to try and make sure that you have the right\r\nINCREF and DECREF calls at each place -- and the only way to go is to\r\nknow (from the manual) the reference count behavior of each function\r\nyou call (including functions you wrote yourself!). 3) If I comment out all the DECREF calls, I should only have to\r\nworry about objects that I've created which don't have reference\r\ncounts?  So, if I add an incref everywhere a new object is created,\r\nI should have a huge memory leak, but no stack corruption. No, that's not how it works.  When an object is created, it already\r\ncomes with a reference count of one.  The API manual says of this\r\nsituation that you \"own\" a reference.  (You don't own the object -- it\r\nmay be shared.  E.g. small integers and short strings are cached and\r\nshared aggressively -- but that doesn't affect whether you own a\r\nreference to them.)  Many routines that extract objects from other\r\nobjects also give you the responsibility of owning a reference to the\r\nobject, e.g. PyObject_GetAttr() and PyObject_GetItem(). On the other hand (and these are the most common examples, but not the\r\nonly ones), PyList_GetItem(), PyTuple_GetItem(), PyDict_GetItem() and\r\nPyDict_GetItemString() all return to you an object without ownership\r\nof a reference to the object.  This is called a \"borrowed\" reference.\r\nWhen you pass a borrowed reference to another call that expects you to \r\nINCREF its argument (like PyList_SetItem() discussed above), you have\r\na problem. I suspect that the cause of your problem might be one of these cases,\r\nbut since you won't post your code I can't be of much more help here\r\n-- I don't even know which functions you are calling.  Perhaps you\r\ncould compile a list of Py* functions you are calling and any\r\nquestions you have regarding their reference count behavior after\r\nlooking them up in the manual? Of course, this didn't work or I wouldn't be bothering everyone with\r\nit. Am now breaking the thing down into smaller functions to see if\r\nthat will help in tracking down the error (though it will almost\r\ncertainly slow the function down).  Is there a FAQ on\r\nreference-counting woes somewhere? There's really nothing that replace understanding the reference count\r\nbehavior of each function you're using.  The Python/C API manual is\r\nyour friend.  (And I promise to fix it when you find specific\r\ninformation missing or hard to find.) The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Debugging Reference Count Problems", "Debugging Reference Count Problems", "The PSF"]}
{"url": "https://www.python.org/doc/essays/cleanup/", "title": "Proposed Improvements to Module Cleanup | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Proposed Improvements to Module Cleanup Proposed Improvements to Module Cleanup I'm experimenting with a better way of cleaning up at the end of an\r\nexecution run.  Without implementing true GC, I can never do it 100%\r\nright, but I can implement a predictable set of rules based on\r\npractical observation that will solve most problems that are actually\r\nobserved. Here's my proposal.  At the end of this message I list some potential\r\nproblems with the proposal and ask for feedback.  This will probably\r\nbe implemented in Python 1.5.1. Contents: Algorithms Motivation Problems and Questions Revised version Based on some comments I received and some more thinking, I've\r\nchanged this a bit since my web posting on this subject.  Significant\r\nChanges are indicated in the text by [ italicized remarks in square\r\nbrackets ]. Algorithms When a Python interpreter is deleted, its variables and modules are\r\n\"cleared carefully\" in a partially specified order.  The operation\r\n\"clear carefully\" is defined below; it effectively deletes the\r\nmodule's variables in a partially specified order. M1. Before anything else, the following variables are set to None\r\n(not necessarily in this order): __builtin__._ sys.exc_{type,value,traceback} sys.last_{type,value,traceback} sys.path sys.argv sys.ps1, sys.ps2 sys.exitfunc path, argv, ps1, ps2 and exitfunc are new in this list. ] M2. The three standard I/O files (sys.stdin, sys.stdout and\r\nsys.stderr) are restored to their initial values (which are saved as\r\nsys.__stdin__, sys.__stdout__ and sys.__stderr__, respectively, when\r\nthe interpreter starts).  If any of the initial values is unavailable,\r\nthe corresponding object is set to None.\r\n[ New. ] M3. Clear module __main__ carefully before any other modules.\r\n[ This used to be done after the next step. ] M4. Loop over all modules repeatedly, looking for modules with a\r\nreference count of one.  Each module with a reference count of one is\r\ncleared carefully.  The loop stops when no more modules with a\r\nreference count of one are found.  The modules __builtin__ and sys are \r\nexcluded from the loop. M5. Clear all remaining modules carefully, except __builtin__ and sys. M6. Clear sys carefully. M7. Clear __builtin__ carefully. To clear a module carefully, the following steps are taken: C1. In an order determined by the dictionary hashing of the names, set\r\nall names to None that start with exactly one underscore. C2. In an order determined by the dictionary hashing of the names,\r\nset all names to None except __builtins__.\r\n[ This used to be \"all names that do not start with two or more\r\nunderscores\". ] Deleted step: In an order determined by the dictionary hashing\r\nof the names, delete all remaining names from the module's dictionary\r\n(this is done by a call to __dict__.clear()). ] C3. The module itself is replaced by None in the dictionary of\r\nmodules (sys.modules). New. ] Steps C1-C2 will also be used when a module is\r\ndeallocated.  While modules are generally not involved in cycles\r\n(except when there are mutually recursive imports), a module's\r\ndictionary generally is involved in a cycle because every function and\r\nmethod defined in the module references its __dict__, and these\r\nfunctions and methods are generally reachable from that __dict__.\r\nThus, when a module is deleted, I explicitly clear its __dict__\r\ncarefully.  (This has always been done, just not \"carefully\".) Motivation M1 is done because these variables are common places for user values\r\nto hide, and they would come too late in the proposed order.  (In fact\r\nnearly all reported problems with destructors not being called when\r\nexpected have to do with these.) M3 is there because __main__ is conceptually the \"root\" of the\r\nprogram -- if it is not imported by other modules, it would be deleted\r\nfirst by step M4 anyway, but if it is imported elsewhere,\r\ndeleting __main__ is a plausible way to break a tie. M4 is an explicit garbage collection loop -- it deletes all those\r\nmodules which are referenced by no other modules, only by the table of\r\nmodules (sys.modules) itself.  It may not delete all modules, however,\r\nwhen there are mutual imports; the remaining steps take care of those. M5 is needed to take care of mutually recursive imports, which create\r\ncycles so that M4 won't delete everything. The special treatment of __builtin__ and sys is because these are\r\nreferenced by the interpreter implicitly by many operations;\r\n__builtin__ of course contains all the built-in functions and\r\nexceptions; sys contains the standard I/O files which are referenced\r\nimplicitly by various I/O operations.  So they are excluded in M2 and\r\nM4.  __builtin__ is deleted last because it contains the most\r\nbasic and fundamental values. The special care for cleaning up a module's dictionary is needed\r\nbecause there's a fundamental circular reference whenever a module\r\ndefines a Python function or class.  A function object contains a\r\nreference to the function's 'globals' object, which is the __dict__ of \r\nthe module that defines it.  Since the __dict__ normally has a\r\nreference to the function there's a cycle that needs to be broken, or\r\nelse the __dict__ would never be garbage collected. Note that a reference-count based solution doesn't work within one\r\nmodule, since references between functions are by name, not by value\r\n-- two mutually recursive functions can still both have a reference\r\ncount of one, since they do a name lookup for each other. C1 is an attempt to provide a way for a module to define globals that\r\nare deleted before anything else in the module.  Since imported module \r\nor function names generally don't begin with an underscore, this means \r\nthat such objects can be guaranteed that any imported modules or\r\nfunctions still exist when they are deleted -- provided, of course,\r\nthat the only reference to them is in the module.  (This step is\r\nalready implemented in 1.5 as released.) C2 deletes the remaining objects but leaves the \"internal global\r\nvariable\" __builtins__ alone -- this prevents the problem that the 1.5\r\nrelease has where e.g. using \"None\" in a destructor raises a\r\nNameError! C3 removes the reference to the module from the modules table in a\r\nway that makes a later import of the same module fail.  (It is\r\npossible for user code to delete this entry and still start a\r\ncompletely new import -- but if they are that clever they deserve what\r\nthey get.) Problems and Questions P1. When all uses of a module M have the form ``from M import ...'',\r\nthe module M will have a reference count of 1.  So it will be deleted\r\nin step M1.  This renders all but the most trivial functions defined\r\nin the module (which are presumably still referenced by other modules)\r\nuseless, since the imported modules and functions that they might need\r\nare all deleted from their globals.  A simple remedy of course is not\r\nto use ``from M import ...'', but this sounds like it might become a\r\nFAQ...  The problem is that I don't know of a better way -- because of\r\nthe circular references between functions and their module's __dict__,\r\nI can't use the reference count of the __dict__ in step M1.  I think\r\nit is acceptable -- this behaviour also existed in 1.4 and earlier\r\nversions.  (It has been suggested to add a reference named e.g.\r\n\". module \" in the importing module, to indicate the dependency\r\nand prevent this problem; while this may do the job nicely, I'm\r\nreluctant to implement it because it may confuse introspective tools.) The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Proposed Improvements to Module Cleanup", "Proposed Improvements to Module Cleanup", "Revised version", "The PSF"]}
{"url": "https://www.python.org/doc/essays/comparisons/", "title": "Comparing Python to Other Languages | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Comparing Python to Other Languages Comparing Python to Other Languages Disclaimer: This essay was written sometime in\r\n1997.  It shows its age.  It is retained here merely as a historical\r\nartifact.  --Guido van Rossum Python is often compared to other interpreted languages such as Java,\r\nJavaScript, Perl, Tcl, or Smalltalk.  Comparisons to C++, Common Lisp\r\nand Scheme can also be enlightening. In this section I will briefly\r\ncompare Python to each of these languages. These comparisons\r\nconcentrate on language issues only. In practice, the choice of a\r\nprogramming language is often dictated by other real-world constraints\r\nsuch as cost, availability, training, and prior investment, or even\r\nemotional attachment. Since these aspects are highly variable, it\r\nseems a waste of time to consider them much for this comparison. Java Python programs are generally expected to run slower than Java\r\nprograms, but they also take much less time to develop. Python\r\nprograms are typically 3-5 times shorter than equivalent Java\r\nprograms. This difference can be attributed to Python's built-in\r\nhigh-level data types and its dynamic typing. For example, a Python\r\nprogrammer wastes no time declaring the types of arguments or\r\nvariables, and Python's powerful polymorphic list and dictionary\r\ntypes, for which rich syntactic support is built straight into the\r\nlanguage, find a use in almost every Python program. Because of the\r\nrun-time typing, Python's run time must work harder than Java's. For\r\nexample, when evaluating the expression a+b, it must first inspect the\r\nobjects a and b to find out their type, which is not known at compile\r\ntime. It then invokes the appropriate addition operation, which may be\r\nan overloaded user-defined method. Java, on the other hand, can\r\nperform an efficient integer or floating point addition, but requires\r\nvariable declarations for a and b, and does not allow overloading of\r\nthe + operator for instances of user-defined classes. For these reasons, Python is much better suited as a \"glue\" language,\r\nwhile Java is better characterized as a low-level implementation\r\nlanguage. In fact, the two together make an excellent\r\ncombination. Components can be developed in Java and combined to form\r\napplications in Python; Python can also be used to prototype\r\ncomponents until their design can be \"hardened\" in a Java\r\nimplementation. To support this type of development, a Python\r\nimplementation written in Java is under development, which allows\r\ncalling Python code from Java and vice versa. In this implementation,\r\nPython source code is translated to Java bytecode (with help from a\r\nrun-time library to support Python's dynamic semantics). Javascript Python's \"object-based\" subset is roughly equivalent to\r\nJavaScript. Like JavaScript (and unlike Java), Python supports a\r\nprogramming style that uses simple functions and variables without\r\nengaging in class definitions. However, for JavaScript, that's all\r\nthere is. Python, on the other hand, supports writing much larger\r\nprograms and better code reuse through a true object-oriented\r\nprogramming style, where classes and inheritance play an important\r\nrole. Perl Python and Perl come from a similar background (Unix scripting, which\r\nboth have long outgrown), and sport many similar features, but have a\r\ndifferent philosophy. Perl emphasizes support for common\r\napplication-oriented tasks, e.g. by having built-in regular\r\nexpressions, file scanning and report generating features. Python\r\nemphasizes support for common programming methodologies such as data\r\nstructure design and object-oriented programming, and encourages\r\nprogrammers to write readable (and thus maintainable) code by\r\nproviding an elegant but not overly cryptic notation. As a\r\nconsequence, Python comes close to Perl but rarely beats it in its\r\noriginal application domain; however Python has an applicability well\r\nbeyond Perl's niche. Tcl Like Python, Tcl is usable as an application extension language, as\r\nwell as a stand-alone programming language. However, Tcl, which\r\ntraditionally stores all data as strings, is weak on data structures,\r\nand executes typical code much slower than Python. Tcl also lacks\r\nfeatures needed for writing large programs, such as modular\r\nnamespaces. Thus, while a \"typical\" large application using Tcl\r\nusually contains Tcl extensions written in C or C++ that are specific\r\nto that application, an equivalent Python application can often be\r\nwritten in \"pure Python\". Of course, pure Python development is much\r\nquicker than having to write and debug a C or C++ component. It has\r\nbeen said that Tcl's one redeeming quality is the Tk toolkit.  Python\r\nhas adopted an interface to Tk as its standard GUI component library. Tcl 8.0 addresses the speed issuse by providing a bytecode compiler\r\nwith limited data type support, and adds namespaces.  However, it is\r\nstill a much more cumbersome programming language. Smalltalk Perhaps the biggest difference between Python and Smalltalk is\r\nPython's more \"mainstream\" syntax, which gives it a leg up on\r\nprogrammer training. Like Smalltalk, Python has dynamic typing and\r\nbinding, and everything in Python is an object. However, Python\r\ndistinguishes built-in object types from user-defined classes, and\r\ncurrently doesn't allow inheritance from built-in types. Smalltalk's\r\nstandard library of collection data types is more refined, while\r\nPython's library has more facilities for dealing with Internet and WWW\r\nrealities such as email, HTML and FTP. Python has a different philosophy regarding the development\r\nenvironment and distribution of code. Where Smalltalk traditionally\r\nhas a monolithic \"system image\" which comprises both the environment\r\nand the user's program, Python stores both standard modules and user\r\nmodules in individual files which can easily be rearranged or\r\ndistributed outside the system. One consequence is that there is more\r\nthan one option for attaching a Graphical User Interface (GUI) to a\r\nPython program, since the GUI is not built into the system. C++ Almost everything said for Java also applies for C++, just more so:\r\nwhere Python code is typically 3-5 times shorter than equivalent Java\r\ncode, it is often 5-10 times shorter than equivalent C++ code!\r\nAnecdotal evidence suggests that one Python programmer can finish in\r\ntwo months what two C++ programmers can't complete in a year. Python\r\nshines as a glue language, used to combine components written in C++. Common Lisp and Scheme These languages are close to Python in their dynamic semantics, but\r\nso different in their approach to syntax that a comparison becomes\r\nalmost a religious argument: is Lisp's lack of syntax an advantage or\r\na disadvantage? It should be noted that Python has introspective\r\ncapabilities similar to those of Lisp, and Python programs can\r\nconstruct and execute program fragments on the fly. Usually,\r\nreal-world properties are decisive: Common Lisp is big (in every\r\nsense), and the Scheme world is fragmented between many incompatible\r\nversions, where Python has a single, free, compact implementation. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Comparing Python to Other Languages", "Comparing Python to Other Languages", "Java", "Javascript", "Perl", "Tcl", "Smalltalk", "C++", "Common Lisp and Scheme", "The PSF"]}
{"url": "https://www.python.org/doc/essays/blurb/", "title": "What is Python?  Executive Summary | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event What is Python?  Executive Summary What is Python?  Executive Summary Python is an interpreted, object-oriented, high-level programming\r\nlanguage with dynamic semantics.  Its high-level built in data\r\nstructures, combined with dynamic typing and dynamic binding, make it\r\nvery attractive for Rapid Application Development, as well as for use\r\nas a scripting or glue language to connect existing components\r\ntogether.  Python's simple, easy to learn syntax emphasizes\r\nreadability and therefore reduces the cost of program maintenance.\r\nPython supports modules and packages, which encourages program\r\nmodularity and code reuse.  The Python interpreter and the extensive\r\nstandard library are available in source or binary form without charge\r\nfor all major platforms, and can be freely distributed. Often, programmers fall in love with Python because of the\r\nincreased productivity it provides.  Since there is no compilation\r\nstep, the edit-test-debug cycle is incredibly fast. Debugging Python\r\nprograms is easy: a bug or bad input will never cause a segmentation\r\nfault.  Instead, when the interpreter discovers an error, it raises an\r\nexception.  When the program doesn't catch the exception, the\r\ninterpreter prints a stack trace. A source level debugger allows\r\ninspection of local and global variables, evaluation of arbitrary\r\nexpressions, setting breakpoints, stepping through the code a line at\r\na time, and so on. The debugger is written in Python itself,\r\ntestifying to Python's introspective power. On the other hand, often\r\nthe quickest way to debug a program is to add a few print statements\r\nto the source: the fast edit-test-debug cycle makes this simple\r\napproach very effective. See also some comparisons between\r\nPython and other languages. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["What is Python?  Executive Summary", "What is Python?  Executive Summary", "The PSF"]}
{"url": "https://www.python.org/doc/essays/omg-darpa-mcc-position/", "title": "Glue It All Together With Python | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Glue It All Together With Python Glue It All Together With Python Guido van Rossum CNRI 1895 Preston White Drive Reston, VA 20191 Email: guido@cnri.reston.va.us , guido@python.org Position paper for the OMG-DARPA-MCC Workshop on Compositional Software Architecture in\r\nMonterey, California, January 6-8, 1998. Introduction Python is an advanced scripting language that is being used\r\nsuccessfully to glue together large software components.  It spans\r\nmultiple platforms, middleware products, and application domains.\r\nPython is an object-oriented language with high-level data structures,\r\ndynamic typing, and dynamic binding.  Python has been around since\r\n1991, and has a very active user community.  For more information, see\r\nthe Python website http://www.python.org . Like Tcl, Python is easily extensible with C/C++/Java code, and\r\neasily embeddable in applications.  Python even uses Tk, the Tcl GUI\r\ntoolkit, for a de-facto standard portable GUI toolkit.  Unlike Tcl,\r\nhowever, Python supports object-oriented programming.  Python\r\nprogrammers can create classes, use multiple inheritance, define\r\nmethods, overload operators, and so on. Python's Strengths Syntactically, Python code looks like executable pseudo code.\r\nProgram development using Python is 5-10 times faster than using\r\nC/C++, and 3-5 times faster than using Java.  In many cases, a\r\nprototype of an application can be written in Python without writing\r\nany C/C++/Java code.  Often, the prototype is sufficiently functional\r\nand performs well enough to be delivered as the final product, saving\r\nconsiderable development time.  Other times, the prototype can be\r\ntranslated in part or in whole to C++ or Java -- Python's\r\nobject-oriented nature makes the translation a straightforward\r\nprocess. The best approach is often to write only the performance-critical\r\nparts of the application in C++ or Java, and use Python for all\r\nhigher-level control and customization.  There are several anecdotes\r\nabout applications that started out as pure C++ code to which Python\r\nwas added as an extension language, where in each new version the\r\npercentage of the application written in Python increased, while also\r\nincreasing the overall performance, functionality and reliability of\r\nthe application.  (E.g. Case Study: Python in a Commercial\r\nEnvironment, by Greg Stein, Microsoft, in Proceedings\r\nof the 6th International Python Conference , and the Alice VR project at UvA and CMU.) Python has a strong presence on the web.  It is suitable for CGI\r\nprogramming (on all platforms: Unix, Windows and Mac); there are\r\ninterfaces to all major commercial databases.  Python has a library\r\nthat interfaces to the main Internet and web protocols, and has HTML\r\nparsing and generation toolkits.  Python was a major implementation\r\nlanguage for Infoseek when they\r\nwere smaller.  At least one company ( Digital Creations ) is selling a suite of server side tools using\r\nPython.  And finally, Python has been used to implement a web browser\r\n( Grail ). Python is also well represented in the distributed systems world.\r\nIt is one of the main languages supported by Xerox PARC's ILU (Inter-Language Unification; a CORBA compatible distributed object\r\nsystem), and many distributed applications have been built in Python\r\nusing ILU.  Python is also used by the Hector project at the\r\nUniversity of Queensland, Australia. Finally, Python is well integrated with the Windows platforms.\r\nPython programs can interact with COM and DCOM services, and can even\r\nimplement new COM and DCOM services (which is not possible using\r\nVisual Basic!).  Python can also be used as a scripting engine in\r\nMicrosoft's Active Scripting architecture. Using Python as an Integration Language Relevant to the topic of this workshop, Python is in use at many\r\nplaces as an integration language, used to glue together (\"steer\")\r\nexisting components.  The strategy here is to create Python extension\r\nmodules (written in C/C++) that make the functionality of large\r\ncomponents written in C/C++ available to the Python programmer.  The\r\nextension (\"glue\") modules are required because Python cannot call\r\nC/C++ functions directly; the glue extensions handle conversion\r\nbetween Python data types and C/C++ data types and error checking,\r\ntranslation error return values into Python exception. Creation of glue extensions is simplified by the existence of SWIG , which reads\r\nheader files containing function and method prototypes and\r\nautomatically generates the necessary type conversion and error\r\nchecking code.  In situations where the underlying code (usually C\r\ncode) doesn't use an object-oriented model, the glue extension can in\r\nturn be wrapped in a Python module that defines a proper class\r\nhierarchy, while delegating the performance critical operations to the\r\nC code. Using Python, better applications can be developed because\r\ndifferent kinds of programmers can work together on a project.  For\r\nexample, when building a scientific application, C/C++ programmers can\r\nimplement efficient numerical algorithms, while scientists on the same\r\nproject can write Python programs that test and use those algorithms.\r\nThe scientist doesn't have to learn a low-level programming language,\r\nand the C/C++ programmer doesn't need to understand the science\r\ninvolved. Without Python, large amounts of C/C++ code often have to be written\r\njust to provide a flexible enough input mechanism so that scientists\r\ncan feed the program its data, in all the variantions that are\r\nrequired for reasons of experimental setup (for instance).  With\r\nPython, Python can be used to wrote a much more flexible input\r\nmechanism in a much shorter time, or Python itself can be the ultimate\r\nflexible input mechanism.  As an extreme example, Lawrence Livermore\r\nNational Laboratories is using Python to eventually replace a\r\nscripting language (BASIS) that was developed in house for the same\r\npurpose; BASIS started out as a simple input mechanism for Fortran\r\nprograms, and gradually acquired many features of scripting languages\r\n(variables, conditionals, loops, procedures and so on) with increasing\r\nawkwardness. Because Python has existing interfaces to so many different\r\ncomponents in very different application domains, Python is ideal for\r\noddball integration tasks.  It can link a commercial database to\r\nnumber-crunching code; it can add a graphical user interface to a\r\nnetwork management tool; it can send email from a virtual reality\r\napplication. Conclusion Python can fulfill an important integration role in the design of\r\nlarge applications with a long life expectancy.  It allows a fast\r\nresponse to changes in user requirements that require adapting the\r\nhigher-level application logic without changing the fundamental\r\nunderlying components.  It also allows quick adaptation of the\r\napplication to changes in the underlying components. Epilogue: Python and Java Integration A new Python implementation written in 100% Pure Java, dubbed JPython , is currently under\r\ndevelopment; alpha releases are available for evaluation.  JPython\r\noffers seamless scripting for Java.  It is a full implementation of\r\nthe Python language and standard library, adding direct access to the\r\nuniverse of Java classes.  Java code can also use Python classes --\r\nthis is important for callbacks, for instance. The main thrust for JPython is that it does for Java what Python\r\nalready does for C and C++: to present programmers with more options\r\nin the trade-off between development time and execution time, by\r\nproviding a more dynamic, more expressive alternative.  JPython's\r\nintegration with Java is superior to Python's integration with C/C++:\r\ndue to Java's Reflection API, JPython can use arbitrary Java classes\r\nwithout the help of a wrapper generator such as SWIG.  (C/C++ code\r\nmust first be made available to Java through the Java native code\r\ninterface; once it is callable from Java it is callable from JPython.) The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Glue It All Together With Python", "Glue It All Together With Python", "Introduction", "Python's Strengths", "Using Python as an Integration Language", "Conclusion", "Epilogue: Python and Java Integration", "The PSF"]}
{"url": "https://www.python.org/doc/essays/stdexceptions/", "title": "Standard Exception Classes in Python 1.5 | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Standard Exception Classes in Python 1.5 Standard Exception Classes in Python 1.5 (updated for Python 1.5.2 -baw) User-defined Python exceptions can be either strings or Python\r\nclasses.  Since classes have many nice properties when used as\r\nexceptions, it is desirable to migrate to a situation where classes\r\nare used exclusively.  Prior to Python 1.5 alpha 4, Python's standard\r\nexceptions (IOError, TypeError, etc.) were defined as strings.\r\nChanging these to classes posed some particularly nasty backward\r\ncompatibility problems. In Python versions 1.5 and later, the standard exceptions are\r\nPython classes, and a few new standard exceptions have been added.\r\nThe obsolete AccessError exception has been deleted.  Because it is\r\npossible (although unlikely) that this change broke existing code, the\r\nPython interpreter can be invoked the command line option -X to disable this feature, and use string exceptions\r\nlike before.  This option is a temporary measure - eventually the\r\nstring-based standard exceptions will be removed from the language\r\naltogether.  It hasn't been decided whether user-defined string\r\nexceptions will be allowed in Python 2.0. The Standard Exception Hierarchy Behold the standard exception hierarchy.  It is defined in the new\r\nstandard library module exceptions.py.  Exceptions that were new since\r\nPython 1.5 are marked with (*). Exception(*)\r\n |\r\n +-- SystemExit\r\n +-- StandardError(*)\r\n      |\r\n      +-- KeyboardInterrupt\r\n      +-- ImportError\r\n      +-- EnvironmentError(*)\r\n      |    |\r\n      |    +-- IOError\r\n      |    +-- OSError(*)\r\n      |\r\n      +-- EOFError\r\n      +-- RuntimeError\r\n      |    |\r\n      |    +-- NotImplementedError(*)\r\n      |\r\n      +-- NameError\r\n      +-- AttributeError\r\n      +-- SyntaxError\r\n      +-- TypeError\r\n      +-- AssertionError\r\n      +-- LookupError(*)\r\n      |    |\r\n      |    +-- IndexError\r\n      |    +-- KeyError\r\n      |\r\n      +-- ArithmeticError(*)\r\n      |    |\r\n      |    +-- OverflowError\r\n      |    +-- ZeroDivisionError\r\n      |    +-- FloatingPointError\r\n      |\r\n      +-- ValueError\r\n      +-- SystemError\r\n      +-- MemoryError The root class for all exceptions is the new exception Exception.\r\nFrom this, two additional classes are derived, StandardError, which is\r\nthe root class for all standard exceptions, and SystemExit.  It is\r\nrecommended that user-defined exceptions in new code be derived from\r\nException, although for backward compatibility reasons, this is not\r\nrequired.  Eventually this rule will be tightened. SystemExit is derived from Exception because while it is an\r\nexception, it is not an error. Most standard exceptions are direct descendants of StandardError.\r\nSome related exceptions are grouped together using an intermediate\r\nclass derived from StandardError; this makes it possible to catch\r\nseveral different exceptions in one except clause, without using the\r\ntuple notation. We looked into introducing more groups of related exceptions,\r\nbut couldn't decide on the best grouping.  In a language as dynamic as\r\nPython, it's hard to say whether TypeError is a \"program error\", a\r\n\"runtime error\" or an \"environmental error\", so we decided to leave it\r\nundecided.  It could be argued that NameError and AttributeError\r\nshould be derived from LookupError, but this is questionable and\r\ndepends entirely on the application. Exception Class Definitions The Python class definitions for the standard exceptions are\r\nimported from the standard module \"exceptions\".  You can't change this\r\nfile thinking that the changes will automatically show up in the\r\nstandard exceptions; the builtin module expects the current hierarchy\r\nas defined in exceptions.py. Details on the standard exception classes are available in the\r\nPython library reference manual's entry for the exceptions module. Changes to raise The raise statement has been extended to allow raising a class\r\nexception without explicit instantiation.  The following forms, called\r\nthe \"compatibility forms\" of the raise statement, are allowed: raise exception raise exception , argument raise exception , ( argument, argument, ... ) When exception is a class, these are equivalent to the\r\nfollowing forms: raise exception () raise exception ( argument ) raise exception ( argument, argument, ... ) Note that these are all examples of the form raise instance which in itself is a shorthand for raise class , instance where class is the class to which instance belongs.\r\nIn Python 1.4, only the forms raise class , instance and raise instance were allowed;\r\nin Python 1.5 (starting with 1.5a1) the forms raise class and raise class , argument(s) were added.  The allowable forms for string exceptions are unchanged. For various reasons, passing None as the second argument to\r\nraise is equivalent to omitting it.  In particular, the\r\nstatement raise class , None is equivalent to raise class () and not to raise class ( None ) Likewise, the statement raise class , value where value happens to be a tuple is equivalent to passing the\r\ntuple's items as individual arguments to the class constructor, rather\r\nthan passing value as a single argument (and an empty tuple\r\ncalls the constructor without arguments).  This makes a difference\r\nbecause there's a difference between f(a,\u00a0b) and f((a,\u00a0b)) . These are all compromises - they work well with the kind of\r\narguments that the standard exceptions typically take (like a simple\r\nstring).  For clarity in new code, the form raise class ( argument , ...) is recommended (i.e. make an explicit call to the constructor). How Does This Help? The motivation for introducing the compatibility forms was to allow\r\nbackward compatibility with old code that raised a standard exception.\r\nFor example, a __getattr__ hook might invoke the statement raise AttributeError , attrname when the desired attribute is not defined. Using the new class exceptions, the proper exception to raise would\r\nbe AttributeError ( attrname ); the compatibility\r\nforms ensure that the old code doesn't break.  (In fact, new code that\r\nwants to be compatible with the -X option must use the\r\ncompatibility forms, but this is highly discouraged.) Changes to except No user-visible changes were made to the except clause of the try statement. Internally, a lot has changed.  For example, class exceptions\r\nraised from C are instantiated when they are caught, not when they are\r\nraised.  This is a performance hack so that exceptions raised and\r\ncaught entirely in C never pay the penalty of instantiation.  For\r\nexample, iteration through a list in a for statement\r\nraises an IndexError at the end of the list by the list object, but\r\nthe exception is caught in C and so never instantiated. What Could Break? The new design does its very best not to break old code, but there\r\nare some cases where it wasn't worth compromising the new semantics in\r\norder to avoid breaking code.  In other words, some old code may\r\nbreak.  That's why the -X switch is there; however this shouldn't be\r\nan excuse for not fixing your code. There are two kinds of breakage: sometimes, code will print\r\nslightly funny error messages when it catches a class exception but\r\nexpects a string exception.  And sometimes, but much less often, code\r\nwill actually crash or otherwise do the wrong thing in its error\r\nhandling. Non-fatal Breakage An examples of the first kind of breakage is code that attempts to\r\nprint the exception name, e.g. try:\r\n    1/0\r\nexcept:\r\n    print \"Sorry:\", sys.exc_type, \":\", sys.exc_value With string-based exceptions, this would print something like Sorry: ZeroDivisionError : integer division or modulo With class-based exceptions, it will print Sorry: exceptions.ZeroDivisionError : integer division or modulo The funny exceptions.ZeroDivisionError occurs because\r\nwhen an exception type is a class it is printed as modulename.classname .  This is handled internally by Python. Fatal Breakage More serious is breaking error handling code.  This usually happens\r\nbecause the error handling code expects the exception or the value\r\nassociated with the exception to have a particular type (usually\r\nstring or tuple).  With the new scheme, the type is a class and the\r\nvalue is a class instance.  For example, the following code will\r\nbreak: try:\r\n    raise Exception()\r\nexcept:\r\n    print \"Sorry:\", sys.exc_type + \":\", sys.exc_value because it tries to concatenate the exception type (a class object)\r\nwith a string.  A fix (also for the previous example) would be to write try:\r\n    raise Exception()\r\nexcept:\r\n    etype = sys.exc_type       # Save it; try-except overwrites it!\r\n    try:\r\n        ename = etype.__name__ # Get class name if it is a class\r\n    except AttributeError:\r\n        ename = etype\r\n    print \"Sorry:\", str(ename) + \":\", sys.exc_value Note how this example avoids an explicit type test!  Instead, it\r\nsimply catches the (new) exception raised when the __name__ attribute\r\nis not found.  Just to be absolutely sure that we're concatenating a\r\nstring, the built-in function str() is applied. Another example involves code that assumes too much about the type\r\nof the value associated with the exception.  For example: try:\r\n    open('file-doesnt-exist')\r\nexcept IOError, v:\r\n    if type(v) == type(()) and len(v) == 2:\r\n        (code, message) = v\r\n    else:\r\n        code = 0\r\n        message = v\r\n    print \"I/O Error: \" + message + \" (\" + str(code) + \")\"\r\n    print This code understands that IOError is often raised with a tuple of the\r\nform (errorcode, message), and sometimes with just a string.  However,\r\nsince it explicitly tests for tuple-ness of the value, it will crash\r\nwhen the value is an instance! Again, the remedy is to just go ahead and try the tuple unpack, and\r\nif it fails, use the fallback strategy: try:\r\n    open('file-doesnt-exist')\r\nexcept IOError, v:\r\n    try:\r\n        (code, message) = v\r\n    except:\r\n        code = 0\r\n        message = v\r\n    print \"I/O Error: \" + str(message) + \" (\" + str(code) + \")\"\r\n    print This works because the tuple-unpack semantics have been loosened to\r\nwork with any sequence on the right-hand size (see the section on\r\nSequence Unpacking below), and the standard exception classes can be\r\naccessed like a sequence (by virtue of their __getitem__ method, see\r\nabove). Note that the second try-except statement does not specify the\r\nexception to catch - this is because with string exceptions, the\r\nexception raised is \"TypeError: unpack non-tuple\", while with class\r\nexceptions it is \"ValueError: unpack sequence of wrong size\".  This\r\nis because a string is a sequence; we must assume that error messages\r\nare always more than two characters long! (An alternative approach would be to use try-except to test for the\r\npresence of the errno attribute; in the future, this would make sense,\r\nbut at the present time it would require even more code in order to be\r\ncompatible with string exceptions.) Changes to the C API XXX To be described in more detail: int PyErr_ExceptionMatches(PyObject *);\r\nint PyErr_GivenExceptionMatches(PyObject *, PyObject *);\r\nvoid PyErr_NormalizeException(PyObject**, PyObject**, PyObject**); PyErr_ExceptionMatches(exception) should be used in preference over\r\nPyErr_Occurred()==exception, since the latter will return an incorrect\r\nresult when the exception raised is a class derived from the exception\r\ntested for. PyErr_GivenExceptionMatches(raised_exception, exception) performs\r\nthe same test as PyErr_ExceptionMatches() but allows you to pass the\r\nraised exception in explicitly. PyErr_NormalizeException() is mostly for internal use. Other Changes Some changes to the language were made as part of the same project. New Builtin Functions Two new intrinsic functions for class testing were introduced\r\n(since the functionality had to be implemented in the C API, there was\r\nno reason not to make it accessible to Python programmers). issubclass(D, C) returns true iff class D is derived\r\nfrom class C,\r\ndirectly or indirectly.  issubclass(C,\u00a0C) always returns true.  Both\r\narguments must be class objects. isinstance(x, C) returns true iff x is an\r\ninstance of C or of a\r\n(direct or indirect) subclass of C.  The first argument may hyave any\r\ntype; if x is not an instance of any class, isinstance(x,\u00a0C) always\r\nreturns false.  The second argument must be a class object. Sequence Unpacking Previous Python versions require an exact type match between the\r\nleft hand and right hand side of \"unpacking\" assignments, e.g. (a, b, c) = x requires that x is a tuple with three items, while requires that x is a list with three items. As part of the same project, the right hand side of either statement can be\r\nany sequence with exactly three items.  This makes it possible to\r\nextract e.g. the errno and strerror values from an IOError exception\r\nin a backwards compatible way: try:\r\n    f = open(filename, mode)\r\nexcept IOError, what:\r\n    (errno, strerror) = what\r\n    print \"Error number\", errno, \"(%s)\" % strerror The same approach works for the SyntaxError exception, with the\r\nproviso that the info part is not always present: try:\r\n    c = compile(source, filename, \"exec\")\r\nexcept SyntaxError, what:\r\n    try:\r\n        message, info = what\r\n    except:\r\n        message, info = what, None\r\n    if info:\r\n        \"...print source code info...\"\r\n    print \"SyntaxError:\", msg The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Standard Exception Classes in Python 1.5", "Standard Exception Classes in Python 1.5", "The Standard Exception Hierarchy", "Changes to", "Changes to", "What Could Break?", "Changes to the C API", "Other Changes", "The PSF"]}
{"url": "https://www.python.org/doc/essays/packages/", "title": "Built-in Package Support in Python 1.5 | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Built-in Package Support in Python 1.5 Built-in Package Support in Python 1.5 Starting with Python version 1.5a4, package support is built into\r\nthe Python interpreter.  This implements a slightly simplified and\r\nmodified version of the package import semantics pioneered by the \"ni\"\r\nmodule. \"Package import\" is a method to structure Python's module namespace\r\nby using \"dotted module names\".  For example, the module name A.B\r\ndesignates a submodule named B in a package named A.  Just like the\r\nuse of modules saves the authors of different modules from having to\r\nworry about each other's global variable names, the use of dotted\r\nmodule names saves the authors of multi-module packages like NumPy or\r\nPIL from having to worry about each other's module names. Starting with Python version 1.3, package import was supported by a\r\nstandard Python library module, \"ni\". (The name is supposed to be an\r\nacronym for New Import, but really referrs to the Knights Who Say\r\nNi in the movie Monty Python and the Holy Grail , who, after\r\nKing Arthur's knights return with a shrubbery, have changed their\r\nnames to the Knights Who Say Neeeow ... Wum ... Ping - but\r\nthat's another story.) The ni module was all user code except for a few modifications to\r\nthe Python parser (also introduced in 1.3) to accept import statements\r\nof the for \"import A.B.C\" and \"from A.B.C import X\".  When ni was not\r\nenabled, using this syntax resulted in a run-time error \"No such\r\nmodule\".  Once ni was enabled (by executing \"import ni\" before\r\nimporting other modules), ni's import hook would look for the\r\nsubmodule of the correct package. The new package support is designed to resemble ni, but has been\r\nstreamlined, and a few features have been changed or removed. An Example Suppose you want to design a package for the uniform handling of\r\nsound files and sound data.  There are many different sound file\r\nformats (usually recognized by their extension, e.g. .wav, .aiff,\r\n.au), so you may need to create and maintain a growing collection of\r\nmodules for the conversion between the various file formats.  There\r\nare also many different operations you might want to perform on sound\r\ndata (e.g. mixing, adding echo, applying an equalizer function,\r\ncreating an artificial stereo effect), so in addition you will be\r\nwriting a never-ending stream of modules to perform these operations.\r\nHere's a possible structure for your package (expressed in terms of a\r\nhierarchical filesystem): Sound/\t\t\t\tTop-level package\r\n      __init__.py\t\tInitialize the sound package\r\n      Utils/\t\t\tSubpackage for internal use\r\n            __init__.py\r\n            iobuffer.py\r\n\t    errors.py\r\n\t    ...\r\n      Formats/\t\t\tSubpackage for file format conversions\r\n              __init__.py\r\n              wavread.py\r\n\t      wavwrite.py\r\n\t      aiffread.py\r\n\t      aiffwrite.py\r\n\t      auread.py\r\n\t      auwrite.py\r\n\t      ...\r\n      Effects/\t\t\tSubpackage for sound effects\r\n              __init__.py\r\n\t      echo.py\r\n\t      surround.py\r\n\t      reverse.py\r\n\t      ...\r\n      Filters/\t\t\tSubpackage for filters\r\n              __init__.py\r\n              equalizer.py\r\n\t      vocoder.py\r\n\t      karaoke.py\r\n\t      dolby.py\r\n\t      ... Users of the package can import individual modules from the\r\npackage, for example: import Sound.Effects.echo This loads the submodule Sound.Effects.echo.  It must be referenced\r\nwith its full name, e.g. Sound.Effects.echo.echofilter(input, output, delay=0.7, atten=4) from Sound.Effects import echo This also loads the submodule echo, and makes it available without\r\nits package prefix, so it can be used as follows: echo.echofilter(input, output, delay=0.7, atten=4) from Sound.Effects.echo import echofilter Again, this loads the submodule echo, but this makes its function\r\nechofilter directly available: echofilter(input, output, delay=0.7, atten=4) Note that when using from package import item , the item can be either a submodule\r\n(or subpackage) of the package, or some other name defined in a the\r\npackage, like a function, class or variable.  The import statement\r\nfirst tests whether the item is defined in the package; if not, it\r\nassumes it is a module and attempts to load it.  If it fails to find\r\nit, ImportError is raised. Contrarily, when using syntax like import item.subitem.subsubitem , each item except for the last must be\r\na package; the last item can be a module or a package but can't be\r\na class or function or variable defined in the previous item. Importing * From a Package; the __all__ Attribute Now what happens when the user writes from Sound.Effects\r\nimport * ?  Ideally, one would hope that this somehow goes out\r\nto the filesystem, finds which submodules are present in the package,\r\nand imports them all.  Unfortunately, this operation does not work\r\nvery well on Mac and Windows platforms, where the filesystem does not\r\nalways have accurate information about the case of a filename!  On\r\nthese platforms, there is no guaranteed way to know whether a file\r\nECHO.PY should be imported as a module echo, Echo or ECHO.  (For\r\nexample, Windows 95 has the annoying practice of showing all file\r\nnames with a capitalized first letter.)  The DOS 8+3 filename\r\nrestriction adds another interesting problem for long module names. The only solution is for the package author to provide an explicit\r\nindex of the package.  The import statement uses the following\r\nconvention: if a package's __init__.py code defines a list named\r\n__all__, it is taken to be the list of module names that should be imported\r\nwhen from package import * is\r\nencountered.  It is up to the package author to keep this list\r\nup-to-date when a new version of the package is released.  Package\r\nauthors may also decide not to support it, if they don't see a use for\r\nimporting * from their package.  For example, the file Sounds/Effects/__init__.py could contain the following code: __all__ = [\"echo\", \"surround\", \"reverse\"] This would mean that from Sound.Effects import * would\r\nimport the three named submodules of the Sound package. If __all__ is not defined, the statement from Sound.Effects\r\nimport * does not import all submodules from the package\r\nSound.Effects into the current namespace; it only ensures that the\r\npackage Sound.Effects has been imported (possibly running its\r\ninitialization code, __init__.py) and then imports whatever names are\r\ndefined in the package.  This includes any names defined (and\r\nsubmodules explicitly loaded) by __init__.py.  It also includes any\r\nsubmodules of the package that were explicitly loaded by previous\r\nimport statements, e.g. import Sound.Effects.echo\r\nimport Sound.Effects.surround\r\nfrom Sound.Effects import * In this example, the echo and surround modules are imported in the\r\ncurrent namespace because they are defined in the Sound.Effects\r\npackage when the from...import statement is executed.  (This also\r\nworks when __all__ is defined.) Note that in general the practicing of importing * from a module or\r\npackage is frowned upon, since it often causes poorly readable code.\r\nHowever, it is okay to use it to save typing in interactive sessions,\r\nand certain modules are designed to export only names that follow\r\ncertain patterns. Remember, there is nothing wrong with using from Package\r\nimport specific_submodule !  In fact this becomes the\r\nrecommended notation unless the importing module needs to use\r\nsubmodules with the same name from different packages. Intra-package References The submodules often need to refer to each other.  For example, the\r\nsurround module might use the echo module.  In fact, such references\r\nare so common that the import statement first looks in the containing\r\npackage before looking in the standard module search path.  Thus, the\r\nsurround module can simply use import echo or from\r\necho import echofilter .  If the imported module is not found\r\nin the current package (the package of which the current module is a\r\nsubmodule), the import statement looks for a top-level module with the\r\ngiven name. When packages are structured into subpackage (as with the Sound\r\npackage in the example), there's no shortcut to refer to submodules of\r\nsibling packages - the full name of the subpackage must be used.  For\r\nexample, if the module Sound.Filters.vocoder needs to use the echo\r\nmodule in the Sound.Effects package, it can use from\r\nSound.Effects import echo . (One could design a notation to refer to parent packages, similar\r\nto the use of \"..\" to refer to the parent directory in Unix and\r\nWindows filesystems.  In fact, ni supported this using __ for the\r\npackage containing the current module, __.__ for the parent package,\r\nand so on.  This feature was dropped because of its awkwardness; since\r\nmost packages will have a relative shallow substructure, this is no\r\nbig loss.) Details Packages Are Modules, Too! Warning: the following may be confusing for those who are familiar\r\nwith Java's package notation, which is similar to Python's, but\r\ndifferent. Whenever a submodule of a package is loaded, Python makes sure that\r\nthe package itself is loaded first, loading its __init__.py file if\r\nnecessary.  The same for packages.  Thus, when the statement import Sound.Effects.echo is executed, it first ensures\r\nthat Sound is loaded; then it ensures that Sound.Effects is loaded;\r\nand only then does it ensure that Sound.Effects.echo is loaded\r\n(loading it if it hasn't been loaded before). Once loaded, the difference between a package and a module is\r\nminimal.  In fact, both are represented by module objects, and both\r\nare stored in the table of loaded modules, sys.modules.  The key in\r\nsys.modules is the full dotted name of a module (which is not always\r\nthe same name as used in the import statement).  This is also the\r\ncontents of the __name__ variable (which gives the full name of the\r\nmodule or package). The __path__ Variable The one distinction between packages and modules lies in the\r\npresence or absence of the variable __path__.  This is only present\r\nfor packages.  It is initialized to a list of one item, containing the\r\ndirectory name of the package (a subdirectory of a directory on\r\nsys.path).  Changing __path__ changes the list of directories that are\r\nsearched for submodules of the package.  For example, the\r\nSound.Effects package might contain platform specific submodules.  It\r\ncould use the following directory structure: Sound/\r\n      __init__.py\r\n      Effects/\t\t\t# Generic versions of effects modules\r\n              __init__.py\r\n              echo.py\r\n\t      surround.py\r\n\t      reverse.py\r\n\t      ...\r\n              plat-ix86/\t# Intel x86 specific effects modules\r\n\t                echo.py\r\n\t\t\tsurround.py\r\n\t      plat-PPC/\t\t# PPC specific effects modules\r\n\t                echo.py The Effects/__init__.py file could manipulate its __path__ variable\r\nso that the appropriate platform specific subdirectory comes before the main Effects directory, so that the platform\r\nspecific implementations of certain effects (if available) override\r\nthe generic (probably slower) implementations.  For example: platform = ...\t\t\t# Figure out which platform applies\r\ndirname = __path__[0]\t\t# Package's main folder\r\n__path__.insert(0, os.path.join(dirname, \"plat-\" + platform)) If it is not desirable that platform specific submodules hide\r\ngeneric modules with the same name, __path__.append(...) should be\r\nused instead of __path__.insert(0, ...). Note that the plat-* subdirectories are not subpackages of\r\nEffects - the file Sound/Effects/plat-PPC/echo.py correspondes to the\r\nmodule Sound.Effects.echo. Dummy Entries in sys.modules When using packages, you may occasionally find spurious entries in\r\nsys.modules, e.g. sys.modules['Sound.Effects.string'] could be found\r\nwith the value None.  This is an \"indirection\" entry created because\r\nsome submodule in the Sound.Effects package imported the top-level\r\nstring module.  Its purpose is an important optimization: because the\r\nimport statement cannot tell whether a local or global module is\r\nwanted, and because the rules state that a local module (in the same\r\npackage) hides a global module with the same name, the import\r\nstatement must search the package's search path before looking\r\nfor a (possibly already imported) global module.  Since searching the\r\npackage's path is a relatively expensive operation, and importing an\r\nalready imported module is supposed to be cheap (in the order of one\r\nor two dictionary lookups) an optimization is in order.  The dummy\r\nentry avoids searching the package's path when the same global module\r\nis imported from the second time by a submodule of the same package. Dummy entries are only created for modules that are found at the\r\ntop level; if the module is not found at all, the import fails and the\r\noptimization is generally not needed.  Moreover, in interactive use,\r\nthe user could create the module as a package-local submodule and\r\nretry the import; if a dummy entry had been created this would not be\r\nfound.  If the user changes the package structure by creating a local\r\nsubmodule with the same name as a global module that has already been\r\nused in the package, the result is generally known as a \"mess\", and\r\nthe proper solution is to quit the interpreter and start over. What If I Have a Module and a Package With The Same Name? You may have a directory (on sys.path) which has both a module\r\nspam.py and a subdirectory spam that contains an __init__.py (without\r\nthe __init__.py, a directory is not recognized as a package).  In this\r\ncase, the subdirectory has precedence, and importing spam will ignore\r\nthe spam.py file, loading the package spam instead.  If you want the\r\nmodule spam.py to have precedence, it must be placed in a directory\r\nthat comes earlier in sys.path. (Tip: the search order is determined by the list of suffixes\r\nreturned by the function imp.get_suffixes().  Usually the suffixes are\r\nsearched in the following order: \".so\", \"module.so\", \".py\", \".pyc\".\r\nDirectories don't explicitly occur in this list, but precede all\r\nentries in it.) A Proposal For Installing Packages In order for a Python program to use a package, the package must be\r\nfindable by the import statement.  In other words, the package must be\r\na subdirectory of a directory that is on sys.path. Traditionally, the easiest way to ensure that a package was on\r\nsys.path was to either install it in the standard library or to have\r\nusers extend sys.path by setting their $PYTHONPATH shell environment\r\nvariable.  In practice, both solutions quickly cause chaos. Dedicated Directories In Python 1.5, a convention has been established that should\r\nprevent chaos, by giving the system administrator more control.  First\r\nof all, two extra directories are added to the end of the default\r\nsearch path (four if the install prefix and exec_prefix differ).\r\nThese are relative to the install prefix (which defaults to\r\n/usr/local): $prefix/lib/python1.5/site-packages $prefix/lib/site-python The site-packages directory can be used for packages that are\r\nlikely to depend on the Python version (e.g. package containing shared\r\nlibraries or using new features).  The site-python directory is used\r\nfor backward compatibility with Python 1.4 and for pure Python\r\npackages or modules that are not sensitive to the Python version\r\nused. Recommended use of these directories is to place each package in a\r\nsubdirectory of its own in either the site-packages or the site-python\r\ndirectory.  The subdirectory should be the package name, which should\r\nbe acceptable as a Python identifier.  Then, any Python program can\r\nimport modules in the package by giving their full name.  For example,\r\nthe Sound package used in the example could be installed in the\r\ndirectory $prefix/lib/python1.5/site-packages/Sound to enable imports\r\nstatements like import Sound.Effects.echo ). Adding a Level of Indirection Some sites wish to install their packages in other places, but\r\nstill wish them to to be importable by all Python programs run by all\r\ntheir users.  This can be accomplished by two different means: Symbolic Links If the package is structured for dotted-name import, place a\r\nsymbolic link to its top-level directory in the site-packages or\r\nsite-python directory.  The name of the symbolic link should be the\r\npackage name; for example, the Sound package could have a symbolic\r\nlink $prefix/lib/python1.5/site-packages/Sound pointing to\r\n/usr/home/soundguru/lib/Sound-1.1/src. Path Configuration Files If the package really requires adding one or more directories on\r\nsys.path (e.g. because it has not yet been structured to support\r\ndotted-name import), a \"path configuration file\" named package .pth can be placed in either the site-python or\r\nsite-packages directory.  Each line in this file (except for comments\r\nand blank lines) is considered to contain a directory name which is\r\nappended to sys.path.  Relative pathnames are allowed and interpreted\r\nrelative to the directory containing the .pth file. The .pth files are read in alphabetic order, with case sensitivity\r\nthe same as the local file system. This means that if you find the\r\nirresistable urge to play games with the order in which directories\r\nare searched, at least you can do it in a predictable way.  (This is\r\nnot the same as an endorsement.  A typical installation should have no\r\nor very few .pth files or something is wrong, and if you need to play\r\nwith the search order, something is very wrong.  Nevertheless,\r\nsometimes the need arises, and this is how you can do it of you must.) Notes for Mac and Windows Platforms On Mac and Windows, the conventions are slightly different.  The\r\nconventional directory for package installation on these platforms\r\nis the root (or a subdirectory) of the Python installation directory,\r\nwhich is specific to the installed Python version.  This is also the\r\n(only) directory searched for path configuration files (*.pth). Subdirectories of the Standard Library Directory Since any subdirectory of a directory on sys.path is now implicitly\r\nusable as a package, one could easily be confused about whether these\r\nare intended as such.  For example, assume there's a subdirectory\r\ncalled tkinter containing a module Tkinter.py.  Should one write\r\nimport Tkinter or import tkinter.Tkinter?  If the tkinter\r\nsubdirectory os on the path, both will work, but that's creating\r\nunnecessary confusion. I have established a simple naming convention that should remove\r\nthis confusion: non-package directories must have a hyphen in their\r\nname.  In particular, all platform-specific subdirectories (sunos5,\r\nwin, mac, etc.) have been renamed to a name with the prefix \"plat-\".\r\nThe subdirectories specific to optional Python components that haven't\r\nbeen converted to packages yet have been renamed to a name with the\r\nprefix \"lib-\".  The dos_8x3 sundirectory has been renamed to dos-8x3.\r\nThe following tables gives all renamed directories: Old Name New Name tkinter lib-tk stdwin lib-stdwin sharedmodules lib-dynload dos_8x3 dos-8x3 aix3 plat-aix3 aix4 plat-aix4 freebsd2 plat-freebsd2 generic plat-generic irix5 plat-irix5 irix6 plat-irix6 linux1 plat-linux1 linux2 plat-linux2 next3 plat-next3 sunos4 plat-sunos4 sunos5 plat-sunos5 win plat-win test test Note that the test subdirectory is not renamed.  It is now a\r\npackage.  To invoke it, use a statement like import\r\ntest.autotest . Other Stuff XXX I haven't had the time to write up discussions of the following\r\nitems yet: New imp functions. Future directions. Future of ihooks. Future name space reorganization. What to do with ni?  Disable it and force using oldni? Changes From ni The following features of ni have not been duplicated exactly.\r\nIgnore this section unless you are currently using the ni module and\r\nwish to migrate to the built-in package support. Dropped __domain__ By default, when a submodule of package A.B.C imports a module X,\r\nni would search for A.B.C.X, A.B.X, A.X and X, in that order.  This\r\nwas defined by the __domain__ variable in the package which could be\r\nset to a list of package names to be searched.  This feature is\r\ndropped in the built-in package support.  Instead, the search always\r\nlooks for A.B.C.X first and then for X.  (This a reversal to the \"two\r\nscope\" approach that is used successfully for namespace resolution\r\nelsewhere in Python.) Dropped __ Using ni, packages could use explicit \"relative\" module names\r\nusing the special name \"__\" (two underscores).  For example, modules\r\nin package A.B.C can refer to modules defined in package A.B.K via\r\nnames of the form __.__.K.module.  This feature has been dropped\r\nbecause of its limited use and poor readability. Incompatible Semantics For __init__ Using ni, the __init__.py file inside a package (if present) would\r\nbe imported as a standard submodule of the package.  The built-in\r\npackage support instead loads the __init__.py file in the package's\r\nnamespace.  This means that if __init__.py in package A defines a name\r\nx, if can be referred to as A.x without further effort.  Using ni, the\r\n__init__.py would have to contain an assignment of the form __.x\r\n= x to get the same effect. Also, the new package support requires that an __init__ module is present; under ni, it was optional.\r\nThis is a change introduced in Python 1.5b1; it is designed to avoid\r\ndirectories with common names, like \"string\", to unintentionally hide\r\nvalid modules that occur later on the module search path. Packages that wish to be backwards compatible with ni can test\r\nwhether the special variable __ exists, e.g.: # Define a function to be visible at the package level\r\ndef f(...): ...\r\n\r\ntry:\r\n    __\r\nexcept NameError:    # new built-in package support\r\n    pass\r\nelse:                # backwards compatibility for ni\r\n    __.f = f The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Built-in Package Support in Python 1.5", "Built-in Package Support in Python 1.5", "An Example", "Importing * From a Package; the", "Attribute", "Intra-package References", "Details", "A Proposal For Installing Packages", "Subdirectories of the Standard Library Directory", "Other Stuff", "Changes From", "The PSF"]}
{"url": "https://www.python.org/doc/essays/metaclasses/", "title": "Metaclasses in Python 1.5 | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Metaclasses in Python 1.5 Metaclasses in Python 1.5 (A.k.a. The Killer Joke :-) ( Postscript: reading this essay is probably not the best way to\r\nunderstand the metaclass hook described here.  See a message posted by Vladimir Marangozov which may give a gentler introduction to the matter.  You may also\r\nwant to search Deja News for messages with \"metaclass\" in the subject\r\nposted to comp.lang.python in July and August 1998.) In previous Python releases (and still in 1.5), there is something\r\ncalled the ``Don Beaudry hook'', after its inventor and champion.\r\nThis allows C extensions to provide alternate class behavior, thereby\r\nallowing the Python class syntax to be used to define other class-like\r\nentities.  Don Beaudry has used this in his infamous MESS package; Jim\r\nFulton has used it in his Extension\r\nClasses package.  (It has also been referred to as the ``Don\r\nBeaudry hack ,'' but that's a misnomer.  There's nothing hackish\r\nabout it -- in fact, it is rather elegant and deep, even though\r\nthere's something dark to it.) (On first reading, you may want to skip directly to the examples in\r\nthe section \"Writing Metaclasses in Python\" below, unless you want\r\nyour head to explode.) Documentation of the Don Beaudry hook has purposefully been kept\r\nminimal, since it is a feature of incredible power, and is easily\r\nabused.  Basically, it checks whether the type of the base\r\nclass is callable, and if so, it is called to create the new\r\nclass. Note the two indirection levels.  Take a simple example: class B:\r\n    pass\r\n\r\nclass C(B):\r\n    pass Take a look at the second class definition, and try to fathom ``the\r\ntype of the base class is callable.'' (Types are not classes, by the way.  See questions 4.2, 4.19 and in\r\nparticular 6.22 in the Python FAQ for more on this topic.) The base class is B; this one's easy. Since B is a class, its type is ``class''; so the type of the\r\nbase class is the type ``class''.  This is also known as\r\ntypes.ClassType, assuming the standard module types has\r\nbeen imported. Now is the type ``class'' callable ?  No, because types (in\r\ncore Python) are never callable.  Classes are callable (calling a\r\nclass creates a new instance) but types aren't. So our conclusion is that in our example, the type of the base\r\nclass (of C) is not callable.  So the Don Beaudry hook does not apply,\r\nand the default class creation mechanism is used (which is also used\r\nwhen there is no base class).  In fact, the Don Beaudry hook never\r\napplies when using only core Python, since the type of a core object\r\nis never callable. So what do Don and Jim do in order to use Don's hook?  Write an\r\nextension that defines at least two new Python object types.  The\r\nfirst would be the type for ``class-like'' objects usable as a base\r\nclass, to trigger Don's hook.  This type must be made callable.\r\nThat's why we need a second type.  Whether an object is callable\r\ndepends on its type.  So whether a type object is callable depends on its type, which is a meta-type .  (In core Python there\r\nis only one meta-type, the type ``type'' (types.TypeType), which is\r\nthe type of all type objects, even itself.)  A new meta-type must\r\nbe defined that makes the type of the class-like objects callable.\r\n(Normally, a third type would also be needed, the new ``instance''\r\ntype, but this is not an absolute requirement -- the new class type\r\ncould return an object of some existing type when invoked to create an\r\ninstance.) Still confused?  Here's a simple device due to Don himself to\r\nexplain metaclasses.  Take a simple class definition; assume B is a\r\nspecial class that triggers Don's hook: class C(B):\r\n    a = 1\r\n    b = 2 This can be though of as equivalent to: C = type(B)('C', (B,), {'a': 1, 'b': 2}) If that's too dense for you, here's the same thing written out using\r\ntemporary variables: creator = type(B)               # The type of the base class\r\nname = 'C'                      # The name of the new class\r\nbases = (B,)                    # A tuple containing the base class(es)\r\nnamespace = {'a': 1, 'b': 2}    # The namespace of the class statement\r\nC = creator(name, bases, namespace) This is analogous to what happens without the Don Beaudry hook, except\r\nthat in that case the creator function is set to the default class\r\ncreator. In either case, the creator is called with three arguments.  The\r\nfirst one, name , is the name of the new class (as given at the\r\ntop of the class statement).  The bases argument is a tuple of\r\nbase classes (a singleton tuple if there's only one base class, like\r\nthe example).  Finally, namespace is a dictionary containing\r\nthe local variables collected during execution of the class statement. Note that the contents of the namespace dictionary is simply\r\nwhatever names were defined in the class statement.  A little-known\r\nfact is that when Python executes a class statement, it enters a new\r\nlocal namespace, and all assignments and function definitions take\r\nplace in this namespace.  Thus, after executing the following class\r\nstatement: class C:\r\n    a = 1\r\n    def f(s): pass the class namespace's contents would be {'a': 1, 'f': <function f\r\n...>}. But enough already about writing Python metaclasses in C; read the\r\ndocumentation of MESS or Extension\r\nClasses for more information. Writing Metaclasses in Python In Python 1.5, the requirement to write a C extension in order to\r\nwrite metaclasses has been dropped (though you can still do\r\nit, of course).  In addition to the check ``is the type of the base\r\nclass callable,'' there's a check ``does the base class have a\r\n__class__ attribute.''  If so, it is assumed that the __class__\r\nattribute refers to a class. Let's repeat our simple example from above: class C(B):\r\n    a = 1\r\n    b = 2 Assuming B has a __class__ attribute, this translates into: C = B.__class__('C', (B,), {'a': 1, 'b': 2}) This is exactly the same as before except that instead of type(B),\r\nB.__class__ is invoked.  If you have read FAQ question 6.22 you will understand that while there is a big\r\ntechnical difference between type(B) and B.__class__, they play the\r\nsame role at different abstraction levels.  And perhaps at some point\r\nin the future they will really be the same thing (at which point you\r\nwould be able to derive subclasses from built-in types). At this point it may be worth mentioning that C.__class__ is the\r\nsame object as B.__class__, i.e., C's metaclass is the same as B's\r\nmetaclass.  In other words, subclassing an existing class creates a\r\nnew (meta)inststance of the base class's metaclass. Going back to the example, the class B.__class__ is instantiated,\r\npassing its constructor the same three arguments that are passed to\r\nthe default class constructor or to an extension's metaclass: name , bases , and namespace . It is easy to be confused by what exactly happens when using a\r\nmetaclass, because we lose the absolute distinction between classes\r\nand instances: a class is an instance of a metaclass (a\r\n``metainstance''), but technically (i.e. in the eyes of the python\r\nruntime system), the metaclass is just a class, and the metainstance\r\nis just an instance.  At the end of the class statement, the metaclass\r\nwhose metainstance is used as a base class is instantiated, yielding a\r\nsecond metainstance (of the same metaclass).  This metainstance is\r\nthen used as a (normal, non-meta) class; instantiation of the class\r\nmeans calling the metainstance, and this will return a real instance.\r\nAnd what class is that an instance of?  Conceptually, it is of course\r\nan instance of our metainstance; but in most cases the Python runtime\r\nsystem will see it as an instance of a a helper class used by the\r\nmetaclass to implement its (non-meta) instances... Hopefully an example will make things clearer.  Let's presume we\r\nhave a metaclass MetaClass1.  It's helper class (for non-meta\r\ninstances) is callled HelperClass1.  We now (manually) instantiate\r\nMetaClass1 once to get an empty special base class: BaseClass1 = MetaClass1(\"BaseClass1\", (), {}) We can now use BaseClass1 as a base class in a class statement: class MySpecialClass(BaseClass1):\r\n    i = 1\r\n    def f(s): pass At this point, MySpecialClass is defined; it is a metainstance of\r\nMetaClass1 just like BaseClass1, and in fact the expression\r\n``BaseClass1.__class__ == MySpecialClass.__class__ == MetaClass1''\r\nyields true. We are now ready to create instances of MySpecialClass.  Let's\r\nassume that no constructor arguments are required: x = MySpecialClass()\r\ny = MySpecialClass()\r\nprint x.__class__, y.__class__ The print statement shows that x and y are instances of HelperClass1.\r\nHow did this happen?  MySpecialClass is an instance of MetaClass1\r\n(``meta'' is irrelevant here); when an instance is called, its\r\n__call__ method is invoked, and presumably the __call__ method defined\r\nby MetaClass1 returns an instance of HelperClass1. Now let's see how we could use metaclasses -- what can we do\r\nwith metaclasses that we can't easily do without them?  Here's one\r\nidea: a metaclass could automatically insert trace calls for all\r\nmethod calls.  Let's first develop a simplified example, without\r\nsupport for inheritance or other ``advanced'' Python features (we'll\r\nadd those later). import types\r\n\r\nclass Tracing:\r\n    def __init__(self, name, bases, namespace):\r\n        \"\"\"Create a new class.\"\"\"\r\n        self.__name__ = name\r\n        self.__bases__ = bases\r\n        self.__namespace__ = namespace\r\n    def __call__(self):\r\n        \"\"\"Create a new instance.\"\"\"\r\n        return Instance(self)\r\n\r\nclass Instance:\r\n    def __init__(self, klass):\r\n        self.__klass__ = klass\r\n    def __getattr__(self, name):\r\n        try:\r\n            value = self.__klass__.__namespace__[name]\r\n        except KeyError:\r\n            raise AttributeError, name\r\n        if type(value) is not types.FunctionType:\r\n            return value\r\n        return BoundMethod(value, self)\r\n\r\nclass BoundMethod:\r\n    def __init__(self, function, instance):\r\n        self.function = function\r\n        self.instance = instance\r\n    def __call__(self, *args):\r\n        print \"calling\", self.function, \"for\", self.instance, \"with\", args\r\n        return apply(self.function, (self.instance,) + args)\r\n\r\nTrace = Tracing('Trace', (), {})\r\n\r\nclass MyTracedClass(Trace):\r\n    def method1(self, a):\r\n        self.a = a\r\n    def method2(self):\r\n        return self.a\r\n\r\naninstance = MyTracedClass()\r\n\r\naninstance.method1(10)\r\n\r\nprint \"the answer is %d\" % aninstance.method2() Confused already?  The intention is to read this from top down.  The\r\nTracing class is the metaclass we're defining.  Its structure is\r\nreally simple. The __init__ method is invoked when a new Tracing instance is\r\ncreated, e.g. the definition of class MyTracedClass later in the\r\nexample.  It simply saves the class name, base classes and namespace\r\nas instance variables. The __call__ method is invoked when a Tracing instance is called,\r\ne.g. the creation of aninstance later in the example.  It returns an\r\ninstance of the class Instance, which is defined next. The class Instance is the class used for all instances of classes\r\nbuilt using the Tracing metaclass, e.g. aninstance.  It has two\r\nmethods: The __init__ method is invoked from the Tracing.__call__ method\r\nabove to initialize a new instance.  It saves the class reference as\r\nan instance variable.  It uses a funny name because the user's\r\ninstance variables (e.g. self.a later in the example) live in the same\r\nnamespace. The __getattr__ method is invoked whenever the user code\r\nreferences an attribute of the instance that is not an instance\r\nvariable (nor a class variable; but except for __init__ and\r\n__getattr__ there are no class variables).  It will be called, for\r\nexample, when aninstance.method1 is referenced in the example, with\r\nself set to aninstance and name set to the string \"method1\". The __getattr__ method looks the name up in the __namespace__\r\ndictionary.  If it isn't found, it raises an AttributeError exception.\r\n(In a more realistic example, it would first have to look through the\r\nbase classes as well.)  If it is found, there are two possibilities:\r\nit's either a function or it isn't.  If it's not a function, it is\r\nassumed to be a class variable, and its value is returned.  If it's a\r\nfunction, we have to ``wrap'' it in instance of yet another helper\r\nclass, BoundMethod. The BoundMethod class is needed to implement a familiar feature:\r\nwhen a method is defined, it has an initial argument, self, which is\r\nautomatically bound to the relevant instance when it is called.  For\r\nexample, aninstance.method1(10) is equivalent to method1(aninstance,\r\n10).  In the example if this call, first a temporary BoundMethod\r\ninstance is created with the following constructor call: temp =\r\nBoundMethod(method1, aninstance); then this instance is called as\r\ntemp(10).  After the call, the temporary instance is discarded. The __init__ method is invoked for the constructor call\r\nBoundMethod(method1, aninstance).  It simply saves away its\r\narguments. The __call__ method is invoked when the bound method instance is\r\ncalled, as in temp(10).  It needs to call method1(aninstance, 10).\r\nHowever, even though self.function is now method1 and self.instance is\r\naninstance, it can't call self.function(self.instance, args) directly,\r\nbecause it should work regardless of the number of arguments passed.\r\n(For simplicity, support for keyword arguments has been omitted.) In order to be able to support arbitrary argument lists, the\r\n__call__ method first constructs a new argument tuple.  Conveniently,\r\nbecause of the notation *args in __call__'s own argument list, the\r\narguments to __call__ (except for self) are placed in the tuple args.\r\nTo construct the desired argument list, we concatenate a singleton\r\ntuple containing the instance with the args tuple: (self.instance,) +\r\nargs.  (Note the trailing comma used to construct the singleton\r\ntuple.)  In our example, the resulting argument tuple is (aninstance,\r\n10). The intrinsic function apply() takes a function and an argument\r\ntuple and calls the function for it.  In our example, we are calling\r\napply(method1, (aninstance, 10)) which is equivalent to calling\r\nmethod(aninstance, 10). From here on, things should come together quite easily.  The output\r\nof the example code is something like this: calling <function method1 at ae8d8> for <Instance instance at 95ab0> with (10,)\r\ncalling <function method2 at ae900> for <Instance instance at 95ab0> with ()\r\nthe answer is 10 That was about the shortest meaningful example that I could come up\r\nwith.  A real tracing metaclass (for example, Trace.py discussed below) needs to be more\r\ncomplicated in two dimensions. First, it needs to support more advanced Python features such as\r\nclass variables, inheritance, __init__ methods, and keyword arguments. Second, it needs to provide a more flexible way to handle the\r\nactual tracing information; perhaps it should be possible to write\r\nyour own tracing function that gets called, perhaps it should be\r\npossible to enable and disable tracing on a per-class or per-instance\r\nbasis, and perhaps a filter so that only interesting calls are traced;\r\nit should also be able to trace the return value of the call (or the\r\nexception it raised if an error occurs).  Even the Trace.py example\r\ndoesn't support all these features yet. Real-life Examples Have a look at some very preliminary examples that I coded up to\r\nteach myself how to write metaclasses: Enum.py This (ab)uses the class syntax as an elegant way to define\r\nenumerated types.  The resulting classes are never instantiated --\r\nrather, their class attributes are the enumerated values.  For\r\nexample: class Color(Enum):\r\n    red = 1\r\n    green = 2\r\n    blue = 3\r\nprint Color.red will print the string ``Color.red'', while ``Color.red==1'' is true,\r\nand ``Color.red + 1'' raise a TypeError exception. Trace.py The resulting classes work much like standard\r\nclasses, but by setting a special class or instance attribute\r\n__trace_output__ to point to a file, all calls to the class's methods\r\nare traced.  It was a bit of a struggle to get this right.  This\r\nshould probably redone using the generic metaclass below. Meta.py A generic metaclass.  This is an attempt at finding out how much\r\nstandard class behavior can be mimicked by a metaclass.  The\r\npreliminary answer appears to be that everything's fine as long as the\r\nclass (or its clients) don't look at the instance's __class__\r\nattribute, nor at the class's __dict__ attribute.  The use of\r\n__getattr__ internally makes the classic implementation of __getattr__\r\nhooks tough; we provide a similar hook _getattr_ instead.\r\n(__setattr__ and __delattr__ are not affected.)\r\n(XXX Hm.  Could detect presence of __getattr__ and rename it.) Eiffel.py Uses the above generic metaclass to implement Eiffel style\r\npre-conditions and post-conditions. Synch.py Uses the above generic metaclass to implement synchronized\r\nmethods. Simple.py The example module used above. A pattern seems to be emerging: almost all these uses of\r\nmetaclasses (except for Enum, which is probably more cute than useful)\r\nmostly work by placing wrappers around method calls.  An obvious\r\nproblem with that is that it's not easy to combine the features of\r\ndifferent metaclasses, while this would actually be quite useful: for\r\nexample, I wouldn't mind getting a trace from the test run of the\r\nSynch module, and it would be interesting to add preconditions to it\r\nas well.  This needs more research.  Perhaps a metaclass could be\r\nprovided that allows stackable wrappers... Things You Could Do With Metaclasses There are lots of things you could do with metaclasses.  Most of\r\nthese can also be done with creative use of __getattr__, but\r\nmetaclasses make it easier to modify the attribute lookup behavior of\r\nclasses.  Here's a partial list. Enforce different inheritance semantics, e.g. automatically call\r\nbase class methods when a derived class overrides Implement class methods (e.g. if the first argument is not named\r\n'self') Implement that each instance is initialized with copies of\r\nall class variables Implement a different way to store instance variables (e.g. in a\r\nlist kept outside the the instance but indexed by the instance's id()) Automatically wrap or trap all or certain methods for tracing for precondition and postcondition checking for synchronized methods for automatic value caching When an attribute is a parameterless function, call it on\r\nreference (to mimic it being an instance variable); same on assignment Instrumentation: see how many times various attributes are used Different semantics for __setattr__ and __getattr__ (e.g.  disable\r\nthem when they are being used recursively) Abuse class syntax for other things Experiment with automatic type checking Delegation (or acquisition) Dynamic inheritance patterns Automatic caching of methods Credits Many thanks to David Ascher and Donald Beaudry for their comments\r\non earlier draft of this paper.  Also thanks to Matt Conway and Tommy\r\nBurnette for putting a seed for the idea of metaclasses in my\r\nmind, nearly three years ago, even though at the time my response was\r\n``you can do that with __getattr__ hooks...'' :-) The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Metaclasses in Python 1.5", "Metaclasses in Python 1.5", "(A.k.a. The Killer Joke :-)", "Writing Metaclasses in Python", "Real-life Examples", "Things You Could Do With Metaclasses", "The PSF"]}
{"url": "https://www.python.org/doc/essays/list2str/", "title": "Python Patterns - An Optimization Anecdote | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python Patterns - An Optimization Anecdote Warning This page stays here for historical reasons and it may contain outdated or incorrect information. The other day, a friend asked me a seemingly simple question: what's the \r\nbest way to convert a list of integers into a string, presuming that the \r\nintegers are ASCII values.  For instance, the list [97, 98, 99] should be \r\nconverted to the string 'abc'.  Let's assume we want to write a function to \r\ndo this. The first version I came up with was totally straightforward: def f1(list):\r\n        string = \"\"\r\n        for item in list:\r\n            string = string + chr(item)\r\n        return string That can't be the fastest way to do it, said my friend.  How about this one: def f2(list):\r\n        return reduce(lambda string, item: string + chr(item), list, \"\") This version performs exactly the same set of string operations as the \r\nfirst one, but gets rid of the for loop overhead in favor of the faster, \r\nimplied loop of the reduce() function. Sure, I replied, but it does so at the cost of a function call (the lambda \r\nfunction) per list item.  I betcha it's slower, since function call \r\noverhead in Python is bigger than for loop overhead. (OK, so I had already done the comparisons.  f2() took 60% more time than f1().  So there :-) Hmm, said my friend.  I need this to be faster.  OK, I said, how about \r\nthis version: def f3(list):\r\n        string = \"\"\r\n        for character in map(chr, list):\r\n            string = string + character\r\n        return string To both our surprise, f3() clocked twice as fast as f1()!  The \r\nreason that this surprised us was twofold: first, it uses more storage (the \r\nresult of map(chr, list) is another list of the same length); second, it \r\ncontains two loops instead of one (the one implied by the map() function, \r\nand the for loop). Of course, space versus time is a well-known trade-off, so the first one \r\nshouldn't have surprised us.  However, how come two loops are faster than \r\none?  Two reasons. First, in f1(), the built-in function chr() is looked up on every \r\niteration, while in f3() it is only looked up once (as the argument to \r\nmap()).  This look-up is relatively expensive, I told my friend, since \r\nPython's dynamic scope rules mean that it is first looked up \r\n(unsuccessfully) in the current module's global dictionary, and then in the \r\ndictionary of built-in function (where it is found).  Worse, unsuccessful \r\ndictionary lookups are (on average) a bit slower than successful ones, \r\nbecause of the way the hash chaining works. The second reason why f3() is faster than f1() is that the call to \r\nchr(item), as executed by the bytecode interpreter, is probably a bit \r\nslower than when executed by the map() function - the bytecode interpreter \r\nmust execute three bytecode instructions for each call (load 'chr', load \r\n'item', call), while the map() function does it all in C. This led us to consider a compromise, which wouldn't waste extra space, but \r\nwhich would speed up the lookup for the chr() function: def f4(list):\r\n        string = \"\"\r\n        lchr = chr\r\n        for item in list:\r\n            string = string + lchr(item)\r\n        return string As expected, f4() was slower than f3(), but only by 25%; it was about 40% \r\nfaster than f1() still.  This is because local variable lookups are much faster than global or built-in variable lookups: the Python \r\n\"compiler\" optimizes most function bodies so that for local variables, no \r\ndictionary lookup is necessary, but a simple array indexing operation is \r\nsufficient.  The relative speed of f4() compared to f1() and f3() suggests \r\nthat both reasons why f3() is faster contribute, but that the first reason \r\n(fewer lookups) is a bit more important.  (To get more precise data on \r\nthis, we would have to instrument the interpreter.) Still, our best version, f3(), was only twice as fast as the most \r\nstraightforward version, f1().  Could we do better? I was worried that the quadratic behavior of the algorithm was killing\r\nus.  So far, we had been using a list of 256 integers as test data,\r\nsince that was what my friend needed the function for.  But what if it\r\nwere applied to a list of two thousand characters?  We'd be\r\nconcatenating longer and longer strings, one character at a time.  It\r\nis easy to see that, apart from overhead, to create a list of length N\r\nin this way, there are 1 + 2 + 3 + ...  + (N-1) characters to be\r\ncopied in total, or N*(N-1)/2, or 0.5*N**2 - 0.5*N.  In addition to\r\nthis, there are N string allocation operations, but for sufficiently\r\nlarge N, the term containing N**2 will take over.  Indeed, for a list\r\nthat's 8 times as long (2048 items), these functions all take much\r\nmore than 8 times as long; close to 16 times as long, in fact.  I\r\ndidn't dare try a list of 64 times as long. There's a general technique to avoid quadratic behavior in algorithms like \r\nthis.  I coded it as follows for strings of exactly 256 items: def f5(list):\r\n        string = \"\"\r\n        for i in range(0, 256, 16): # 0, 16, 32, 48, 64, ...\r\n            s = \"\"\r\n            for character in map(chr, list[i:i+16]):\r\n                s = s + character\r\n            string = string + s\r\n        return string Unfortunately, for a list of 256 items, this version ran a bit slower \r\n(though within 20%) of f3().  Since writing a general version would only \r\nslow it down more, we didn't bother to pursue this path any further \r\n(except that we also compared it with a variant that didn't use map(), \r\nwhich of course was slower again). Finally, I tried a radically different approach: use only implied \r\nloops.  Notice that the whole operation can be described as follows: apply \r\nchr() to each list item; then concatenate the resulting characters.  We \r\nwere already using an implied loop for the first part: map().  Fortunately, \r\nthere are some string concatenation functions in the string module that are \r\nimplemented in C.  In particular, string.joinfields(list_of_strings, \r\ndelimiter) concatenates a list of strings, placing a delimiter of choice \r\nbetween each two strings.  Nothing stops us from concatenating a list of \r\ncharacters (which are just strings of length one in Python), using the \r\nempty string as delimiter.  Lo and behold: import string\r\n    def f6(list):\r\n        return string.joinfields(map(chr, list), \"\") This function ran four to five times as fast as our fastest contender, \r\nf3().  Moreover, it doesn't have the quadratic behavior of the other \r\nversions. And The Winner Is... The next day, I remembered an odd corner of Python: the array module.  This \r\nhappens to have an operation to create an array of 1-byte wide integers \r\nfrom a list of Python integers, and every array can be written to a file or \r\nconverted to a string as a binary data structure.  Here's our function \r\nimplemented using these operations: import array\r\n    def f7(list):\r\n        return array.array('B', list).tostring() This is about three times as fast as f6(), or 12 to 15 times as fast as \r\nf3()!  it also uses less intermediate storage - it only allocates 2 objects \r\nof N bytes (plus fixed overhead), while f6() begins by allocating a list of \r\nN items, which usually costs 4N bytes (8N bytes on a 64-bit machine) - \r\nassuming the character objects are shared with similar objects elsewhere \r\nin the program (like small integers, Python caches strings of length one \r\nin most cases). Stop, said my friend, before you get into negative times - this is fast \r\nenough for my program.  I agreed, though I had wanted to try one more \r\napproach: write the whole function in C.  This could have minimal storage \r\nrequirements (it would allocate a string of length N right away) and save a \r\nfew instructions in the C code that I knew were there in the array module, \r\nbecause of its genericity (it supports integer widths of 1, 2, and 4 \r\nbytes).  However, it wouldn't be able to avoid having to extract the items \r\nfrom the list one at a time, and to extract the C integer from them, both \r\nof which are fairly costly operations in the Python-C API, so I expected at \r\nmost modest speed up compared to f7().  Given the effort of writing and \r\ntesting an extension (compared to whipping up those Python one-liners), as \r\nwell as the dependency on a non-standard Python extension, I decided not to \r\npursue this option... Conclusion If you feel the need for speed, go for built-in functions - you can't beat \r\na loop written in C.  Check the library manual for a built-in function that \r\ndoes what you want.  If there isn't one, here are some guidelines for loop \r\noptimization: Rule number one: only optimize when there is a proven speed \r\nbottleneck.  Only optimize the innermost loop.  (This rule is independent \r\nof Python, but it doesn't hurt repeating it, since it can save a lot of \r\nwork. :-) Small is beautiful.  Given Python's hefty charges for bytecode \r\ninstructions and variable look-up, it rarely pays off to add extra tests \r\nto save a little bit of work. Use intrinsic operations.  An implied loop in map() is faster than an \r\nexplicit for loop; a while loop with an explicit loop counter is even \r\nslower. Avoid calling functions written in Python in your inner loop.  This \r\nincludes lambdas.  In-lining the inner loop can save a lot of time. Local variables are faster than globals; if you use a global constant \r\nin a loop, copy it to a local variable before the loop.  And in Python, \r\nfunction names (global or built-in) are also global constants! Try to use map(), filter() or reduce() to replace an explicit for loop, \r\nbut only if you can use a built-in function: map with a built-in function \r\nbeats for loop, but a for loop with in-line code beats map with a lambda \r\nfunction! Check your algorithms for quadratic behavior.  But notice that a more \r\ncomplex algorithm only pays off for large N - for small N, the complexity \r\ndoesn't pay off.  In our case, 256 turned out to be small enough that the \r\nsimpler version was still a tad faster.  Your mileage may vary - this is \r\nworth investigating. And last but not least: collect data.  Python's excellent profile \r\nmodule can quickly show the bottleneck in your code.  if you're considering \r\ndifferent versions of an algorithm, test it in a tight loop using the \r\ntime.clock() function. By the way, here's the timing function that I used.  it calls a function f \r\nn*10 times with argument a, and prints the function name followed by the \r\ntime it took, rounded to milliseconds.  The 10 repeated calls are done to \r\nminimize the loop overhead of the timing function itself.  You could go \r\neven further and make 100 calls...  Also note that the expression range(n) \r\nis calculated outside the timing brackets - another trick to minimize the \r\noverhead caused by the timing function.  If you are worried about this \r\noverhead, you can calibrate it by calling the timing function with a \r\ndo-nothing function. import time\r\n    def timing(f, n, a):\r\n        print f.__name__,\r\n        r = range(n)\r\n        t1 = time.clock()\r\n        for i in r:\r\n            f(a); f(a); f(a); f(a); f(a); f(a); f(a); f(a); f(a); f(a)\r\n        t2 = time.clock()\r\n        print round(t2-t1, 3) Epilogue A few days later, my friend was back with the question: how do you do\r\nthe reverse operation?  I.e. create a list of integer ASCII values\r\nfrom a string.  Oh no, here we go again, it flashed through my\r\nmind... But this time, it was relatively painless.  There are two candidates,\r\nthe obvious: def g1(string):\r\n        return map(ord, string) and the somewhat less obvious: import array\r\n    def g2(string):\r\n        return array.array('b', string).tolist() Timing these reveals that g2() is about five times as fast as g1().\r\nThere's a catch though: g2() returns integers in the range -128..127,\r\nwhile g1() returns integers in the range 0..255.  If you need the\r\npositive integers, g1() is going to be faster than anything\r\npostprocessing you could do on the result from g2().  (Note: since\r\nthis essay was written, the 'B' typecode was added to the array\r\nmodule, which stores unsigned bytes, so there's no reason to prefer\r\ng1() any more.) Sample Code timing f1() through f7() timing g1() and g2() The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Patterns - An Optimization Anecdote", "And The Winner Is...", "Conclusion", "Epilogue", "Sample Code", "The PSF"]}
{"url": "https://www.python.org/doc/essays/graphs/", "title": "Python Patterns - Implementing Graphs | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python Patterns - Implementing Graphs Warning This page stays here for historical reasons and it may contain outdated or incorrect information. Change notes: 2/22/98, 3/2/98, 12/4/00: This version of this essay\r\n  fixes several bugs in the code.\r\n  6/10/19: Retraction of find_shortest_path as \"nearly optimal\".\r\n  8/11/19: Fix accidental usage of find_graph() instead of find_path() Copyright (c) 1998, 2000, 2003, 2019 Python Software Foundation.\r\nAll rights reserved.\r\nLicensed under the PSF license. Graphs are networks consisting of nodes connected by edges or arcs.  In\r\ndirected graphs, the connections between nodes have a direction, and are\r\ncalled arcs; in undirected graphs, the connections have no direction and\r\nare called edges.  We mainly discuss directed graphs.  Algorithms in graphs\r\ninclude finding a path between two nodes, finding the shortest path between\r\ntwo nodes, determining cycles in the graph (a cycle is a non-empty path\r\nfrom a node to itself), finding a path that reaches all nodes (the famous\r\n\"traveling salesman problem\"), and so on.  Sometimes the nodes or arcs of a\r\ngraph have weights or costs associated with them, and we are interested in\r\nfinding the cheapest path. There's considerable literature on graph algorithms, which are an important\r\npart of discrete mathematics.  Graphs also have much practical use in\r\ncomputer algorithms.  Obvious examples can be found in the management of\r\nnetworks, but examples abound in many other areas.  For instance,\r\ncaller-callee relationships in a computer program can be seen as a graph\r\n(where cycles indicate recursion, and unreachable nodes represent dead\r\ncode). Few programming languages provide direct support for graphs as a data type,\r\nand Python is no exception.  However, graphs are easily built out of lists\r\nand dictionaries.  For instance, here's a simple graph (I can't use\r\ndrawings in these columns, so I write down the graph's arcs): A -> B\r\n    A -> C\r\n    B -> C\r\n    B -> D\r\n    C -> D\r\n    D -> C\r\n    E -> F\r\n    F -> C This graph has six nodes (A-F) and eight arcs.  It can be represented by\r\nthe following Python data structure: graph = {'A': ['B', 'C'],\r\n             'B': ['C', 'D'],\r\n             'C': ['D'],\r\n             'D': ['C'],\r\n             'E': ['F'],\r\n             'F': ['C']} This is a dictionary whose keys are the nodes of the graph.  For each key,\r\nthe corresponding value is a list containing the nodes that are connected\r\nby a direct arc from this node.  This is about as simple as it gets (even\r\nsimpler, the nodes could be represented by numbers instead of names, but\r\nnames are more convenient and can easily be made to carry more\r\ninformation, such as city names). Let's write a simple function to determine a path between two nodes.  It\r\ntakes a graph and the start and end nodes as arguments.  It will return a\r\nlist of nodes (including the start and end nodes) comprising the path.\r\nWhen no path can be found, it returns None.  The same node will not occur\r\nmore than once on the path returned (i.e.  it won't contain cycles).  The\r\nalgorithm uses an important technique called backtracking : it tries\r\neach possibility in turn until it finds a solution. def find_path(graph, start, end, path=[]):\r\n        path = path + [start]\r\n        if start == end:\r\n            return path\r\n        if not graph.has_key(start):\r\n            return None\r\n        for node in graph[start]:\r\n            if node not in path:\r\n                newpath = find_path(graph, node, end, path)\r\n                if newpath: return newpath\r\n        return None A sample run (using the graph above): >>> find_path(graph, 'A', 'D')\r\n    ['A', 'B', 'C', 'D']\r\n    >>> The second 'if' statement is necessary only in case there are nodes that are\r\nlisted as end points for arcs but that don't have outgoing arcs\r\nthemselves, and aren't listed in the graph at all.  Such nodes could also\r\nbe contained in the graph, with an empty list of outgoing arcs, but\r\nsometimes it is more convenient not to require this. Note that while the user calls find_path() with three arguments,\r\nit calls itself with a fourth argument: the path that has already been traversed.\r\nThe default value for this argument is the empty list, '[]', meaning no\r\nnodes have been traversed yet.  This argument is used to avoid cycles (the\r\nfirst 'if' inside the 'for' loop).  The 'path' argument is not modified:\r\nthe assignment \"path = path + [start]\" creates a new list.  If we had\r\nwritten \"path.append(start)\" instead, we would have modified the variable\r\n'path' in the caller, with disastrous results.  (Using tuples, we could\r\nhave been sure this would not happen, at the cost of having to write\r\n\"path = path + (start,)\" since \"(start)\" isn't a singleton tuple -- it is\r\njust a parenthesized expression.) It is simple to change this function to return a list of all paths (without\r\ncycles) instead of the first path it finds: def find_all_paths(graph, start, end, path=[]):\r\n        path = path + [start]\r\n        if start == end:\r\n            return [path]\r\n        if not graph.has_key(start):\r\n            return []\r\n        paths = []\r\n        for node in graph[start]:\r\n            if node not in path:\r\n                newpaths = find_all_paths(graph, node, end, path)\r\n                for newpath in newpaths:\r\n                    paths.append(newpath)\r\n        return paths A sample run: >>> find_all_paths(graph, 'A', 'D')\r\n    [['A', 'B', 'C', 'D'], ['A', 'B', 'D'], ['A', 'C', 'D']]\r\n    >>> Another variant finds the shortest path: def find_shortest_path(graph, start, end, path=[]):\r\n        path = path + [start]\r\n        if start == end:\r\n            return path\r\n        if not graph.has_key(start):\r\n            return None\r\n        shortest = None\r\n        for node in graph[start]:\r\n            if node not in path:\r\n                newpath = find_shortest_path(graph, node, end, path)\r\n                if newpath:\r\n                    if not shortest or len(newpath) < len(shortest):\r\n                        shortest = newpath\r\n        return shortest Sample run: >>> find_shortest_path(graph, 'A', 'D')\r\n    ['A', 'C', 'D']\r\n    >>> These functions are about as simple as they get.  Yet, they are nearly\r\noptimal (for code written in Python).  In another Python Patterns\r\ncolumn, I will try to analyze their running speed and improve their\r\nperformance, at the cost of more code. UPDATE: Eryk Kopczy\u0144ski pointed out that these functions are\r\nnot optimal.  To the contrary, \"this program runs in exponential time,\r\nwhile find_shortest_path can be done in linear time using BFS [Breadth\r\nFirst Search]. Furthermore a linear BFS is simpler:\" # Code by Eryk Kopczy\u0144ski\r\n    def find_shortest_path(graph, start, end):\r\n        dist = {start: [start]}\r\n        q = deque(start)\r\n        while len(q):\r\n            at = q.popleft()\r\n            for next in graph[at]:\r\n                if next not in dist:\r\n                    dist[next] = [dist[at], next]\r\n                    q.append(next)\r\n        return dist.get(end) Note that this returns the path in a weird format, e.g., . In particular, len(find_shortest_path(graph, 'A', 'D')) will give\r\nthe incorrect answer (2, because the outer list is of length 2). This is\r\nbecause append is done as instead of dist[at]+[next] . The second method would use quadratic\r\ntime and memory, but still should be fine for relatively small graphs;\r\notherwise, it is easy to turn the list into the correct format. Another variation would be to add more data abstraction: create a class to\r\nrepresent graphs, whose methods implement the various algorithms.  While\r\nthis appeals to the desire for structured programming, it doesn't make the\r\ncode any more efficient (to the contrary).  It does make it easier to add\r\nvarious labels to the nodes or arcs and to add algorithms that take those\r\nlabels into account (e.g. to find the shortest route between two cities on\r\na map). This, too, will be the subject of another column. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Patterns - Implementing Graphs", "The PSF"]}
{"url": "https://www.python.org/doc/essays/foreword2/", "title": "Foreword for \"Programming Python\" (2nd ed.) | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Foreword for \"Programming Python\" (2nd ed.) Foreword for \"Programming Python\" (2nd ed.) This is the foreword I wrote for Mark Lutz' book \"Programming Python\"\r\n(2nd ed.), published by O'Reilly in 2001. Less than five years ago, I wrote the foreword for the 1st edition of Programming\r\nPython.  Since then, the book has changed about as much as the\r\nlanguage and the Python community!  I no longer feel the need to\r\ndefend Python: the statistics and developments listed in Mark's\r\nPreface speak for themselves. In the past year, Python has made great strides.  We released Python\r\n2.0, a big step forward, with new standard library features such as\r\nUnicode and XML support, and several new syntactic constructs,\r\nincluding augmented assignment: you can now write x += 1 instead of x\r\n= x+1.  A few people wondered what the big deal was (answer: instead\r\nof x, imagine dict[key] or list[index]), but overall this was a big\r\nhit with those users who were already used to augmented assignment in\r\nother languages. Less warm was the welcome for the extended print statement:\r\nprint>>file, a shortcut for printing to a different file object\r\nthan standard output.  Personally, it's the Python 2.0 feature I use\r\nmost frequently, but most people who opened their mouth about found it\r\nan abomination.  The discussion thread on the newsgroup berating this\r\nsimple language extension was one of the longest ever -- apart from\r\nthe never-ending Python vs. Perl thread. Which brings me to the next topic.  (No, not Python vs. Perl.  There\r\nare better places to pick a fight than a foreword.)  I mean the speed\r\nof Python's evolution, a topic dear to the heart of the author of this\r\nbook.  Every time I add a feature to Python, another patch of Mark's\r\nhair turns grey: there goes another chapter out of date!  Especially\r\nthe slew of new features added to Python 2.0, which appeared just as\r\nhe was working on this second edition, made him worry: what if Python\r\n2.1 added as many new things?  The book would be out of date as soon\r\nas it was published! Relax, Mark.  Python will continue to evolve, but I promise that I\r\nwon't remove things that are in active use!  For example, there was a\r\nlot of worry about the string module.  Now that string objects have\r\nmethods, the string module is mostly redundant.  I wish I could to\r\ndeclare it obsolete (or deprecated) to encourage Python programmers to\r\nstart using string methods instead.  But given that a large majority\r\nof existing Python code -- even many standard library modules --\r\nimports the string module, this change is obviously not going to\r\nhappen overnight.  The first likely opportunity to remove the string\r\nmodule will be at the introduction of Python 3000; and even then there\r\nwill probably be a string module in the backwards compatibility\r\nlibrary for use with old code. Python 3000?!  Yes, that's the nickname for the next generation of the\r\nPython interpreter.  The name may be considered a pun on Windows 2000,\r\nor a reference to Mystery Science Theatre 3000, a suitably Pythonesque\r\ntv show with a cult following.  When will Python 3000 be released?\r\nNot for a loooooong time -- although you won't quite have to wait\r\nuntil the year 3000. Originally, Python 3000 was intended to be a complete rewrite and\r\nredesign of the language.  It would allow me to make incompatible\r\nchanges in order to fix problems with the language design that weren't\r\nsolvable in a backwards compatible way.  The current plan, however, is\r\nthat the necessary changes will be introduced gradually into the\r\ncurrent Python 2.x line of development, with a clear transition path\r\nthat includes a period of backwards compatibility support. Take for example integer division.  In line with C, Python currently\r\ndefines x/y with two integer arguments to have an integer result.  In\r\nother words, 1/2 yields 0!  While most died-in-the-wool programmers\r\nexpect this, it's a continuing source of confusion for newbies, who\r\nmake up an ever-larger fraction of the -- exponentially growing --\r\nPython user population.  From a numerical perspective, it really makes\r\nmore sense for the / operator to yield the same value regardless of\r\nthe type of the operands: after all, that's what all other numeric\r\noperators do.  But we can't simply change Python so that 1/2 yield\r\n0.5, because (like removing the string module) it would break too much\r\nexisting code.  What to do? The solution, too complex to describe here in detail, will have to\r\nspan several Python releases, and involves gradually increasing\r\npressure on Python programmers (first through documentation, then\r\nthrough deprecation warnings, and eventually through errors) to change\r\ntheir code.  By the way, a framework for issuing warnings will be\r\nintroduced as part of Python 2.1.  Sorry, Mark! So, don't expect the announcement of the release of Python 3000 any\r\ntime soon.  Instead, one day you may find that you are _already_ using\r\nPython 3000 -- only it won't be called that, but rather something like\r\nPython 2.8.7.  And most of what you've learned in this book will still\r\napply!  Still, in the mean time references to Python 3000 will abound;\r\njust know that this is intentionally vaporware in the purest sense of\r\nthe word.  Rather than worry about Python 3000, continue to use and\r\nlearn more about the Python version that you do have. I'd like to say a few words about Python's current development model.\r\nUntil early 2000, there were hundreds of contributors to Python, but\r\nessentially all contributions had to go through my inbox.  To propose\r\na change to Python, you would mail me a context diff, which I would\r\napply to my work version of Python, and if I liked it, I would check\r\nit into my CVS source tree.  (CVS is a source code version management\r\nsystem, and the subject of several books.)  Bug reports followed the\r\nsame path, except I also ended up having to come up with the patch.\r\nClearly, with the increasing number of contributions, my inbox became\r\na bottleneck.  What to do? Fortunately, Python wasn't the only open source project with this\r\nproblem, and a few smart people at VA Linux came up with a solution:\r\nSourceForge!  This is a dynamic website with a complete set of\r\ndistributed project management tools available: a public CVS\r\nrepository, mailing lists (using Mailman, a very popular Python\r\napplication!), discussion forums, bug and patch managers, and a\r\ndownload area, all made available to any open source project for the\r\nasking. We currently have a development group with SourceForge checkin\r\nprivileges of 30 volunteers, and a development mailing list comprising\r\ntwice as many folks.  The privileged volunteers have all sworn their\r\nallegiance to the BDFL (Benevolent Dictator For Life -- that's me :-).\r\nIntroduction of major new features is regulated via a lightweight\r\nsystem of proposals and feedback, Python Enhancement Proposals (PEPs).\r\nOur PEP system proved so succesful that it was copied almost verbatim\r\nby the Tcl community when they made a similar transition from\r\nCathedral to Bazaar. So, it is with confidence in Python's future that I give the floor to\r\nMark Lutz.  Excellent job, Mark.  And to finish with my favorite Monty\r\nPython quote: Take it away, Eric, the orchestra leader! Guido van Rossum Reston, Virginia, January 2001 The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Foreword for \"Programming Python\" (2nd ed.)", "Foreword for \"Programming Python\" (2nd ed.)", "The PSF"]}
{"url": "https://www.python.org/success-stories/d-link-australia/", "title": "D-Link Australia Uses Python to Control Firmware Updates | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event D-Link Australia Uses Python to Control Firmware Updates Written by How Wong , D-Link Australia Introduction D-Link Australia's RMA department provides warranty services to Australiasia.\nWarranty services consist of diagnosing, fixing, testing, refurbishing, and\npackaging security cameras, modems, voip hardware, switches and router\nproducts. Problem Description Prior to the development of the software described below, the standard method\nof upgrading firmware during warranty service was to load settings and firmware\nonto a modem through a web browser, after complete bootup of the firmware. With\nthis technique only one modem could be upgraded at a time by each machine. To\nconfirm successful upgrade of the firmware, the modem had to be rebooted and\nthe version checked, again through a web browser. Modems with firmware corruption, those that needed to be converted to a\ndifferent localization region, and those that required an upgraded boot loader\ncould not be handled this way. Instead, a separate executable was used to\nrecover or convert at the boot-ROM level. On a typical day, there were\nhundreds of these requiring service, with many different models. The Solution To solve some of these problems, I started using a terminal script to drive\nserial communication to the modems, in order to bypass manual use of the web\nbrowser in the process of upgrading the firmware at the boot-ROM level, and\nto reduce the required number of boots of the modem down to one. Although this\nmethod eliminated many of the problems, there still remained the manual step of\nselecting firmware appropriate to the modem's model and using different\ncommands for different boot loaders. Furthermore, only a single upgrade could\nbe performed at a time. It was not a particularly user-friendly solution. To improve the situation, I decided to develop custom software to handle the\nupgrades. I started by considering Java for performance but once I looked at\nthe complex Java serial communication code and the language itself I chose\nPython instead. I was not a programmer and I felt I was not going to be able\nwork with and understand Java code. I believed Python would allow me to focus\nmore on the problem rather than the language. DSL Firmware Recovery System The development environment used for this work was Eclipse on Linux, using the\npySerial module, tftp, and PyQt3. The hardware contained quad port serial and\nnetwork cards and an RS-232 to TTL Serial interface that supports carrier\ndetect. The components of the software system were the network module, serial I/O\nmodule, a thread manager, and the GUI. A port manager detected online and\noffline modems, and managed connecting and freeing ports. Each thread handled\none modem, connecting the network and serial interfaces. Once a modem was on,\nthe serial buffer was continuously monitored and any common error would be\ndetected. The correct firmware and settings files needed for each model's\nupgrade were picked up by the software system. FTP commands were used to\ncontrol flashing memory regions and serial commands were used to control the\nboot process. Running processes displayed their status through the easy-to-read\ngraphical and log user interface. The user interface also provided simple\ncontrols to start, stop, and select models for the modems. The threading model was the most difficult to develop part of the software. I\nused the threading support provided by Qt, and found it easier to use than\nPython's threading module. When the main Qt program quits, it also automatically\nquits any qthreads that are still running. Results The project was a success. I was the sole creator and developer and was amazed\nat the results achieved in just over 1,200 lines of code. It took 2-3 months to\ndevelop the system, including testing. Once completed, the DSL Firmware Recovery System was 8x faster on a single\nmachine, and it made it possible to add additional machines and serial cards\nmore easily. One day 1,600 modem firmware conversions were done, in addition\nto the normal daily workload. The software also helped to prevent errors, so that the quality of service\nincreased, and fewer defective modems were shipped out. Conclusion Although I was without programming experience, Python allowed me to\nsimultaneously learn a programming language and accomplish a complex job.\nPython is a uniquely powerful and usable \"learn-as-you-go feature-rich\nlanguage.\" Author How Wong previously failed University programming and now works as a Linux\ntechnologist. He is interested in using Linux and open-source software to solve\nreal world problems. Mr. Wong developed skills in the course of a varied IT\ncareer and in his spare time working in Python and web programming,\nmultimedia, and Linux OS. Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["D-Link Australia Uses Python to Control Firmware Updates", "Introduction", "Problem Description", "The Solution", "DSL Firmware Recovery System", "Results", "Conclusion", "Author"]}
{"url": "https://www.python.org/success-stories/wordstream-uses-python-as-their-platform-of-choice/", "title": "WordStream Uses Python as Their Platform of Choice | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event WordStream Uses Python as Their Platform of Choice Written by Gerard Escalante and Philip Stefou , WordStream Introduction WordStream is a provider of keyword\nmanagement solutions for continuously optimizing and expanding PPC and SEO\nefforts, involving large numbers of keywords.  WordStream provides a scalable,\nprivate, online keyword workbench, for conducting keyword discovery, keyword\nsuggestion, keyword research ,\nkeyword grouping, keyword organization, search marketing workflow, and for\nturning research into action. WordStream has been in development since 2007, and is developed and supported\nby an eight person engineering team. The server system is approximately 25,000\nlines of Python. The software is deployed to our servers and supports\nthousands of users worldwide. The Architecture From a software perspective, WordStream is a high-availability, massively\nscalable, distributed, multi-tier client/server database application. The\nproduct is composed of three separate modules: The server backend is written in Python, and provides data storage and\nprocessing facilities. The Graphical User Interface front-end is written in Adobe Flex, and\nprovides aid to the functionality exposed by the server.  It requires a\nlive connection to the server in order to function. A JavaScript 'tracking code' is installed on client web pages and provides\nthe server with active web analytics. Some of the other technologies we're using at the moment for WordStream are\nAdobe Flex, Linux, Apache, and C/C++. As for development process tools, we're\nusing PyDev Extensions, Trac, Buildbot, Review Board, and Git. The Decision to Use Python Python was used from the start of this project. It was a bit difficult to\nrecruit new developers with prior experience in Python, however our experience\nso far has been that Python has been a very easy language to pick up. Once you\nlearn Python, it's hard to go back to using other languages like C/C++. There were several reasons we decided to user Python as the platform of choice\nfor WordStream. First, Python code is extremely and universally readable. Developers from any\nlanguage background can read and understand code without having to resort to\nmuch documentation. Second, Python is a very mature platform, with a wealth of third party\nlibraries and tools. The Python suite of debugging tools are easy to find and\nwork extremely well. Thirdly, Python works seamlessly across platform boundaries, which frees up\nour developers so they can use any platform to do their day-to-day\ndevelopment. It is also very easy to deploy in production, with wide support\nfrom all major Linux distributions. In addition, Python is suitable for rapid prototyping and development due to\nthe dynamic type system, native support for common data structures (e.g., hash\nmaps, sets, and lists), the \"batteries-included\" standard library, and sane\nerror handling. Another reason we chose Python is that it is an excellent language for parsing\nas well as operating on collections with ease (iterating, concatenating,\nintersecting, etc.). Last but not least, if performance ever becomes an issue, it is easy to write\nextensions using the Python/C API. Understand that we did evaluate other solutions, which included Ruby and Java.\nBut our impression of Ruby was that it was too immature at the time and Java\ncan often be unpleasant to work with. Project Results It is imperative that we provide 24/7/365 availability to our clients, as\nWordStream is an online Software as a Service solution used by people all\naround the world. Given that prerequisite, Python has performed magnificently. Python has proven to be a very powerful and flexible language in terms of both\nparsing and data manipulation. There are a host of favorable reviews and kudos\nonline that praise Python and the product definitely delivers. Being an early stage start-up, it is always a challenge to convince talented\nengineers to leave their current positions and sign on with our development\nteam. One of our most productive engineering hires had a C/C++ programming\nbackground with no prior experience with Python, yet was able to quickly learn\nand be productive using the language. In fact, he cited the productivity of\nPython language as being one of the reasons for signing on with us! Python does have some minor shortcomings in the areas of raw processing\nperformance, and its operation in multi-threaded environments. However, these\nconcerns are easily addressable using C extensions, or by building on a\nmulti-process execution model. Conclusion In summary, we believe the choice to base our product technology on Python\nprovides WordStream with a strategic, technological advantage over our\ncompetitors because of the increased productivity, reliability and\nextensibility that it enables. About the Authors Gerard Escalante is Vice\nPresident of Engineering at WordStream. He has a Bachelor of Applied Science\ndegree in Computer Engineering at the University of Waterloo in Canada. Philip Stefou is a Sr. Software Engineer at WordStream. Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["WordStream Uses Python as Their Platform of Choice", "Introduction", "The Architecture", "The Decision to Use Python", "Project Results", "Conclusion", "About the Authors"]}
{"url": "https://www.python.org/psf/grants/faq/", "title": "Grants - Frequently Asked Questions | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> Grants >>> Grants Program FAQ Grants - Frequently Asked Questions Q. Is there a maximum grant size that can be awarded? A. There is no set maximum, but grants are awarded with consideration for\nthe annual PSF grant budget and that events/sprints will be virtual. We will be taking into consideration the components the event/projects need and with that in mind are willing to consider up to $2,500 per request for larger virtual events and as little as $200 for smaller initiatives. The Foundation reserves the right to make a grant smaller than the total you request. If a smaller grant amount will not be acceptable, you should state such in the application. Q. Will the PSF fund grant requests for Python sprints ? A. Yes, the PSF will consider grants for Python-related sprints. Please provide information about focus and goal of the sprint in your application, as well as the number of expected participants. And don't forget to\ninclude some photos in your grant follow-up so that we can tweet about your sprint :-) The amount will depend on the needs of the sprint, how much impact the work will have and how many people will be partaking in the sprint. Q. Will the PSF fund swag? A. The PSF does not fund swag production or disbursement. Q. Is there anything I need to know about fund disbursements ? A. The PSF offers various payment methods. If your grant request is approved, specific information will be requested in the email notification.  Please see our Payment Options page ( https://www.python.org/psf/paymentoptions/ ) for more information. Q. Are there any countries or people that can't receive grants from the PSF? A. The Office of Foreign Assets and Control (OFAC) publishes lists of individuals and companies owned or controlled by, or acting for or on behalf of, targeted countries.  The US government prohibits US citizens, US-based entities and US branches of foreign companies from doing business with countries or parties on these lists.  The lists include individuals, groups, and entities, such as terrorists and narcotics traffickers designated under programs that are not country-specific.  The Specially Designated Nationals (SDN) list contains names of individuals, banks, businesses, etc. that have been blocked from doing business in the US. OFAC lists change often and are published on OFAC\u2019s site . The Python Software Foundation complies with OFAC regulations to avoid both civil and criminal penalties.  Before the PSF accounting team adds new vendors to its system, the PSF checks the OFAC lists to confirm that the new vendor is compliant.  Non-compliant vendors will not be issued reimbursements, grants, or other payments. Q. Are there any restrictions on how I describe receiving a grant from the PSF? A. Yes, there are. Specifically, the PSF awarding a grant to support a community activity is not the same as formally endorsing a particular project or commercial offering in any capacity, and should not be represented as such. This can be readily achieved by sticking to phrasing like \"We have received funding from the PSF\" or \"This event was sponsored by the PSF\". Q. Will the PSF fund grant requests for Python User Group (PUG) website hosting costs ? A. The Python Software Foundation (PSF) covers website hosting costs for approved fiscal sponsored Python User Groups or events. If you are developing a hosting or event advertising plan for your PUG, please research the following open source options before applying for a grant: Oregon State University's Open Source Lab (OSU OSL) hosting services: the PSF has a partnership with OSU OSL for website and server\nhosting for free or discounted for open source-affiliated projects. Read the Docs is a free platform for creating, hosting, and browsing documentation online. CiviCRM is a free, open source, web-based, internationalized relationship management and event management platform. Q. Does the PSF issue grants for event-subscription sites like Meetup ? A. Yes.   The PSF hosts over 96 groups in 31 countries via our Meetup Pro Network ( https://www.meetup.com/pro/python-software-foundation-meetups ) as long as 3 conditions are met: The Meetup holds at least 2 events per calendar year (virtual or in-person). Event content focuses on Python content at least 70% of the time.  Content may include adjacent topics, such as networking, basic machine learning, etc. Please include a link to or full text of the group's code of conduct in the About section of the group's Meetup site to become and stay eligible for reimbursement and the PSF Meetup Pro network. If your group is a fiscal sponsoree of the PSF, reimbursements of meetup subscriptions are not charged against the fiscal sponsoree's fund balance. Here is a sample proposal: Grant Proposal: $180 to cover the cost of the Boston Python user group\u2019s meetup.com subscription for 12 months: January through December of 2023. Grant Objective: meetup.com helps to increase the visibility of the user group, as well as boost attendance through automated reminders, RSVP functionality, and other tools. It also makes organizing and promoting the group easier, as well as providing a platform to garner sponsorships and thank sponsors publicly. Grant Size: $180 total, which is the cost of 12 months to organize a group on meetup.com. Grant Beneficiaries: The Boston Python user group has over 1500 members on meetup.com. We have had monthly meetings since before 2007 and have an average attendance of 60-100 Python programmers. meetup.com provides a centralized location where our members see what\u2019s coming up and who has RSVPed for the meeting. Preferred method of funds delivery: A deposit into the PayPal account for meetup@bostonpython.com . Q. When should I submit my grant request? A. We ask that grant requests be submitted at least 6 weeks before the funding is needed - this gives us enough time to thoroughly review, ask questions, and have enough time to send you the funds. We will not accept grants that are submitted within 20 days of the event/project start date. Q. Can we use your logo or a similar logo? How should we use the words \"Python\" or \"PyCon\" which are trademarked? A. Please read our Trademark policy . This covers the Python logo or any similar logos and the use of the words \"Python\" or \"PyCon\" and how you should proceed. if you have any doubts about your intended use of the trademarks, please contact the PSF Trademarks Committee . Q. How should we report after the event/project? A. The PSF has a policy that requires all grant recipients to submit reports. These reports are useful for us to gauge the impact we are having and how the event went. For subsequent events, we require past reports in order to consider further requests.\nWorkshops: If there were different organizers working on the previous event in your area, it is your responsibility to reach out to them to ensure a report was filed.\nPython conferences: If there were different organizers/or a different conference chair running the conference the previous year, please contact them to make sure a report was submitted before you submit your new grant request. This is the form grant recipients should use to submit post-event/project reports. Q. Once my grant is approved, how long does it take to receive funds? A. After you receive a notification with the amount of funding the PSF approved for your grant request and you submit an invoice, payment will be processed within 7 business days and the Controller will notify you when the payment has been sent. We sometimes run into issues when sending funding internationally so that is why we ask to receive grant requests 6 weeks out. Q. Will the human rights legislation in my country be taken into account when the PSF chooses whether or not to fund my event? A. No, we will not consider local human rights legislation in our decision-making process for community-run events. The PSF can not send money to countries under US sanction and we do still expect a regionally appropriate, robust, and enforceable Code of Conduct. More information is available on our grants page . The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "Considering submitting a grant request to the PSF? Please read this FAQ first.", "meta_keywords": "python, grants, psf", "headers": ["Grants - Frequently Asked Questions", "The PSF"]}
{"url": "https://www.python.org/psf/grants/", "title": "PSF Grants Program | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> Grants >>> Grants program PSF Grants Program \u26a0 The PSF Grants Program has paused processing new incoming grant applications for February 2025 to prepare for upcoming changes to the program. The application form will re-open on March 1st, 2025. Any applications already in the system will be processed normally. See our blog post for more information. Overview of the PSF Grants Program Welcome to the Python Software Foundation (PSF) Grants Program page! This page and the PSF Grants Work Group are here to help support your Python related conferences, workshops, and local Python communities. The grants process is in place to ensure that we have the information we need to evaluate grant requests and maintain our records. We also want to make sure that grant requesters and recipients are set up for success! If you have any questions about the Program, process, or applying, you have a couple of options to find answers:\nRead through this page\u2013 we\u2019ve tried to cover as much as possible! Check out the Grants FAQ page Join the monthly PSF Grants Program Office Hour sessions on the PSF Discord Email grants@python.org We have successfully provided over 3 million USD in grants since we started the program in 2015 all of which have supported tons of fun and exciting work and events to enrich the Python community. We can\u2019t wait to hear about your event, workshop, or regional community\u2014so let\u2019s jump right in! Guiding Principles The PSF Grants Program supports hundreds of Python-related conferences, workshops, and communities globally. To facilitate a sustainable grant program, the PSF Board established guiding principles for the program and funding in 2024. Program Guiding Principles The guiding principles of the PSF Grants Program are: Impactful Reliable Equitable Transparent Sustainable Funding Guiding Principles The guiding principles behind the PSF Grants Program funding are: Strive for geographic equity Prioritize underserved communities Prioritize high returns on investment in terms of community impact Invest in both new and existing communities Evaluate and fund in our areas of expertise Ensure Python and Pythonistas are supported So what do these Guiding Principles mean? The program and funding principles outlined in our PSF Grants Program Guiding Principles help us do a couple of things: Set a vision for the program. Make decisions on a program level basis, as well as on individual grants. Help guide our analysis of grants data in our yearly Grants Program transparency report, and any goals that come from the report and its analysis. Grant Proposal Requirements Timeframe: We require that applications be submitted 6 weeks before the event/project start date - this gives us enough time to thoroughly review, ask questions, and have enough time to send you the funds. Types of grants the PSF funds: Our current focus is on in-person/virtual events, virtual sprints, meetup.com fees, and Python diversity/inclusivity efforts. Grants for non-Python specific events will only be considered where there's a clear Python component to the event, and the grant will only be for the Python component of the event. The PSF does not fund: Hackathon-style events Swag production/disbursement or prizes Personal travel requests Initiatives or events unrelated to Python or the PSF\u2019s charitable mission Other portions of grant requests as determined by the GWG or the Board Grant amount: If the grant is funding several components of a project, please provide a breakdown of the cost of each component. Please note that the PSF may only be able to provide partial funding for a proposal. Be sure to include a breakdown of the amount you are requesting. We prefer to see what you plan on using the funds for. Additionally, a budget of the event/project work is helpful to see expected expenses and revenues. Here is a template budget anyone can use . If remaining funds will be used to support regional Python efforts, please tell us about it. Event requirements: If your request is for a workshop/training , we would like to know more about the mentors and educational content. We prefer a high staff:student ratio of at least 1:10 (one staff per ten students). We require a curriculum with learning outcomes for participants as well. An outline is not sufficient, we would like to see code repositories, worksheets, presentation slides, etc. The amount of hours that participants will receive hands-on training is also required. If it is for a conference , we require a link to the schedule(s) (should include speaker info), registration page, and information about your sponsors/potential sponsors. We recommend waiting to submit your request until all these components are in place. Development projects: We would like to know an expected timeframe for major milestones of the work being completed. This can be described as text or via an attachment. We also provide a place for mapping out your milestones in our budget template . Code of Conduct: Please submit a link to your event's/project\u2019s code of conduct, it is required. Refer to this code of conduct best practices guide for events for tips on how to set up a code of conduct for your event. Reporting: Any event/project that receives funding from the PSF is required to submit a report. The PSF would like to see how the grant was used, so we ask to receive a report on the event, project or program that was funded. These reports are useful for us to gauge the impact we are having and how the event went. For subsequent events, we require past reports in order to consider further requests. A report template is provided to approved grants. If your event/project has a blog, social media post, or pictures that relate to the grant, we'd love to see those links, too. Frequency: The PSF will only fund up to two events per city and/or organizer within a given year. For example, if Python Workshop Mars was to request funding for a third workshop in one year, we will most likely decline it unless they show evidence in their grant request that a third workshop/training is necessary. Additionally, if event organizer Jesse asks the PSF for a third grant request in one year, we will most likely decline it unless they show evidence in their grant request that a third workshop is needed. Trademarks and Logos: Please read our Trademark policy and Trademark FAQs . These cover the permitted uses of the Python logos or any similar logos and the use of the words \"Python\" or \"PyCon\" and how you should proceed. If you have  questions about your intended use of the trademarks or want to ask for approval for using a \"PyCon\" conference name or a logo derivative, please contact the PSF Trademarks Committee by email . All conferences, projects, or user groups that create new logos or names using \"PyCon\" are required to obtain approval from the Trademarks Committee. Resources for Virtual Events The PSF has created a web page listing free resources for folks that want to organize virtual events . We recommend being familiar with these resources before you submit your grant request - they may be of use to your event/ project. How to Submit Please submit grant proposals via our online form at least 6 weeks prior to the event so the Grants Work Group has enough time to review your request. In order to access the form, you may first have to create a free account on the psfmember.org website . Grant Proposal Tips We recommend reading through our FAQ for additional information before you submit your application. Proposals should be for specific projects with a clear objective, rather than support for ongoing activities. Proposals should be brief (a few pages of text at maximum). For information on disbursements of payments, see https://www.python.org/psf/paymentoptions/ Office Hours The PSF Grants Program Office Hours is a text-only chat based office hour hosted on the Python Software Foundation Discord at 1-2PM UTC (9AM Eastern) on the third Tuesday of the month. (Check what time that is for you.) The server is moderated by PSF Staff and is locked in between office hour sessions. If you\u2019re new to Discord, check out some Discord Basics to help you get started. Questions? If you have questions about your submission please reach out to grants@pyfound.org . Example Conference Grant Proposal Grant Title: PyCon 2020 Date: April 15, 2020 Event\u2019s website: https://us.pycon.org/2020/ Grant amount & budget: $2000 total ($1500 for virtual platform support, $500 for accessibility support). To thank you for your sponsorship, we will place the PSF logo on our site and offer you 3 free tickets to PyCon to distribute as you see fit. We have attached an overview of the conference budget, which includes a breakdown of conference tickets and sponsorship revenue, as well as all of our expected expenses. Grant objective: PyCon will be taking place this April, and sponsorship from the Python Software Foundation would be much appreciated. In an effort to keep our ticket prices affordable and accessible to many, we've secured corporate sponsorship to cover equipment costs and speaker support, and are hoping that the PSF will be able to help us pay for our virtual platform and some accessibility such as captioning. Grant beneficiaries: We are expecting 300 attendees this year. We will also be recording the talks, and will make them available online a few days after the event. Regional Support: The proceeds from the PyCon conference help run our local User Group throughout the year and also help us kick off planning for next year's PyCon conference. Link to Conference Schedule(s): https://us.pycon.org/2020/online/ , https://us.pycon.org/2020/events/edusummit/ , https://us.pycon.org/2020/hatchery/mentoredsprints/ , https://us.pycon.org/2020/hatchery/trainers/ , https://us.pycon.org/2020/hatchery/beginnersdata/ Link to Registration Page: https://us.pycon.org/2020/online/ Link to Conference Prospectus: https://us.pycon.org/2020/sponsors/prospectus/ Code of Conduct: https://us.pycon.org/2020/about/code-of-conduct/ Percentage of Python: 100% Follow-up Activities: We will post a summary of PyCon on our blog and mention that the PSF sponsored the event. The conference will be posting all recordings to our YouTube channel so they will be made available to everyone. We will also submit the required post-event follow up form. Recent Grants You can find historical grant approvals\nin the Python Software Foundation Resolutions web page. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["PSF Grants Program", "\u26a0", "Any applications already in the system will be processed normally. See our", "for more information.", "Overview of the PSF Grants Program", "Guiding Principles", "Program Guiding Principles", "Funding Guiding Principles", "So what do these Guiding Principles mean?", "Grant Proposal Requirements", "Resources for Virtual Events", "How to Submit", "Grant Proposal Tips", "Office Hours", "Questions?", "Example Conference Grant Proposal", "Recent Grants", "The PSF"]}
{"url": "https://www.python.org/psf/volunteer/pycon/", "title": "Volunteer Opportunities for PyCon US | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> Volunteer >>> Volunteer for PyCon US Volunteer Opportunities for PyCon US The volunteer staff plays a huge role in the success of PyCon US!  There are many opportunities to get involved and be part of the team starting early on in the planning all the way through the final day of sprints. If you are interested in volunteering check back often for new opportunities and select one that would best fit your passion. Current Opportunities Travel Grant Committee We are seeking new members to shape strategy and support in-person disbursement sessions. We are looking for applications for both PyCon US 2022 and 2023 in Salt Lake City. Applications are closed for the Travel Grant Committee PyCon Charlas Committee La Python Software Foundation y el Staff de la PyCon promueve y aprecia la participaci\u00f3n de voluntaries. Nuestra misi\u00f3n en apoyar y facilitar el crecimiento de una comunidad diversa e internacional y esto requiere la participaci\u00f3n de la comunidad en si misma. El voluntariado para los com\u00edtes de la PyCon US son una forma de involucrarse y hacer la diferencia. Si te gustar\u00eda unirte al com\u00edte de PyCon Charlas ` por favor llena este formulation Applications are closed for the PyCon Charlas Committee The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Volunteer Opportunities for PyCon US", "Current Opportunities", "The PSF"]}
{"url": "https://www.python.org/psf/workgroups/", "title": "Work Groups of the Python Software Foundation | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse Work Groups of the Python Software Foundation Active Work Groups Code of Conduct Work Group Diversity and Inclusion Work Group Education & Outreach Work Group Fellows Work Group Grants Work Group Infrastructure Work Group Python Job Board Work Group Packaging Work Group Trademarks Work Group Inactive Committees & Work Groups Scientific Python Work Group Marketing Work Group Sprint Work Group Public Support Committee (PSC) Public Relations Committee (PRC) Python Conference Committee (PCC) Cuban Pythonistas Work Group Active Work Groups Code of Conduct Work Group Formed: May 2018 Mailing List: conduct-wg at python.org The workgroup's purpose is to foster a diverse and inclusive Python community by enforcing the PSF code of conduct, along with providing guidance and recommendations to the Python community on codes of conduct, that supports the PSF mission of \u201congoing development of Python-related technology and educational resources\u201d. Establishing resolution: RESOLVED , that the Python Software Foundation add the following new members to the code of conduct work group: Anwesha Das, Brett Cannon, Jeff Triplett, Kenneth Reitz, Maricela Sanchez Miranda, Philip James, Rami Chowdhury, Sasha Romijn, Thomas Wouters. Approved May 31, 2018 As of 2024, the current list of voting members is; Tania Allard, KwonHan Bae, Brett Cannon, Rami Chowdhury, Jessica Greene, Cheuk Ting Ho, Tereza Iofciu, \u0141ukasz Langa, Deb Nicholson, Mojdeh Rastgoo, Jeff Triplett, Drew Winstel Diversity and Inclusion Work Group Formed: November 2020 Notes: https://wiki.python.org/psf/DiversityandInclusionWG The workgroup's purpose is to further the PSF\u2019s mission to \u2018support and facilitate the growth of a diverse and international community of Python programmers.\u2019 We also aim to provide guidance to the PSF Board of Directors in line with this mandate. Establishing resolution: RESOLVED, that the Python Software Foundation approve the creation of the PSF Diversity and Inclusion Working Group to actively further the PSF\u2019s mission to \u2018support and facilitate the growth of a diverse and international community of Python programmers.\u2019 The group will be formed under this charter: https://docs.google.com/document/d/1uvIztyTLr6Cq4yQpNCjPlIl5pYlUjYYYqWCG1ZQrkHE/edit?usp=sharing Education & Outreach Work Group Formed: June 2011 Re-formed: December 2024 Charter: Education & Outreach Work Group Charter The Education & Outreach Workgroup's (EOW) purpose is to support the Python Software Foundation\u2019s mission to promote the Python programming language, especially in supporting and enhancing the education of Python. Re-establishing resolution: RESOLVED , that the Python Software Foundation Board of Directors approve the Education & Outreach Work Group Charter as written at https://wiki.python.org/psf/PythonEduWGCharter . Approved; 10-0-0 by PSF Board Meeting vote on 11 December, 2024. Fellows Work Group Formed: July 2017 Mailing List: psf-fellow at python.org Establishing resolution: RESOLVED , that the Python Software Foundation acknowledge the creation of the PSF Fellow Work Group to accept, review and approve Fellow applications for membership. Grants Work Group Formed: August 2015 Mailing List: psf-grants at python.org Establishing resolution: RESOLVED , that the Python Software Foundation acknowledge the creation of the PSF Grants Workgroup to review proposals to the PSF for grants in support of conferences, training workshops, and related projects. Infrastructure Work Group Formed: April 2010 Mailing List: infrastructure at python.org This committee works on making concrete plans for improving python.org\ninfrastructure and to address technical infrastructure broadly.  The\nboard created this committee at a special meeting on March 24 2005. In June 2013, this committee was formed into a PSF Working Group.\nThe charter for this working group can be found here . Python Job Board Work Group Formed: July 2018 Mailing List: jobs at python.org This working group was created to help manage the job board with the support of PSF staff. Current resolution July 2018: RESOLVED , that the Python Software Foundation acknowledge the creation of the Python Software Foundation Jobs Work Group to manage, review, and approve job postings. Packaging Work Group Formed: May 2016 Notes: https://wiki.python.org/psf/PackagingWG Mailing List: packaging-wg at python.org The purpose of this working group is to support the larger efforts of improving and maintaining the packaging ecosystem in Python through fundraising and disbursement of raised funds. It will largely focus on efforts such as PyPI, pip, packaging.python.org, setuptools, and cross project efforts. Establishing resolution: RESOLVED , that the Python Software Foundation acknowledge the creation of the PSF Packaging WG to support the larger efforts of improving and maintaining the packaging ecosystem in Python through fundraising and disbursement of raised funds https://wiki.python.org/psf/PackagingWG/Charter Trademarks Work Group Formed: November 2008 Mailing List: psf-trademarks at python.org This committee assesses actual and proposed uses of the Python\ntrademarks.  See the PSF Trademark Usage Policy . Work group resolution: RESOLVED , that the Trademark Committee shall be a working group of the Python Software Foundation, co-chaired by David Mertz and Marc-Andr\u00e9 Lemburg. Membership shall consist of co-chairs and additionally Carl Trachte, Doug Napoleone, David Goodger, Van Lindberg. Co-chairs shall, by joint agreement, have the power to add or remove committee members, with the current membership roster to be approved by the Python Software Foundation Board of Directors at least once per year Approved 7-0-1 by IRC vote, 16 August, 2013. Establishing resolution: RESOLVED , that a Project Management Committee designated the\n\"Trademarks Committee\" (TMC) be formed with David Goodger,\nMarc-Andre Lemburg, Van Lindberg, David Mertz, Doug Napoleone,\nJames Tauber and Trevor Toenjes as initial members, and James\nTauber as the initial chairman, and that the Trademarks Committee\nshall, when so instructed by the PSF Board, assess trademarks for\ncompliance with the current PSF Trademark Usage Policy and advise\nthe PSF Board on what action, if any, to take. Inactive Committees & Work Groups Scientific Python Work Group Formed: April 2015 Mailing List: scientific at python.org This working group shall draw on the expertise of both the PSF and NumFOCUS, and on the broader scientific Python community in general, to select the best use of its budgeted funds to advance the scope, breadth, and utility of Python for scientific work.  In essence, the purpose of the group is to grant funds allocated to it by PSF and/or NumFOCUS towards conferences, user groups, educational, and development efforts. Current resolution June 2015: RESOLVED , that the Python Software Foundation recognize the Scientific Python Workgroup as an official PSF workgroup. Marketing Work Group Formed: August 2015 Mailing list: psf-marketing-wg at python.org Establishing resolution: RESOLVED , that the Python Software Foundation acknowledge the creation of the PSF Grants Workgroup to review proposals to the PSF for grants in support of conferences, training workshops, and related projects. Sprint Work Group Formed: May 2010 Mailing List: sprints at python.org The committee will be responsible for the coordination and review and\napproval of sprint proposals.  For more information, see the sprints website . Establishing resolution: RESOLVED , that the Board approves the creation of a specific\n\"Targeted Sprint Committee\" and allocates a yearly budget of 5000 USD\nfor the funding of targeted, community based sprints with Jesse Noller\nas the initial Chairman, and additional members as needed per project\nrequirements and approved by the board. Public Support Committee (PSC) Dissolved: February 25, 2007 Formed: August 13, 2002 Chairman: Stephan Deibel Members: Steve Holden, Neil Norwitz, David Goodger, and Stephan Deibel Mailing List: http://mail.python.org/mailman/listinfo/psc The Public Support Committee (PSC) is charged with fund raising for\nthe PSF, which it does by creating fund raising messages, ads, and\nmaterials, soliciting donations from private and commercial\ncontributors, and managing the PSF's fund raising infrastructure. Charter RESOLVED, That the Public Support Committee (PSC) be made up of the\nfollowing initial members: Stephan Deibel, Jeremy Hylton, Marc-Andre\nLemburg, Tim Peters, Aahz, Alex Martelli, Neil Norwitz and Greg Ward,\nthat the committee follows rules analog to those set forth in the PSF\nbylaws for the PSF board with respect to voting and meetings, and that\nMarc-Andre Lemburg will be the initial chairman of the PSC. Amended Charter (2004-04-13) RESOLVED, that the Public Support Committee formed in August 2002\nshall continue under current membership and leadership, and that the\ncommittee's activities shall now be constrained to all aspects of fund\nraising for the PSF, including but not limited to (1) creation of fund\nraising messages, ads, and materials, (2) soliciting of donations from\nprivate and company contributors, and (3) management of fund raising\ninfrastructure. Public Relations Committee (PRC) Dissolved: April 12, 2005 Formed: April 13, 2004 Chairman: Steve Holden Members: Aahz, Kevin Altis, Steve Holden, Andrew Kuchling,\nTim Parkin, Barry Warsaw Mailing List: http://mail.python.org/mailman/listinfo/psf-prc The Public Relations Committee (PRC) is responsible for the\ndevelopment of official informational, marketing, and advocacy\nmaterials for the Python programming language.  This includes the\npython.org website and brand identities associated with the PSF and\nPython, among other things.  The PRC also promotes Python in\ncommercial, governmental and educational contexts, in order to\nfacilitate the recruitment of new users and contributors to the\nlanguage. Establishing Resolution RESOLVED, that a Public Relations (PR) Committee is formed,\nwith Tim Parkin, Kevin Altis, Aahz, Barry Warsaw, Andrew\nKuchling, and Steve Holden as initial members, and Steve Holden\nas the initial chairman and Vice President of Public Relations,\nthat the PR Committee replaces and subsumes the activities of\nthe previously disbanded Web Committee, and that the PR Committee\nshall: Facilitate and oversee the development and maintenance of the\nofficial informational, marketing, and advocacy materials for the\nPython programming language, including but not limited to those\nappearing on python.org, brochures, and press releases. Ensure that content and design for such materials is consistent and\nappropriate with the mission and requirements of the Python\nSoftware Foundation and the needs and ideals of the Python open\nsource community. Develop and manage brand identities associated with the Python\nSoftware Foundation and Python. Actively promote Python in commercial, governmental and educational\ncontexts, in order to facilitate the recruitment of new users and\ncontributors to Python. Python Conference Committee (PCC) Dissolved: March 14, 2008 Formed: Oct 14, 2003 Chairman: Andrew Kuchling Members: David Ascher, David Goodger, Steve Holden (secretary),\nAndrew Kuchling (chair) Mailing List: http://mail.python.org/mailman/listinfo/pycon-organizers The PyCon Committee runs PyCon , the annual\ndeveloper-oriented conference for the Python programming language. Establishing Resolution RESOLVED, that the Foundation establish a Project Management\nCommittee, the Python Conference Committee, responsible for organizing\nand sponsoring conferences that advance the Foundation's mission. The\ncommittee is authorized to incur expenses up to a limit establish by\nthe board for a specific conference. The chairman of the committee\nshall be Vice President of the Corporation. The initial members of the\ncommittee shall be David Ascher, Steve Holden, and Jeremy\nHylton. Ascher will be its initial chairman. Amending Resolution (2005-05-06) RESOLVED, that Andrew Kuchling be appointed a member of the Python\nConference Committee, and that he be appointed the new chair of this\nCommittee. By this resolution, the membership of the Committee will be\nDavid Ascher, Steve Holden (secretary), Jeremy Hylton, Andrew Kuchling\n(chair). Amending Resolution (2007-01-08) RESOLVED, that the Conference Committee chair be authorized to appoint\nand dismiss committee members, subject to prompt reporting to the\nBoard. Cuban Pythonistas Work Group Formed: March 2015 Moderator: David Mertz Mailing List: python-cuba at python.org Current resolution June 2015: RESOLVED , that the Python Software Foundation recognize the Python Cuba Workgroup as an official PSF workgroup. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Work Groups of the Python Software Foundation", "Charter", "Amended Charter (2004-04-13)", "Establishing Resolution", "Establishing Resolution", "Amending Resolution (2005-05-06)", "Amending Resolution (2007-01-08)", "The PSF"]}
{"url": "https://www.python.org/psf/volunteer/", "title": "Volunteer | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> Volunteer >>> Volunteer for the PSF Volunteer The Python Software Foundation needs your help building infrastructure for\nthe PSF and PyCon US, helping with fundraising and advocacy, and running important\nparts of the Python community (mailing lists, website, job board, etc). You can help out by signing up the psf-volunteers mailing list, which\nputs you in a pool of people that receive requests from the PSF board when\nthere is work to be done that we cannot handle ourselves. Sign up here ! Don't worry if you won't always be available.  Our goal is to build a pool\nof volunteers so that work can get be done by whomever is available at the\ntime of need.  This will help get things done with fewer delays. Example Tasks Help find donors and sponsors Act as a PSF representative at a conference Do a mini-presentation on the PSF at your local users group Help with other initiatives, such as grants Participate in planning and organizing PyCon US Python Software Foundation Working Groups We also have PSF working groups comprised of volunteers. See the list of active working groups here . Please note that not all working groups are currently accepting new volunteers. Volunteer for PyCon US You can also volunteer for PyCon US . The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Volunteer", "Example Tasks", "Python Software Foundation Working Groups", "Volunteer for PyCon US", "The PSF"]}
{"url": "https://www.python.org/psf/donations/matching-gifts/", "title": "Matching Donations | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse Matching Donations Did you know many companies offer a matching gift program to encourage philanthropy among their employees? And that some companies will even match gifts made by family members and retirees?\r\n\r\nBy completing a matching gift form (online or paper), you may be able to double, or even triple, the impact of your gift. Contributions of any amount help us award grants and provide resources for furthering the development of a diverse and international community of Python programmers. Your employer may receive a tax deduction for contributions to the Python Software Foundation (PSF) (EIN 04-3594598) , which is a public charity classified as exempt under section 501(c)(3) of the Internal Revenue Code. How to donate and have your company match In a few simple steps, you can see if your company offers a matching gift program. Make a contribution to the PSF here . Check with your company's Human Resources or Accounting department about matching gift programs for 501(c)(3) nonprofits like the Python Software Foundation. Your company's Human Resources or Accounting Department will let you know about submission deadlines or related forms. Please contact us at psf-donations@python.org with any questions. Your employer will determine whether the PSF fits into their matching gift program requirements. The PSF receives the matching donation! The PSF appreciates each donation and act of support you make. Thank you to our participating partners! Microsoft Google employees can make a matched donation easily here Twilio employees can make a matched donation easily here The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Matching Donations", "How to donate and have your company match", "The PSF"]}
{"url": "https://www.python.org/psf/membership/supporting/", "title": "Supporting Membership | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse Supporting Membership Become a Supporting Member of the PSF! Sign up as a Supporting Member What does it mean to be a Supporting Member of the PSF? Supporting Members make an annual membership donation to the PSF to fund our work for the Python language and the Python community. Supporting Members have voting rights in annual PSF Board Elections and bylaw votes. Supporting Members provide an important share of the PSF\u2019s annual revenue every year. Income from Supporting Memberships is independent of particular corporate interests, and helps hold us accountable to our most important stakeholders: our community members. Supporting Members are key to ensuring we can continue the work that is most important to the Python community, including hosting the Python Packaging Index , PyCon US , the CPython Developer in Residence, and our Grants program . A standard Supporting Membership is $99 per year, and you can sign up or renew here on our psfmember.org site. You will be asked to create a psfmember.org account if you do not already have one. Become a Supporting Member of the PSF - Sliding Scale Rate (NEW)! Sign Up as a PSF Supporting Member - Sliding Scale Rate What is the Supporting Membership Sliding Scale Rate? Supporting Members make an annual membership donation to the PSF to fund our work for the Python language and the Python community. Supporting Members have voting rights in annual PSF Board Elections and bylaw votes. Examples of why you might select a sliding scale Supporting Membership: You work in a country with lower average incomes than the US or Western Europe. You are a student. You are currently un- or underemployed. (These are just illustrative examples to help you select a rate! We won't ask for any information about the reason for your selection.) Your Supporting Membership will make you eligible to vote for candidates for the PSF Board of Directors, changes in the PSF bylaws, and other matters related to the infrastructure of the foundation. We value the participation of each member of the Python community and do not want financial barriers to keep individuals from participating as a member of the PSF. Please choose the amount that best fits your personal situation. Whatever donation is right for you, we are grateful for your support! We do ask that you be mindful that this membership option is available to promote accessibility and contribute to the PSF\u2019s mission to support and facilitate the growth of a diverse and international community. We welcome everyone who wants to contribute, as we aspire to an environment where anyone can participate, and everyone can make a difference. Please note that Basic Membership is always free, and if you are eligible for the Contributing or Maintaining membership category, you can also receive voting membership at no cost by self-certifying here . The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Supporting Membership", "Become a Supporting Member of the PSF!", "What does it mean to be a Supporting Member of the PSF?", "Become a Supporting Member of the PSF - Sliding Scale Rate (NEW)!", "What is the Supporting Membership Sliding Scale Rate?", "The PSF"]}
{"url": "https://www.python.org/psf/donations/2024-q4-drive/", "title": "Power Python: | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Power Python: Join in this year\u2019s end-of-year fundraiser + membership drive! The Python Software Foundation (PSF) is the charitable organization behind Python, dedicated to advancing, supporting, and protecting the Python programming language and the community that sustains it. That mission and cause are more than just words we believe in. Our tiny but mighty team works hard to deliver the projects and services that allow Python to be the thriving, independent, community-driven language it is today. Some of what the PSF does includes producing PyCon US , hosting the Python Packaging Index (PyPI), awarding grants to Python initiatives worldwide, maintaining critical community infrastructure , and more. To build the future of Python and sustain the thriving community that its users deserve, we need your help. By backing the PSF, you\u2019re investing in Python\u2019s growth and health, and your contributions directly impact the language's future. Is your community, work, or hobby powered by Python? Join this year\u2019s drive and power Python\u2019s future with us by donating or becoming a Supporting Member today. There are two ways to join in: Donate to the PSF! Your donation is a direct way to support and power the future of the Python programming language and community you love. Every dollar makes a difference. DONATE TODAY Become a Supporting member! When you sign up as a Supporting Member of the PSF, you become a part of the PSF, are eligible to vote in PSF elections and help us sustain what we do with your annual support. You can sign up as a Supporting Member at the usual annual rate($99 USD), or you can take advantage of our sliding scale option (starting at $25 USD)! We don't want cost to be a barrier to you being a part of the PSF or to your voice helping direct our future. Every PSF member makes the Python community stronger! JOIN TODAY Your donations: Keep Python thriving \u2022 Support CPython and PyPI progress  \u2022 Increase security across the Python ecosystem \u2022 Bring the global Python community together \u2022 Make our community more diverse and robust every year. We\u2019re incredibly grateful to be in community with you. Highlights from 2024: A record-making PyCon US - We produced the 21st PyCon US , in Pittsburgh, US, and online, and it was a huge success! For the first time post-2020, PyCon US 2024 sold out with over 2,500 in-person attendees. Advances in our Grants Program - 2024 has been a year of change and reflection for the Grants Program, starting with the addition of Marie Nordin to the grants administration team who has supported the PSF in launching several new grants initiatives. We set up Grants Program Office Hours , published a Grants Program Transparency Report for 2022 and 2024, invested in a third-party retrospective , launched a major refresh of all areas of our Grants program and updated our Grants Workgroup Charter . With more changes to come, we are thrilled to share that we awarded a record-breaking amount of grant funds in 2024! Empowering the Python community through Fiscal Sponsorship - We are proud to continue supporting our 20 fiscal sponsoree organizations with their initiatives and events all year round. The PSF provides 501(c)(3) tax-exempt status to fiscal sponsorees such as PyLadies and Pallets, and provides back office support so they can focus on their missions. Consider donating to your favorite PSF Fiscal Sponsoree and check out our Fiscal Sponsorees page to learn more about what each of these awesome organizations is all about! Connecting directly through Office Hours - The current PSF Board has decided to invest more in connecting and serving the global Python community by establishing a forum to have regular conversations. The board members of the PSF with the support of PSF staff are now holding monthly PSF Board Office Hours on the PSF Discord . The Office Hours are sessions where folks from the community can share with us how we can help your regional community, express perspectives, and provide feedback for the PSF. Paying more engineers to work directly on Python, PyPI, and security - We welcomed Petr Viktorin, Deputy Developer in Residence (DiR), and Serhiy Storchaka, Supporting DiR . It\u2019s been exciting to begin to realize the full vision of the DiR program, with special thanks to Bloomberg for making it possible for us to bring Petr on board. The DiR team is taking an active role in shaping the development of the language, and with three people on the team each DiR can now also spend a percentage of their time on feature work aligned with their interests. Continuing to enhance Python\u2019s security through Developers-in-Residence - Seth Larson, PSF Security Developer in Residence (DiR) had a busy year thanks to continued support from Alpha-Omega . Seth worked on a variety of projects including the creation of SBOMs for Source and Windows CPython artifacts, implementing build reproducibility for CPython source artifacts, and auditing and migrating Sigstore, to name just a few. Check out Seth's blog to keep up to date with his work. Mike Fiedler, PyPI Safety & Security Engineer, also worked on a variety of projects such as two-factor authentication for all users on PyPI, an audit of PyPI, made significant progress on malware response and reporting, collaborated on the PSF\u2019s submission for the Cybersecurity and Infrastructure Security Agency (CISA)\u2019s Request for Information (RFI), and more! Thanks to AWS and Georgetown for making Mike\u2019s PyPI security accomplishments possible. Stay up to date with Mike's work on the PyPI blog . New PSF Staff dedicated to critical infrastructure - We established the PyPI Support Specialist role, filled by Maria Ashna . Over the past 23 years , PyPI has seen essentially exponential growth in traffic and users, relying for the most part on volunteers to support it. The load far outstretched volunteers and prior staff capacity, so we are very excited to have Maria on board. We also filled our Infrastructure Engineer role, welcoming Jacob Coffee to the team, to ensure PSF-maintained systems and services are running smoothly. Thank you. Really. Every dollar you contribute to the PSF makes an impact and tells us you value Python and the work we do. Python and the PSF are built on the amazing generosity and energy of all our amazing community members out there who step up and give back. We appreciate you and we\u2019re so excited to see where we can go together in the year to come. The Python Software Foundation is the US 501(c)(3) nonprofit organization behind the Python language. You can see our public documents here , read our latest updates on our blog , and check out our latest Annual Impact Report here . The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Power Python:", "The PSF"]}
{"url": "https://www.python.org/nominations/elections/", "title": "Elections | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> Membership >>> PSF Elections Elections Nominations Closed 2024 Python Software Foundation Board Election The following people were elected to the Board: Tania Allard KwonHan Bae Cristi\u00e1n Maureira-Fredes View nominations Election began: July 2, 2024 Nominations Opened: Tue, 11 Jun 2024 14:00:00 +0000 Nominations Closed: Tue, 25 Jun 2024 14:00:00 +0000 2023 Python Software Foundation Board Election The following people were elected to the Board: Cheuk Ting Ho Denny Perez Georgi Ker Christopher Neugebauer KwonHan Bae View nominations Election began: June 20, 2023 Nominations Opened: Thu, 01 Jun 2023 00:00:00 +0000 Nominations Closed: Thu, 15 Jun 2023 23:59:59 +0000 2022 Python Software Foundation Board Election The following people were elected to the board: Kushal Das Jannis Leidel Dawn Wages Simon Willison View nominations Election began: June 20, 2022 Nominations Opened: Wed, 01 Jun 2022 16:00:00 +0000 Nominations Closed: Thu, 16 Jun 2022 12:00:00 +0000 2021 Bylaws Proposed Changes Election The following resolutions were approved: Section 5.15 Limits on Co-affiliation of Board Members Resolution approved by the board of directors RESOLVED, that the Python Software Foundation board approve the bylaw implementation of 'Section 5.15. Limits on Co-affiliation of Board Members' as proposed here , to be voted on by the membership during the next election. Context The board is focused on promoting a diverse and international community. Many directors work at organizations that are part of our community, sponsor the PSF, and/or volunteer in some other way. It happens occasionally that several board members are employed by the same organization, and this shouldn\u2019t be an impediment for their service. At the same time the Board wants to guard against a situation where a single entity has complete control over the PSF by gaining a majority of the board seats. It\u2019s not quite enough to declare allegiances and let voting members decide who to elect, because for example one company taking over another could result in a majority on the Board. The Bylaw changes aim to prevent such Board capture. Section 4.8. Fellows Resolution approved by the board of directors RESOLVED, that the Python Software Foundation board approve the bylaw updates to 'Section 4.8. Fellows' as proposed here , to be voted on by the membership during the next election. Context The PSF Board noticed that the current bylaws lacked the ability for the board to fully delegate Fellow approvals to the Fellows Work Group. \nGoing forward, the board prefers an option to empower the WG (which is composed of only Fellow members) to accept nominations, vote on them, and officially approve them. If these changes are approved, the pull request will be made against the official bylaw repository. View nominations Election began: June 23, 2021 Nominations Opened: Wed, 30 Jun 2021 19:03:08 +0000 Nominations Closed: Wed, 30 Jun 2021 19:03:09 +0000 2021 Python Software Foundation Board Election The following people were elected to the board: Joannah Nanjekye D\u00e9bora Azevedo Tania Allard View nominations Election began: June 8, 2021 Nominations Opened: Thu, 06 May 2021 08:00:00 +0000 Nominations Closed: Tue, 01 Jun 2021 08:00:00 +0000 2020 Python Software Foundation Board Election The following people were elected to the board: Nina Zakharenko Dustin Ingram Jeff Triplett Thomas Wouters View nominations Election began: June 8, 2020 Nominations Opened: Wed, 06 May 2020 08:00:00 +0000 Nominations Closed: Thu, 04 Jun 2020 12:02:02 +0000 2019 Python Software Foundation Board Election The following people were elected to the board: Lorena Mesa Kushal Das Marlene Mhangami Jannis Leidel View nominations Election began: June 7, 2019 Nominations Opened: Sun, 05 May 2019 08:00:00 +0000 Nominations Closed: Sat, 01 Jun 2019 08:00:00 +0000 The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Elections", "Nominations Closed", "Section 5.15 Limits on Co-affiliation of Board Members", "Section 4.8. Fellows", "The PSF"]}
{"url": "https://www.python.org/psf/membership/", "title": "Become a Member of the PSF | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse Become a Member of the PSF By becoming a member, you tell us and the world that you are a part of the PSF and support our work, and as one of the classes of voting members, you add your voice to the future direction of the Foundation. We're so happy to have you! Voting Memberships As core stakeholders of the Python Software Foundation community, Supporting Members, Contributing Members, and PSF Fellows are all eligible to vote in PSF Board Elections . 1. Sign up as a Supporting Member here! Supporting Members donate an annual membership fee of $99 to the PSF to sustain the Foundation and support the Python community. We have also introduced a sliding scale rate for Supporting Membership, which you can sign up for here . Your support is crucial to the PSF's ability to do our work making Python available and supporting our community. More details are available on our Supporting Membership page . 2. Self-Certify as a Contributing Member here! Contributing Members qualify because of their work for the Python community and ecosystem. Fill out the short form linked above to sign up! You qualify as a Contributing Member if you dedicate at least five hours per month volunteering on projects which advance the mission of the PSF by creating or maintaining open source software available to the public at no charge, organizing Python events, participating in one of the PSF's working groups, etc. 3. Fellows Fellows are members who have been nominated for their extraordinary efforts and impact upon Python, the community, and the broader Python ecosystem. Visit this page to nominate a Fellow or learn more about the process. Basic Membership Sign up as a Basic Member here! Signing up as a Basic Member is free, and simply declares that you are part of the Python language community and agree to the community Code of Conduct. Thank you for being with us! Questions? Check out our Membership FAQ page . The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Become a Member of the PSF", "Voting Memberships", "1.", "2.", "3.", "Basic Membership", "Questions?", "The PSF"]}
{"url": "https://www.python.org/sponsors/application/", "title": "Sponsorship Application | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> Sponsorship >>> Apply to Sponsor Sponsor the PSF Thank you for sponsoring the PSF! How to use this page: Select a Sponsorship Package : Select your sponsorship level using the radio buttons below. You may customize your package by unchecking highlighted items or checking available add-on items. Add a la carte benefits : Select any a la carte items. Submit your application : Submit using the button at the bottom of this page, and your selections will be displayed. Sign in or create a python.org account to send your contact information and application to PSF staff. Finalize : PSF staff will reach out to you to confirm and finalize your sponsorship. If you would like us to walk you through the program, email sponsors@python.org . Thank you for making a difference in the Python ecosystem! Select a Sponsorship Package VISIONARY $155,000 * * Subject to change SUSTAINABILITY $95,000 * * Subject to change MAINTAINING $63,000 * * Subject to change CONTRIBUTING $33,000 * * Subject to change SUPPORTING $16,500 * * Subject to change PARTNER $11,000 * * Subject to change PARTICIPATING $4,000 * * Subject to change ASSOCIATE $1,500 * * Subject to change Foundation Benefits Collapse/expand section PSF Supporter Level Badge PSF provides an icon showing you are a PSF sponsor and your level. You may display it on your website, social media accounts, events, and swag. A good way to show that you are a supporter of the Python community. Logo on python.org Logo linked to sponsor designated URL posted on https://www.python.org/psf/sponsors/\r\nListed in order of package level Promoted Python Success Story Write a case study showcasing your use of Python to be published to python.org/success-stories/ . Your Success Story posted on python.org will be promoted on PSF social media. PSF social media promotion Promotion of your sponsorship via PSF social media accounts. Visionary & Sustainability: 4 posts. Maintaining: 3 posts. Contributing & Supporting: 2 posts. Partner: 1 posts. Potential add-on Potential add-on Sponsorship of jobs.python.org Logo listed on jobs.python.org for one year Mention in the PSF Newsletter Sponsor mention and logo in the PSF newsletter that is published approximately every other month. 4 4 2 Logo listed on PSF blog Logo will be placed in the header on the blog home page (pyfound.blogspot.com) and visible for one year. The PSF blog receives about 72,000 views per month. Original Blog Post 1 original blog post on the PSF blog highlighting sponsor\u2019s use of Python. Meet with the PSF Board of Directors Opportunity to meet with the PSF Board of Directors to discuss a topic of your choosing. The health and sustainability of our community is important to many organizations and we want to make sure community needs are heard and noted. Press release Joint press release to be co-written by PSF and Sponsor announcing the sponsorship. PyPI Benefits Collapse/expand section Logo on the PyPI sponsors page Company logo will be added to a sponsor page on pypi.org/ Potential add-on Potential add-on Social Media Promotion Promotion of your sponsorship on @PyPI social media. Potential add-on Potential add-on Potential add-on Logo in a prominent position on the PyPI project detail page Company logo will be displayed in rotation at a prominent location on PyPI project page sidebars. Over 2 million sidebars logos are displayed per month. Logo on the PyPI footer https://pypi.org/ Core Development Benefits Collapse/expand section Language Summit recognition Sponsor will receive recognition at the intro and wrap up of the event, one social media mention, and recognition in post event blog. Logo on python.org/downloads/ Logo added to python.org/downloads/. 4.4 million distinct users visit this page every month! Joint press release with the PSF PSF and sponsor will work together to create a press release. CPython Dev Sprint Recognition Sponsor will receive recognition at the intro and wrap up of the sprint, plus social media mentions.\r\nSponsor will also be recognized in the virtual event and in the post event blog. Meet with the Python Steering Council Opportunity to meet with the Steering Council to discuss technical aspects of Python or feedback you may have, or just a Q&A with the Steering Council. The health and sustainability of Python is critical to many organizations and we want to make sure community needs are heard and noted. PyCon US 2025 Benefits Collapse/expand section Listing on PyCon US website Sponsor designation and listing on us.pycon.org linking to URL provided in the application Full Conference Passes Full conference passes include access to all PyCon US talks, Charlas, keynotes, conference meals, Expo Hall, Job Fair, and Opening Reception. \r\n\r\nA voucher code will be provided for the quantity included in your package and each staff member will register individually to receive the complimentary pass. 25 22 18 15 10 5 2 Discounted Full Conference Passes Additional Full Conference Passes available at a 25% discount off the regular corporate rate. A discount voucher code will be provided for the quantity requested and each staff member will register and pay the discounted ticket cost individually. 10 10 10 10 10 5 2 Job Fair Table and PyCon US Jobs Page job listings A job fair table for the Job Fair on Sunday and job listings on the us.pycon.org Jobs Fair page. A Full Conference or Expo Only pass is required for staff attending the Job Fair. Potential add-on Potential add-on Expo Hall & Job Fair Only Passes Expo Hall Only passes provide access to the Expo Hall only (including meals), and are intended for sponsor staff who intend to set up and staff your sponsor booth and/or job fair table, but not attend talks or other conference programming. 10 10 8 8 5 3 PyCon US Social Media Promotion Promotion of sponsorship on @pycon Twitter account. Visionary, Sustainability, and Maintaining: 2 tweets. Contributing, Supporting, Partner, and Participating: 1 tweet. 2 2 2 1 1 1 1 Contribute an item to the PyLadies Auction Opportunity to donate an item to be bid on at the popular PyLadies fundraising dinner and auction. Companies often contribute creative items customized for the event. Booth Space in Expo Hall Booth in Expo Hall starting Thursday for Opening Reception, all day Friday, and Saturday. Limited availability, first come first served. 20x30 20x30 20x20 10x20 10x20 10x10 Option to purchase Lead Retrieval Service You will have the option to access Lead Retrieval through us.pycon.org for a fee. Your sponsorship admin will be able to purchase licenses to access the service for your exhibitors. Up to 15 licenses for purchase. Up to 10 licenses for purchase. Up to 10 licenses for purchase. Up to 10 licenses for purchase. Up to 7 licenses for purchase. Up to 5 licenses for purchase. Up to 2 licenses for purchase. Option to Purchase Additional Expo Hall Only Passes Up to 5 additional Expo Hall & Job Fair Only staff passes available at $100 each. A voucher code will be provided for the quantity requested and each staff member will be required to register and pay the discounted ticket cost individually. 5 5 5 5 5 5 Logo highlight in PyCon US News Logo placement in each of 4 emails sent to all users that opt-in to PyCon US News Potential add-on Potential add-on Potential add-on Full-Color Slide One full-color slide to be used in rotation in general session & all breakout rooms, which will be displayed between sessions. Highlight in attendee email Highlight of PyCon US content in the attendee emails sent to all registered attendees PyCon US Mobile App Logo Placement Your logo will appear in rotation in a banner on the PyCon US mobile app. Sponsor Presentation - LOW INVENTORY One Sponsor Presentation, a 1-hour session on Thursday, May 16th. You may present on any topic of your choice, as long as it does not constitute an advertising.\r\n\r\n$8,500. Capacity limit of 16 presentations. (Formerly referred to as \"Sponsor Workshops.\") Potential add-on Potential add-on Potential add-on Potential add-on Potential add-on Potential add-on Sponsor Greeting in General Session Three minute live greeting for PyCon US Attendees during General Sessions, preceding Keynotes. Select a la carte benefits Available to add to sponsorship packages. Selected sponsorship package does not allow a la carte benefit additions. PyCon US 2025 - Coffee Break Sponsorship $5,000 sponsorship cost. Logo placement at coffee tables on Friday, Saturday, and Sunday and on us.pycon.org food and beverage page. You may also optionally provide branded cups for coffee service; subject to design approval by the PyCon US team. PyCon US 2025 - PyCon US WiFi Sponsor $10,000 sponsorship cost with capacity of 2 sponsors. You will be acknowledged wherever we provide WiFi password on event signage, mobile app, and hotel signage, as well as with your logo on the relevant page on us.pycon.org. PyCon US 2025 - PyCon US Travel Grant Sponsor $2,000 sponsorship cost. Sponsorship fees go directly into our Travel Grant fund which enables people from all over the world and a range of personal and professional backgrounds to attend PyCon US. Logo placement on a shared slide to be used in rotation between talks in general session & all breakout rooms and on the Travel Grants page on us.pycon.org. Fiscal Sponsorees 2025 - PyBay Gold Sponsorship $12,500. For more information about PyBay, please visit https://pybay.org/sponsors/sponsor-us/. \r\nYou now have the option to add on a sponsorship to one of our fiscal sponsorees, for a convenient one-and-done agreement! PyCon US 2025 - Opening Reception Sponsor $5,000 with capacity of 3 sponsors. Welcome sign displayed at entrance of the Opening Reception at refreshments tables, on the event page on us.pycon.org. Social media promotion. PyCon US 2025 - Registration Sponsor $10,000 sponsorship cost with capacity of 2 sponsors. Logo displayed prominently at the registration desk where all attendees check in throughout the event. You also have the opportunity to provide an item for attendees as they check in that promotes sustainability. We will promote your registration sponsorship on social media. PyCon US 2025 - PyLadies Luncheon Sponsor $2,000 sponsorship cost. Logo placement at event and on us.pycon.org event page. PyCon US 2025 - Sprint Days Coffee & Power Sponsor $5,000 sponsorship cost with capacity of 2 sponsors. During the four Sprints Days, logo placement on sign displayed at entrance to Sprints area, logo placement on signage at coffee stations, and logo placement on us.pycon.org Sprints page. You may also optionally provide branded coffee cups; design subject to PyCon US team approval. Fiscal Sponsorees 2025 - PyOhio 2025 Platinum Sponsorship $10,000, limit of 2. For more information about PyOhio, please visit https://www.pyohio.org/2025/PyOhio-2025-Sponsorship-Prospectus.pdf\r\n\r\nYou now have the option to add on a sponsorship to one of our fiscal sponsorees, for a convenient one-and-done agreement! Fiscal Sponsorees 2025 - PyCascades 2025 Platinum Sponsorship $10,000, limit of 4. For more information about PyCascades, please visit https://2025.pycascades.com/sponsors/\r\nYou now have the option to add on a sponsorship to one of our fiscal sponsorees, for a convenient one-and-done agreement! Fiscal Sponsorees 2025 - North Bay Python 2025 Platinum Sponsorship $8,000, limit of 2. For more information about North Bay Python, please visit https://northbaypython.org/sponsor. You now have the option to add on a sponsorship to one of our fiscal sponsorees, for a convenient one-and-done agreement! PyCon US 2025 - PSF Member Lunch Sponsor $2,000 with capacity for 2 sponsors\r\nLogo placement on us.pycon.org and event signage. PyCon US 2025 - Captioning Sponsor $2,500 sponsorship cost. Logo placement on us.pycon.org, and appear on shared slide during talks and General Sessions with other captioning sponsors. PyCon US 2025 - Speakers' Room Sponsorship $2,000 sponsorship cost. Your logo will be displayed on signs thanking you for your support in the \"Green Room\" where all PyCon US speakers and presenters prepare to go on stage, by the snacks and water table. You will also be acknowledged on the website. PyCon US 2025 - PyLadies Auction Lead Sponsor PyCon US 2025 - PyLadies Auction Sponsor $3,000 with capacity of 4 sponsors. Welcome sign displayed at entrance to PyLadies Auction, logo placement on us.pycon.org Auction page. Select standalone benefits Available to be selected without package Standalone benefits are not available when selecting a package. PyCon US 2025 - Stand-alone Job Fair Table Select this option to participate only in the Job Fair on Sunday. $3,000 per table. Includes (2) Job Fair passes (includes lunch) and listing on the Jobs Fair page on us.pycon.org. Submit your contact information Create an account or log-in Submit your contact information | Clear form PSF staff will reach out to confirm and finalize 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 259 261 262 263 264 265 268 267 269 271 272 281 283 290 292 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 254 256 259 262 264 265 268 267 269 271 272 281 283 290 292 238 239 240 241 242 243 244 245 246 247 248 249 250 254 256 259 262 264 265 268 267 269 272 283 292 238 239 240 241 242 243 244 245 246 247 248 254 259 264 265 268 267 269 272 292 238 239 240 241 242 243 244 245 246 247 254 259 265 268 269 272 292 238 240 241 242 243 244 245 246 247 254 259 265 268 269 292 240 241 243 245 246 254 265 268 269 240 245 246 238 240 241 244 259 265 268 269 238 240 241 244 259 265 268 269 240 244 259 240 241 265 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 197 196 199 198 200 201 202 203 204 205 206 208 209 211 210 212 213 214 215 224 225 227 228 229 234 237 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 197 199 201 203 204 206 209 208 211 210 212 213 214 215 224 225 227 228 229 234 237 180 181 182 183 184 185 186 187 188 189 190 191 192 197 199 201 204 206 208 209 211 210 212 213 215 225 227 228 229 237 180 181 182 183 184 185 186 187 188 189 190 197 201 206 208 209 211 210 212 215 225 228 237 180 181 182 183 184 185 186 187 188 189 197 201 209 208 211 212 215 225 237 180 182 183 184 185 186 187 188 189 197 201 208 211 212 225 237 182 183 185 187 188 197 208 211 212 182 187 188 180 182 183 186 201 208 211 212 180 182 183 186 201 208 211 212 182 186 201 182 183 208 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 137 136 138 139 141 140 142 144 145 146 148 149 150 151 152 153 154 155 165 166 167 168 169 170 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 135 137 139 140 142 145 146 148 149 151 150 152 153 154 155 165 166 167 168 169 170 118 119 120 121 122 123 124 125 126 127 128 129 130 135 137 139 142 145 149 148 150 151 152 153 155 166 167 168 169 170 118 119 120 121 122 123 124 125 126 127 128 135 139 145 148 149 150 151 152 155 166 167 169 118 119 120 121 122 123 124 125 126 127 135 139 149 148 150 152 155 167 166 118 120 121 122 123 124 125 126 127 135 139 148 150 152 167 166 120 121 123 125 126 135 148 150 152 120 125 126 118 120 121 124 139 148 150 152 118 120 121 124 139 148 150 152 120 124 139 58 70 74 64 42 33 71 32 31 30 29 24 26 62 63 65 49 69 77 40 73 75 38 76 36 57 58 70 74 64 42 33 71 32 31 30 29 24 26 25 2 4 62 44 45 63 65 46 48 47 49 66 68 69 72 40 77 73 75 38 76 36 35 57 58 70 74 64 42 33 71 32 31 30 29 24 26 25 2 62 63 65 48 66 49 68 69 72 73 77 40 75 38 76 36 35 57 58 70 74 64 42 33 71 32 31 30 29 65 69 77 40 73 38 75 76 57 58 70 74 64 42 33 71 32 31 30 65 40 73 77 75 76 57 58 74 64 42 33 71 32 31 30 65 73 77 75 76 74 64 33 32 31 77 75 76 74 64 33 32 31 64 179 84 If you would like us to walk you through the new program, email sponsors@python.org. Thank you for making a difference in the Python ecosystem! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Sponsor the PSF", "Thank you for making a difference in the Python ecosystem!"]}
{"url": "https://www.python.org/psf/sponsors/", "title": "Python Software Foundation Sponsors | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> Sponsorship >>> PSF Sponsors The PSF would not be possible without the generous financial help of\n    the following sponsors . While the PSF thanks these sponsors for their support, we don't necessarily endorse nor promote any specific activity of any of its sponsors. Interested in becoming a sponsor? Check out our sponsor application . Visionary Sponsors Google Meta Bloomberg NVIDIA Sustainability Sponsors Microsoft Maintaining Sponsors Qube Research & Technologies Limited Capital One Red Hat Streamlit Contributing Sponsors Western Governors University (WGU) Anaconda, Inc JetBrains OpenEDG Python Institute Supporting Sponsors Pydantic Logfire Salesforce Heroku Sentry AutoKitteh Algorand DataStax Oracle Western Governors University Partner Sponsors Reuven Lerner \u2014 Python training Datadog Anvil ActiveState Posit, PBC Tecton EdgeDB Bright Data Twilio Awesomic Coiled Participating Sponsors Netflix Astral Six Feet Up Commonwealth Bank of Australia Zama Sticker Robot Two Sigma Associate Sponsors Feedzai Quansight BeProud Media Sponsors LWN.net Government Participant Sponsors U.S. Digital Service \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["The PSF would not be possible without the generous financial help of\n    the following", ". While the PSF thanks these sponsors for their support, we don't necessarily endorse nor promote any specific activity of any of its sponsors.", "Visionary Sponsors", "Sustainability Sponsors", "Maintaining Sponsors", "Contributing Sponsors", "Supporting Sponsors", "Partner Sponsors", "Participating Sponsors", "Associate Sponsors", "Media Sponsors", "Government Participant Sponsors"]}
{"url": "https://www.python.org/psf/sponsorship/", "title": "Sponsor the PSF | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> Sponsorship The Python Software Foundation Sponsorship Program The PSF is excited to unveil a new sponsorship program that offers an array of benefits across the Python Software Foundation, PyPI (Python Package Index), CPython, and PyCon US. Sponsorship provides a full range of benefits supporting Python\u2019s ecosystem that include a broad selection of promotional opportunities during PyCon US and also year-round. Join us as a sponsor and help make a difference in the Python ecosystem! See Sponsorship Options and Apply FINANCIAL IMPACT OF 2020 and 2021 COVID-19 has changed all aspects of our lives and is reshaping our future. PyCon US typically generates over 65% of the PSF\u2019s revenue.  With PyCon US 2020 and 2021 happening virtually, the PSF may lose $1.2 million USD of expected revenue for those two years. In 2019, the strategic plan for the PSF shifted towards supporting CPython sustainability with plans to hire three full time Pythonistas to address maintenance, R&D, and education. With lower expected income from PyCon US for two years, we need sponsorship support to make these plans a reality. Other 2020 plans put on hold include improving pypi.org support and continuing more grants program funding. The PSF is researching ways we can diversify our revenue streams, but cannot replace the near-term loss of $1.2 million USD. Your support is more important than ever! What Does the PSF DO? More information about what the PSF does can be found here . How Can I Get Involved? All of these initiatives help maintain and support the Python community and Python tools that you and the Python community use daily. This work can only be done with the generous financial support that organizations like yours provide. Whether you want to give back to this vibrant community or perhaps introduce your business or brand to like-minded industry professionals, the Python Software Foundation can help you accomplish those goals. Your contributions matter and they make an impact! The PSF is recognized by the IRS as a 501(c)(3) non-profit charitable organization, and donations are tax-deductible for organizations that pay taxes in the United States. We hope you\u2019ll join us as a sponsor and help make a difference in the Python ecosystem. We\u2019d love to talk with you.  Please get in touch by contacting: sponsors@python.org . \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "sponsor sponsorship", "headers": ["The Python Software Foundation Sponsorship Program", "FINANCIAL IMPACT OF 2020 and 2021", "What Does the PSF DO?", "How Can I Get Involved?"]}
{"url": "https://www.python.org/psf/faq/", "title": "Python Software Foundation FAQ | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse Python Software Foundation FAQ Contents What is the Python Software Foundation? Who are on the PSF board?  Who are the officers? How do I reach the PSF? How do I join the PSF? How can I follow  PSF activities? How can I provide feedback? What is the Python Software Foundation? From the PSF Mission Statement : The mission of the Python Software Foundation is to promote,\nprotect, and advance the Python programming language, and to\nsupport and facilitate the growth of a diverse and international community of Python programmers. The Python Software Foundation (PSF) is a non-profit\nmembership organization devoted to advancing open source technology\nrelated to the Python programming language.  It qualifies\nunder the US Internal Revenue Code as a tax-exempt 501(c)(3)\nscientific and educational public charity, and conducts its\nbusiness according to the rules for such organizations. The PSF is a corporation according to U.S. tax law, incorporated in\nthe state of Delaware.  Our federal taxpayer ID (\"04 number\") is\n04-3594598. For a quick overview of the PSF's activities, please see the our About page . Who are on the PSF board?  Who are the officers? The PSF board and officers are listed on the Board of Directors & Officers page. How do I reach the PSF? For general inquiries, please email psf@python.org . For sponsorship questions, please email sponsors@python.org . For accounting questions, including how to send ACH, wire, Zelle, or other payments to the PSF or suspicious checks, please contact accounting@python.org . Postal address: Python Software Foundation 9450 SW Gemini Dr. ECM# 90772 Beaverton, OR  97008 USA Fax:  1-858-712-8966 How do I join the PSF? See the membership FAQ for detailed information on both basic membership and the other kinds of membership available to individuals. Sponsorship is also available for organizations.  See the sponsorship page for details. How can I follow  PSF activities? Sign up to receive our newsletter! It is currently sent out about every other month. Python Software Foundation News is a blog announcing and discussing PSF activities. You can follow us on Twitter , Mastodon , and LinkedIn as well. You can sign up here for psf-members-announce , which is a moderated, very low traffic list used for announcements to the PSF members, primarily regarding elections. How can I provide feedback? For questions about the PSF, or for comments on the PSF web pages,\nplease write to psf@python.org . For questions about Python, please write to help@python.org . For comments on the python.org web pages, please write to webmaster@python.org . The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Software Foundation FAQ", "The PSF"]}
{"url": "https://www.python.org/psf/about/legal-and-policies/", "title": "Legal & Policies | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse Legal & Policies Legal Statements Trademark Policy Licenses Contribution Agreements Vendor Info Legal Statements Legal statements on Trademark, Copyright, and Third-Party Content. Trademark Policy PSF trademark usage policy. Licenses About Python licensing. Contribution Agreements Information on contribution licensing and online form for organizations wishing to make software contributions. Vendor Info Accounts payable information and payment options. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Legal & Policies", "The PSF"]}
{"url": "https://www.python.org/psf/records/", "title": "Python Software Foundation Public Records | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> About >>> Public Records Python Software Foundation Public Records Incorporation Here is a transcript of the Articles of Incorporation . Bylaws Here are the PSF Bylaws . Board of Directors PSF Board Members & Officers Resolutions Meeting Minutes Python Software Foundation Policies: Conflict of Interest Policy Whistleblower Policy Python.org Email Policy PSF Staff Current staff IRS recognition of tax exempt status The PSF is a United States 501(c)(3) corporation domiciled in Delaware. Final determination letter from the IRS, May 5, 2006 (960KB PDF\nscan) Advanced ruling exemption letter, Feb. 25, 2003 (OCR of original) Form 872-C (470K scanned JPEG image) The original copies of our tax exempt application, IRS form 1023, have\nbeen lost by the PSF.  The IRS provided the PSF this letter .\nThe PSF's IRS Form 1023 application requesting 501(c)(3) public charity\nstatus, in three formats: MS Word , HTML , plain text .  (The latter two formats were\ngenerated by MS Word.) Tax Returns and Financial Information The PSF is a United States 501(c)(3) public charity with a strong commitment to transparency and compliance. 2023 filings and related documents 2023 Annual Report 2023 990 2022 filings and related documents 2022 Annual Report 2022 990 2021 filings and related documents 2021 Annual Report 2021 990 2021 Audited Financial Statements 2020 filings and related documents 2020 Annual Report 2020 990 2020 Audited Financial Statements 2019 filings and related documents 2019 Annual Report 2019 990 2018 filings and related documents 2018 Annual Report 2018 Form 990 2017 990 2016 990 2015 990 2014 990 2013 990 2012 990 2011 990 2010 990 2009 990 2008-EZ 990 2007 990 2006 990 2005 990 2004 990 2003 990-EZ 2002 990-EZ (Filed 990-N because income <$25,000) 2001 990-EZ The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Software Foundation Public Records", "Incorporation", "Bylaws", "Board of Directors", "PSF Staff", "IRS recognition of tax exempt status", "Tax Returns and Financial Information", "The PSF"]}
{"url": "https://www.python.org/psf/fiscal-sponsorees/", "title": "Fiscal Sponsorees | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse PSF >>> About >>> Fiscal Sponsorees Fiscal Sponsorees At this time, the Python Software Foundation is not accepting new fiscal sponsoree requests. The Python Software Foundation promotes, protects, and advances the Python programming language and supports and facilitates the growth of a diverse and international community of Python programmers. Part of that mission includes acting as a fiscal sponsor to mission-related Python events, groups, and projects.  The PSF provides 501(c)(3) tax-exempt status to fiscal sponsorees and manages back office issues like cash flow, accounting, budgeting, insurance, and contract/legal support, as well as access to nonprofit discounts. To learn more about in the PSF's fiscal sponsorship program, email us !  We will provide you a fiscal sponsorship questionnaire and materials about how the PSF supports fiscal sponsorees.  We will also schedule a call to discuss how your event, group, or project fits with the PSF's charitable mission. Note:  we generally do not take new fiscal sponsorship requests the month before and after the annual PyCon US. The following groups are active fiscal sponsorees: Bandit Bandit is a prominent open source project that focuses on the field of application security in Python. Developed and maintained by a dedicated community of developers, Bandit is designed to identify and highlight potential security vulnerabilities and weaknesses within Python codebases. As a static code analysis tool, Bandit scans through the source code, leveraging a wide range of security checks and rules to detect common security issues, such as SQL injections, cross-site scripting (XSS) attacks, and insecure cryptographic implementations..  Your contribution sustains Bandit developers and maintainers. Bay Area Python Association (BAPyA) BAPyA is a group of Python community organizers in the San Francisco Bay Area dedicated to supporting local gatherings to learn and discuss Python.  Please consider supporting the BAPyA community with a contribution . Boston Python Boston Python is one of the world's largest local Python user groups.  We have a presentation night and a project night almost every month, and run weekend workshops to introduce beginners to Python.  Your donation helps keep the Python community in Boston vibrant! ChiPy Founded in 2003, ChiPy (Chicago Python User Group) has over 1,000 active members with a focus on the Python Programming Language. Meetings are open to all levels!   Our main meetings are on the 2nd Thursday of every month.  We also offer several SIGs (Special Interest Groups) in Mentorship, Data Science, Web technologies, and Finance.  Please consider supporting the Chicago Python community ! Denver Python Users Group Denver Python Users Group welcomes those interested in learning about Python or connecting with other Python professionals. We have a smaller weekly Meetup for people to work on Python projects and a larger monthly Meetup with speakers and talks.  You can help support ongoing meeting costs by donating ! Jazzband Jazzband is a project that secures the long-term maintenance of Python projects that have passed their first life-cycle as single-author projects. Jazzband's intention is to break the cycle of loss of maintenance of established, well-tested, well-documented projects\nwhen their original author steps away (bus factor problem) using cooperative coding. You can support Jazzband to help keep Python projects alive. North Bay Python North Bay Python is a boutique, one-track conference held annually in Petaluma, CA. We take inclusion seriously and ensure our speakers come from a diverse, international lineup.  To reduce costs for future attendees, consider donating to North Bay Python . Pallets Pallets develops and supports Flask, Jinja, Werkzeug, Click, and other Python libraries. These libraries power applications of all sizes around the world and are downloaded millions of times each month. Despite their popularity, the projects are primarily maintained by only a few developers.  You can support Pallets' goal by donating via the PSF or Github Sponsors to grow the community and to create a sustainable group of contributors and users. PhillyPUG PhillyPUG , the Philadelphia Python Users' Group, has\u200b 3,200 members \u200bgrowing at a rate of one new member per day. The group holds regular events including project nights, lectures, lightning talks, and workshops to attract all levels of programmers from novices to experts. Your contribution helps support the cost of these events, including event space, refreshments, and other logistical expenses. PuPPy PuPPy , the Puget Sound Programming Python Group, is a fun and friendly user group dedicated to proliferating a diverse and talented Python community in the Puget Sound region.  The group is devoted to exploring Python-based programming knowledge, embracing new and experienced members from all walks of life, and helping those members to achieve their professional goals.  Consider supporting PuPPy ! PyCascades PyCascades is a regional Python conference that moves between Vancouver, Seattle, and Portland.  PyCascades is a two-day, single-track Python conference that celebrates and brings together the Pacific Northwest Python developer and user community. Your donation helps reduce the cost of future conferences, including providing travel grants. PyBeach PyBeach is an annual one-day, single-track event, with a main talks track, open source sprints, \u201challway track\u201d space, and an expo hall.  Members of the Python communities in the Los Angeles area welcome Python professionals, enthusiasts, and students to join us.  It is a welcoming, volunteer-run, community-driven event with the mission to educate and connect its attendees to one another, and promote Python within the local technology community. Your donation will help reduce the cost of the conference and support future conferences. PyHawaii PyHawaii is a community dedicated to the growth and use of the Python Programming Language in Honolulu, the Islands of Hawaii, and across the Pacific.  All skill levels are welcome!  At PyHawaii, we value community, inclusivity and `ohana - so come join our meetup, where you will find friends, family and fantastic opportunities to learn, grow, contribute and advance your skills.  Consider supporting the group with your contribution . PyLadies PyLadies is a mentorship group for women with a focus on helping more women become active participants and leaders in the Python open source community. We have over 100 worldwide chapters and we encourage women to start their own local groups.  We  support both seasoned and budding developers through workshops, community activities, and local advocacy. Your donation to PyLadies' outreach efforts will help improve the diversity of the software industry as a whole. PyMNtos PyMNtos (pronounced pie-min-tose) is a Twin Cities group of Python enthusiasts.  Members range from beginners to hobbyists to experts.  Whoever you are and whatever your skill level is, we would love for you to join us.  There is no membership fee or any other barrier to entry.  To support the cost of Meetups, please donate ! PyOhio PyOhio is an annual, regional PyCon in Ohio that draws attendees from the Midwest US.  Content ranges from beginner to advanced and is intended to be relevant to all types of Python users including students, software professionals, scientists, hobbyists, and anyone looking to learn more. PyPA The Python Packaging Authority (PyPA) is a working group that maintains a core set of software projects used in Python packaging.  The software developed through the PyPA is used to package, share, and install Python software and to interact with indexes of downloadable Python software such as PyPI, the Python Package Index.  You can support PyPA by supporting them on Github Sponsors . PyRVA PyRVA is a local user group in Richmond, VA.  PyRVA believes that Python is best enjoyed in the company of others and organizes talks, hackathons, workshops and more to help build up the Richmond, VA Python community. Donation to PyRVA helps support costs of ongoing events. Python San Diego User Group The Python San Diego User Group is a volunteer-run group that was restarted in February 2012 and has since grown to several hundred members.  We have a general meetup each month with technical talks and networking, and also hold weekend workshops and hackathons for new to advanced Python programmers in the area.  We depend on individual and corporate sponsors and the PSF to help keep our events free for our members and to grow the Python community. Your donation helps support the venue, food, and expenses for our workshops and meetups. Twisted Twisted is an event-driven networking engine written in Python licensed under the open source MIT License.  Twisted makes it easy to implement custom network applications and supports many common network protocols, including SMTP, POP3, IMAP, SSHv2, and DNS.  You can sustain Twisted's ongoing development with a contribution ! The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Fiscal Sponsorees", "At this time, the Python Software Foundation is not accepting new fiscal sponsoree requests.", "Bandit", "Bay Area Python Association (BAPyA)", "Boston Python", "ChiPy", "Denver Python Users Group", "Jazzband", "North Bay Python", "Pallets", "PhillyPUG", "PuPPy", "PyCascades", "PyBeach", "PyHawaii", "PyLadies", "PyMNtos", "PyOhio", "PyPA", "PyRVA", "Python San Diego User Group", "Twisted", "The PSF"]}
{"url": "https://www.python.org/psf/records/staff/", "title": "Python Software Foundation Staff | Python Software Foundation", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Mission Statement Board of Directors & Officers PSF Staff Annual Impact Report Fiscal Sponsorees Public Records Legal & Policies PSF FAQ Sponsorship PSF Sponsors Apply to Sponsor Membership Sign up as a Member of the PSF! Membership FAQ PSF Elections Nominate a Fellow & Fellows Roster Donate End of year fundraiser: Power Python in 2024 Donate to the PSF Become a Supporting Member of the PSF PSF Matching Donations Volunteer Volunteer for the PSF PSF Work Groups Volunteer for PyCon US Grants Grants program Grants Program FAQ PyCon US News & Community Subscribe to the Newsletter PSF Blog Python Community Code of Conduct Community Awards Discourse Python Software Foundation Staff Deb Nicholson Executive Director Deb Nicholson joined the PSF in April 2022. She is an experienced non-profit professional and passionate open source community builder who has worked at the Open Source Initiative, Software Freedom Conservancy and the Open Invention Network. She is also a founding organizer of the Seattle GNU/Linux Conference, an annual event dedicated to surfacing new voices and welcoming new people to the free software community. She'll be building on the PSF's existing work to strengthen and diversify the global Python community, identifying new education and outreach opportunities and increasing technical and organizational capacities. She is a sci-fi nerd who lives with her partner and her lucky black cat in Cambridge, Massachusetts. Loren Crary Director of Resource Development Loren joined the PSF in November 2021 to grow and diversify the PSF\u2019s base of financial support. She will work with members, donors, sponsors, grant-awarding organizations, and the Board of Directors to expand the resources available to run our programs and strengthen the long term sustainability of the PSF. Loren has a B.A. from Amherst College and a J.D. from Stanford Law School. Prior to the PSF, she spent seven years leading fundraising and strategic revenue growth for Educate!, a non-profit social enterprise serving youth in Uganda, Rwanda, and Kenya. Outside of work, Loren enjoys solving cryptic crosswords, writing fiction, and playing with her rescue pup. Ee Durbin Director of Infrastructure Ee joined the PSF after years of volunteering with the PSF Infrastructure Working Group, PyPI, and PyCon US. They support Python community infrastructure such as www.python.org, pypi.org, and mail.python.org collaborating with volunteers from from around the globe. Internally, Ee takes responsibility for evaluating, strengthening, and implementing systems used by the PSF staff and board of directors to fulfill our mission. Outside of the PSF Ee enjoys making and consuming tacos, riding their bikes, and convincing themself that their cats love them. Phyllis Dobbs Controller Phyllis joined the PSF in January of 2017.  She is a CPA in the state of Illinois, has a B.S. in Accounting from Clemson University, and an M.B.A from Duke University.  After beginning her career in public accounting, she worked in educational publishing  for over 14 years including supporting Ed Tech group.  In 2015, she switched to supporting small non-profits in accounting, tax, budgeting, payroll, and human resources matters.  In her spare time, Phyllis enjoys practicing yoga, reading, traveling, and serving as a Library Board Trustee. Olivia Sauls Program Director Olivia joined the PSF in August 2021 and is the lead planner for the Python Software Foundation's annual flagship event, PyCon US. She holds a B.S. in Biology and a B.S. in Nonprofit Management from the University of Wisconsin-Madison and has worked in various roles throughout the nonprofit sector. When she\u2019s not working, Olivia can be found skiing, hiking with her dog, or spending time with friends and family. Laura Graves Senior Accountant Laura joined the PSF in February 2019 to assist with processing grants and donations, tracking expenses, and other general accounting functions. She has her Master's of Accountancy from the University of Alabama, and has worked in various accounting roles across many industries. When she's not working, Laura can usually be found reading, scuba diving, or petting a nearby dog. Seth Larson Python Security Developer in Residence Seth joined the PSF in June 2023 as the Security Developer in Residence. He works on broadly improving the security posture of the Python ecosystem across many projects including CPython and PyPI. Outside of work, Seth enjoys playing games of all varieties, tending to his garden, and eating at new restaurants in his hometown of Minneapolis, Minnesota. Mike Fiedler PyPI Safety and Security Engineer With over thirty years of software and systems experience, Mike is a seasoned professional who has accumulated extensive knowledge and expertise in the field. He has actively engaged with the Python community, contributing to open source projects and sharing his insights. His leadership roles at companies like Datadog, Warby Parker, and others have enabled him to mentor and guide others in the tech industry. Recognized as an AWS Container Hero and an avid open source maintainer, Mike's dedication to learning, problem-solving reflects his holistic approach to technology.\r\n\r\nBeyond his professional pursuits, Mike's personal life is just as vibrant. He has been a dedicated volunteer roller derby referee for the past 15 years, and he enjoys experimenting with various vegetarian dishes in the kitchen. Mike currently resides in New York City with his partner, Elyssa. Marie Nordin Community Communications Manager Marie joined the PSF in October 2023 as Community Communications Manager to strengthen our communications, as well as enhance our support of Python community initiatives. She has a background in community architecture, program management, Code of Conduct, and graphic design. Marie's Open Source journey began as an Outreachy intern in 2013 for the Fedora Project, where she has continued to contribute and serve in various roles. She is also a founder of the Creative Freedom Summit, an annual event dedicated to sharing knowledge around creative free software, raising awareness, and connecting artists and designers. Outside of work, Marie enjoys making art, solving the hardest jigsaw puzzles she can find, and playing board and video games. Jacob Coffee Infrastructure Engineer Jacob joined the PSF in July 2024 as an Infrastructure Engineer. With a passion for the Python community and open source in general, he brings valuable experience from his involvement in the greater Python ecosystem. He's also a maintainer in the Litestar organization, contributing to several popular packages. When not immersed in code, Jacob enjoys cooking, baking, and spending time with his two daughters and various pets. Jacob is excited to turn his hobby into a career, supporting the Python community through his role at the PSF. Maria Ashna PyPI Support Specialist Maria has recently worked at the Brain and Creativity Institute at USC working on research related to the impact of music and arts education on the brain and the neuroscience of creativity. Maria is also the founder of The Magic Light Bulb, Inc., a tech and product consulting firm. Previously, Maria has taught and worked as a lecturer in the School of Gerontology at USC, worked at The MIND Research Network, and had various roles in tech, from technical project specialists to product management. Maria is also a classically trained performer who has performed in numerous theater and film productions around the world. She received her first Master's degree in Information Systems and Technology from Claremont Graduate University, and her second Master's in Neuroimaging and Informatics from USC. Maria studied neuroscience and theatre as an undergraduate at the University of New Mexico. Maria has also trained in theatre and performing arts with the Moscow Art Theatre School and American Rep Theatre faculty at Harvard University. She is always hunting for the best sweet potato fries in the land! Jaime Barrera Community Events Coordinator Jaime joined the PSF in January 2025 as the Community Events Coordinator to assist in the planning and support of PyCon US. His relationship with the PSF started over 10 years ago as a vendor at PyCon US providing onsite support with registration and lead retrieval. He has an extensive background in trade shows and conferences from small to large scale across a broad range of industries. His past 3 years as an onsite organizer at PyCon US led him to join the PyCon US team full-time. When he\u2019s not working, he spends his time with his two sons, collecting sneakers and looking for the world\u2019s best taco. The PSF The Python Software Foundation is the organization behind Python. Become a member of the PSF and help advance the software and our mission. \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Software Foundation Staff", "Deb Nicholson", "Loren Crary", "Ee Durbin", "Phyllis Dobbs", "Olivia Sauls", "Laura Graves", "Seth Larson", "Mike Fiedler", "Marie Nordin", "Jacob Coffee", "Maria Ashna", "Jaime Barrera", "The PSF"]}
{"url": "https://www.python.org/jobs/type/back-end/", "title": "Python Job Board | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Back end 9 Python jobs in Back end New Senior Python Backend Engineer Reef Technologies Warsaw (fully remote), Poland Back end , Database Posted: 11 February 2025 Developer / Engineer New Lead Python Backend Engineer Reef Technologies Warsaw (fully remote), Poland Back end , Lead Posted: 11 February 2025 Developer / Engineer New Machine Learning Engineer for Agentic AI Scalable Path Remote, Remote, Latin America Back end , Machine Learning , Agentic Workflows Posted: 30 January 2025 Data Analyst New Senior Backend Engineer BactoBio London, UK Back end Posted: 22 January 2025 Developer / Engineer New G2i Remote, MG, Remote Back end Posted: 20 January 2025 Developer / Engineer Senior Software Engineer, AI UpDoc, Inc. Remote, Remote, United States Back end , Cloud , Machine Learning , Web Posted: 18 January 2025 Developer / Engineer Python Engineering Manager Tillo Hove, East Sussex, United Kingdom Back end Posted: 13 December 2024 Manager / Executive Senior Backend Engineer - Poland Focal Systems remote, Poland Back end Posted: 05 December 2024 Developer / Engineer Software Programmer J.F.T. Maintenance Services Limited West Winch, Norfolk, United Kingdom Back end , Database , Front end Posted: 01 December 2024 Developer / Engineer Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Back end", "9 Python jobs in Back end", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/jobs/types/", "title": "Our Job Types | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter Jobs Types Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Categories Data Analyst Developer / Engineer Manager / Executive Other Researcher / Scientist Locations Telecommute Bogota \u2013 Latin America Hove, East Sussex \u2013 United Kingdom London \u2013 UK nagercoil, Kanyakumari District \u2013 India Remote, MG \u2013 Remote remote \u2013 Poland Remote \u2013 Remote Remote \u2013 Latin America Remote \u2013 United States Richmond, BC \u2013 Canada San Jose \u2013 US Tucson \u2013 US Warsaw (fully remote) \u2013 Poland West Winch, Norfolk \u2013 United Kingdom Submit Jobs by Technology! 15 Python jobs in 9 different types. Back end Cloud Database Front end Image Processing Lead Machine Learning Text Processing Web Submit a Job Have a job that our community would be interested in? Please check our job submission how-to for details on how\n    to file a job posting. After you have reviewed our how-to document ,\n    please login\n    and use this form to create a new job posting If you have submitted jobs previously under your login, you can view them by logging in now . In case of questions, please contact the PSF Python Job Board team . Thank you. Stay up-to-date Subscribe via RSS Follow The PSF via Twitter Job Board Sponsors \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Jobs by Technology!", "15 Python jobs in 9 different types.", "Submit a Job", "Stay up-to-date", "Job Board Sponsors"]}
{"url": "https://www.python.org/success-stories/reimagining-data-science-with-python-based-operators-in-einblicks-visual-canvas/", "title": "Reimagining data science with Python-based operators in Einblick\u2019s visual canvas | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Reimagining data science with Python-based operators in Einblick\u2019s visual canvas Written by Becca Weng , Einblick Currently, data scientists are siloed from their teammates and relevant stakeholders. First, data scientists need to gather raw data or work with data engineers through the ETL or ELT pipeline. Then begins the process of cleaning the data and doing exploratory data analysis for the particular task or project at hand. This step can be quite time-consuming as it is iterative in nature. Only then can data scientists begin to build and tune machine learning models. Einblick: collaborative data science at the speed of thought At Einblick , one of our goals is to remove barriers for data scientists so you can spend less time on tedious setup and repetitive tasks, and more time extracting meaningful insights. In pursuit of our goals, Einblick reimagines the modern data science workflow in a collaborative data science canvas, rather than a linear notebook. Working in a canvas environment offers many advantages including live collaboration, an expansive visual interface, and a progressive computation engine. In this article, we\u2019ll highlight one of the key ways we\u2019re saving data scientists time\u2013our operators. We\u2019ll go through a couple of our core operators, why Python is such a crucial part of our software solution, and how we augmented our offerings with a user operator interface. The latter allows users to customize and use their own operators, which can be used in any Einblick canvas, and shared with other Einblick users. Operators in a data science canvas One of the main inefficiencies for data scientists now is that there are certain tasks or code snippets that get run all the time, like data exploration or feature engineering. Even though these tasks can be mundane and repetitive, they are critical to the data science workflow. A core part of our platform are our operators . Einblick operators all capture a defined set of steps in analysis, and don't have to be arranged linearly in the canvas environment. The space then allows users to work according to how their thought process might flow naturally. A few of our core operators include: Python cells have traditionally been the only operator available to data scientists. Write code and reproduce your Jupyter notebook 1:1 in a browser-accessed Python runtime. Chart operators create different visualizations, including scatter plots, histograms, bar charts, line charts, and heat maps Expression operators support Python 3 syntax, take in a dataframe and add a new column based on a logical expression. We currently support many operations, including arithmetic, comparison, and bitwise operators, as well as mathematical functions AutoML operators build more accurate predictive models in much less time than it would take to hand-tune. You just have to select the target and feature columns from a dataframe, as well as the training and testing datasets. Given Python's many libraries and frameworks for data science, statistics, and machine learning, such as statsmodels and sklearn , Python is an easy choice for modern data scientists. As such, Einblick utilizes Python in various parts of our codebase. Additionally, our Python cell operator is critical to our user experience, and connects the experience of working in a Python notebook with working in a data science canvas. We value the flexibility that Python gives to our users to not only augment Einblick's functionality, but also make the data science process more efficient and accessible. Creating shareable user-defined operators As we worked to make the data science process smoother and faster, we created user operators . Through an editor or by linking to a Git repository, our users can create their own Einblick operators, so they can easily and efficiently re-use their own code and processes. Given how important collaboration and communication are to the data science process, operators created by Einblick users are able to be shared easily, so that someone who might know what they want to do, such as convert a text column to a date-time column, can do so without needing to know the Python syntax to do so. For example, our linear regression and k-means clustering operators were both created through our user operator editor. The user operator editor is accessible through our Operators Menu, which can be toggled on and off from the User Settings menu. In celebration of the roots of data science, and as a nod to shared experiences in the data science community, we created an operator to visualize a simple linear regression model. This user operator is an extension of our linear regression operator , which is built-in, and accessible to everyone, that will allow us to create a nicely formatted linear regression graph. To illustrate the operator, we're using the iris dataset, via the seaborn library . Determine operator inputs In the Operator specification tab of our user operator editor, you can specify the following: Basic properties: includes dimensions of the operator in the canvas and description of the operator, which will appear on hover in the left hand panel, and in the canvas when using the operator. Dataframe inputs: allows you to name the dataframes that feed into the operator, accessible in the operator editor as a list dfs . You can index and access the dataframe inputs in the Script tab. Attribute selection inputs: specifies what you can and cannot select from the dataframe inputs, such as the column types allowed or number of selections per field allowed. You can access these using the attributes variable in the Script tab. Custom values: allows you to enter custom values such as text titles of graphs, numbers of bins in a histogram, or any other dynamic field you want to tailor for each time you use the operator Inner inputs: allows you to enter inputs within the operator, instead of on the left hand panel. This is mainly an aesthetic difference in the experience of using the operator in the canvas Make sure to save your work at the bottom of the page! Operator Package Requirements In the Requirements tab, you can list packages that need to be installed for your operator to run. You can think of this tab as a stand-in for a requirements.txt file in a GitHub repository. Operator Script The Script tab is where you can customize exactly what you want your operator to do. You can treat this as a Python script. Just like any Python script, you can start by importing relevant packages listed in your Requirements tab. You can then write your code as you normally would. You can also test out your script on any uploaded data files, while working in the editor. The built-in error messages will help you to debug your code as necessary. For the regression visualization operator, we used Python's matplotlib and seaborn to create and label a scatter plot, as well as a line illustrating the best fit line based on two inputs: a dataframe and the results of our built-in linear regression operator. Since this is a user-defined operator, we can tailor the operator to our specific needs. In this case, we know that the results from the linear regression operator returns a table, with a column for each predictor or X variable, in this case petal_width , and a column for const , which represents the y-intercept of the regression line. For more advanced operators, you can always add more inputs or custom inputs in the Operator specification tab. Once you're satisfied with your code, you can use the Options hamburger menu at the top to publish your operator. As soon as you hit publish, you'll be able to use your operator in any Einblick canvas. You can also share your operator with any stakeholders or collaborators so they can use it as well. Read more about keywords and concepts about our user operators in Einblick's user operator documentation . Why Python: advancing as a data science community The simple linear regression example is a great introduction to the implementation of user operators in Einblick, but some of our users have created more advanced operators, such as an NBA shot chart visualizer, inspired by this blog post . We know how important innovation, flexibility, and efficiency are to the data science and Python community. Our team is excited to see how other users will use our operators to create innovative solutions to data science challenges, and we look forward to fostering our community as we grow as a company. Together, with our users, we will continue leveraging the power of Python to simplify and amplify modern data science. Try out Einblick and our user operators for free, and let us know what you think. We look forward to your feedback! Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Reimagining data science with Python-based operators in Einblick\u2019s visual canvas", "Einblick: collaborative data science at the speed of thought", "Operators in a data science canvas", "Creating shareable user-defined operators", "Determine operator inputs", "Operator Package Requirements", "Operator Script", "Why Python: advancing as a data science community"]}
{"url": "https://www.python.org/success-stories/how-hyperfinity-is-streamlining-its-serverless-architecture-with-snowflakes-snowpark-for-python/", "title": "How HyperFinity Is Streamlining Its Serverless Architecture with Snowflake's Snowpark for Python | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event How HyperFinity Is Streamlining Its Serverless Architecture with Snowflake's Snowpark for Python Written by Jim Gradwell , HyperFinity & Snowflake HyperFinity is a decision science SaaS platform. Through machine learning and AI, embedded analytics, and data visualization, HyperFinity enables nontechnical users to make data-led decisions and create simple outputs to power downstream systems, such as CRM, ERP, or content management systems. This enables organizations to quickly make ML-powered decisions across multiple areas, from smarter supply chain to optimized pricing. Snowflake sits at the core of HyperFinity\u2019s data-intensive platform . In addition to the extensive data type support such as variant data type for semi-structured data, other features such as Snowflake REST API and Zero-Copy Cloning serve as valuable tools in the platform\u2019s serverless architecture. Snowflake\u2019s Secure Data Sharing also streamlines the ELT processes and simplifies the integration of the HyperFinity platform and its outputs with our customers who are already using Snowflake. Challenge: Separate infrastructure for separate programming languages While HyperFinity\u2019s platform is built for nontechnical users to easily apply machine learning and AI at the click of a button, all of the functionality for the data processing that is needed is developed by a data science-focused team, whose primary coding languages are SQL and Python. Snowflake handled all of our SQL development and processing, but in order to construct a serverless compute engine for our Python code, our team had to set up a new set of cloud infrastructure on AWS, which entailed stitching together multiple compute services such as Amazon EC2 and AWS Lambda. This had several downsides such as having to move the data outside of Snowflake\u2019s governance boundary for processing, maintaining additional infrastructure, and writing additional code to handle the data structures changing between services. When we saw Python support for Snowpark announced , we got very excited about the possibilities it would enable for us, and we were very lucky to take part in the private preview. Streamlining our architecture with Snowpark for Python One of the benefits of Python is its rich ecosystem of open source packages and libraries, which we use extensively. For example, a core part of the platform is creating \u201cCustomer Needstates\u201d for groups of products. This uses a technique called hierarchical clustering to create a customer decision tree, which represents the choices an individual makes to arrive at the product they purchase. Computing these Needstates requires matrix and array multiplication, which our team leverages in Snowpark using the Python libraries numpy and scipy. This type of calculation is much simpler to develop and implement in Snowflake through the use of Snowpark . Previous cloud infrastructure for Python processing replaced by simple Snowpark code Because the Snowpark for Python environment comes with 1,000+ pre-installed libraries through Snowflake\u2019s partnership with Anaconda , we could easily move existing functions with minimal effort. Having the most popular libraries available removes another layer of administration from the development process, and with the integrated conda package manager there is no need to worry about dependency management. In case we need a custom library, Snowflake supports the ability to upload and import custom Python code . We\u2019re also able to blend SQL and Python logic together in a way that would previously have involved sending data back and forth between multiple tools, and our team has also been able to gain increased performance through parallelizing our processing. Using this blend of SQL and Python we can run logic written in Python on multiple rows of SQL concurrently, turning what was previously a looping operation into a parallel process. For example, running our clustering solutions at five different depths takes the same time as running at one depth. \u201cSnowpark enables us to accelerate development while reducing costs associated with data movement and running separate environments for SQL and Python.\u201d Running a Python function as part of a SQL statement in Snowflake, including parallel processing Moving our Python processes to Snowpark has removed unnecessary complexity from our architecture and simplified our development by removing all the extra code that handled data structures changing between services. Now our team can develop, test, and deploy their Python code within the same environment the data is stored, leveraging the power of the Snowflake platform, and in their preferred development language. HyperFinity is software designed to make decision-making simple, using powerful data science and advanced analytics techniques. Snowflake, and now Snowpark , are major pieces of HyperFinity\u2019s architecture, and we\u2019re very pleased with the performance and stability that Snowflake brings to the software as well as the new features being released by Snowflake to make working with it even more powerful. As a startup, building our application on top of Snowflake has simplified our infrastructure and development process, and accelerated the software\u2019s path to market. Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["How HyperFinity Is Streamlining Its Serverless Architecture with Snowflake's Snowpark for Python"]}
{"url": "https://www.python.org/success-stories/python-is-rackspaces-core-technology/", "title": "Python is Rackspace's CORE Technology | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python is Rackspace's CORE Technology Written by Nick Borko , Rackspace Introduction To be the industry leader in Managed Hosting, you have to be fast and\nflexible. By using Python to implement our enterprise data systems, Rackspace can quickly and effectively change its internal systems to\nkeep up with shifts in the industry and in our own business processes.\nWe do this through a central customer information system called \"CORE,\"\nwhich is used both for Customer Relationship Management (CRM) and\nEnterprise Resource Planning (ERP). Python and CORE are key factors\nthat enable Rackspace to provide our Fanatical Support(tm) and faster\ncustomer service. Background Rackspace's central customer database started as a simple ERP system to\nprovision and track managed servers. It began humbly, as a small\ncollection of PHP pages that did the job nicely for the few hundred\nservers that was the beginning of Rackspace's customer base. As Rackspace grew, that small PHP system became the center of business\nat Rackspace. Every time an opportunity to automate a process presented\nitself, it was rolled into that system. After a couple of years, the result was a big, un-maintainable mess of\nthousands of PHP pages and modules that had been written and maintained\nprimarily by one person. The limits of PHP (then version 3) had been\nstretched thin, the system was too much for one person to maintain,\nand it was difficult to bring in new people to help with it. Rackspace Managed Hosting provides customized servers in state-of-the-art\ndata centers Zoom in Our first attempt to update the system came when PHP version 4 was\nreleased. This release promised better object oriented capabilities,\nand the time was right for Rackspace to dedicate more people to the\nproject. The system was totally redesigned from the ground up, including new\ndatabase schemas and application design strategies. At this time we\nre-dubbed the project \"CORE,\" an acronym for Core Objects Reused\nEverywhere, in order to reflect the overall design goal for CORE:\nmodularity and reusability across all systems in the company. With that\ngoal in mind, our team went to work using the object oriented features\nof PHP. While we were able to re-fit the application and add increased\nfunctionality, the project ultimately failed due in large part to the\nproblems encountered while using the object framework provided by PHP. Memory leaks, inconsistent interfaces, inconsistent internal data model,\nrandomly freed objects, multiple object copies despite explicit use of\nreferences, internal PHP errors, and untraceable code failures all but\nmade the task impossible to accomplish in PHP. Even after we achieved a relatively stable code base, we were nowhere\nnear our goal of Core Objects Reused Everywhere because we had to\ndepart from pure object-oriented methods just to work around the\nproblems inherent in PHP. It became clear that PHP was unsuitable for\nour large scale, mission critical projects. A new solution had to be\nfound. Python in CORE We had always considered Python to be an excellent candidate for\nimplementing our enterprise system, but it was initially passed over in\nfavor of building upon the existing (vast) code base we already had in\nPHP. At that time, we felt that PHP could be used successfully in CORE\nby introducing a better structured system design. Unfortunately, that wasn't enough to overcome our other problems with\nPHP, so we re-evaluated our situation. The first alpha version of Python\n2.2 had recently been released, and we decided to begin work on a new\nCORE framework using the new features that were available in that\nversion. The Power of Introspection One of the first tasks in writing the new framework was to build\nits database interface. Python's introspection model had been significantly enhanced with the\nrelease of Python 2.2. We decided to use it to build a generic database\ninterface class based on a DBI 2.0 compliant database connector. In this\napproach, rather than writing queries or table-specific wrappers by\nhand, a meta-class abstracts all database queries into a single clean\nAPI. We create descendents of this meta-class to make an API for each table.\nEach table's class contains a few class constants that describe the\ncolumns in the database. This way we can add new tables to the overall API\nquickly and simply without having to worry about implementation\ndetails for any specific table. The API also uses meta-data to automatically validate and convert values\npassed to the database. This is done by a \"normalizer\" function that\nconverts the Python data types being passed through the API into valid SQL\nvalues.  The function also verifies types and formats that are not\nnecessarily checked by the database or by Python, such as phone numbers\nand ZIP codes. Reusing Objects Everywhere Once the database API was complete, we created a second layer of classes\non top of it. This higher level API implements the business logic for\nspecific applications, such as contact management or trouble ticket\nhandling.  It also prevents users from performing operations that are\ninconsistent with Rackspace's business practices, or assigning data that\nwould result in other types of high-level corruption of the data in the\ndatabase. With the creation of this second layer, we achieved our original goal\nof Core Objects Reused Everywhere. Programmers throughout the company\nbegan to use this API to implement interfaces to application\nfunctionality. This required little interaction with our API\ndevelopment team, and it could be done without fear of misusing the API. While we designed the API primarily for CORE, the central enterprise\napplication, it is reused in a number of other systems at Rackspace. For\nexample, one group built a SOAP server on top of the API, in order to\naccess it from their PHP applications. Other applications use the API\ndirectly, and it has been extremely gratifying to see our work reused\nand integrated so easily with other systems. Integrating Python with Apache With the API in place, our next task in developing CORE was to find a\nuseful templating module to integrate our Python code with HTML pages\nrunning on the Apache web server. After looking at a number of available Python-based templating modules,\nwe opted to create a simple parser of our own. Our approach was to convert\nserver-side template pages into Python servlets whose output is sent by\nthe HTTP server to the user's browser. Although this was a fairly simple exercise, we did run into some\nproblems stemming from our design of the CORE database meta-class. We\nfound that altering classes and modules at runtime, as is done by the\nmeta-class, violates guidelines imposed by Python's optional restricted\nexecution environment. Since we felt that restricted execution was a\nnecessary component in supporting a persistent web module, we opted to\ndeploy CORE using CGIs rather than mod_python or similar persistent\nsolutions. Since fast hardware and multiple servers are readily available, and\nsince and our template parser pre-compiles and caches the Python servlet\ncode that it produces, the CGI solution is sufficient for our needs.  It\nalso allows us to resolve issues such as database connection pooling and\nrestricting the execution environment outside of Python. Unit Testing Thanks to the unit testing module that comes with Python, our projects\nare reaching production with far fewer bugs than we had ever thought\npossible when we were using PHP. During maintenance with PHP, there was\nalways a question of whether a change in one place would break something\nelse in another part of the application. We now write unit tests for each and every API as the API is being\ndesigned. This means that we can verify the changes in one module as\nwell as its effects on all the others simply by running the unit tests\nfor the entire API. Since introducing Python and unit testing, the nature of the bugs that\nwe see in deployed applications has shifted to include primarily those\nin the user interface, such as layout problems or faulty event handling. These days, very few bugs come from the API itself, and even those are\ngenerally the result of poor revision management or DBA coordination\nduring application deployment. Python can't solve _all_ problems during\ndevelopment, but it certainly has reduced the number of critical system\ndefects for us. Documentation Lack of documentation has been a major problem with our previous\ndevelopment efforts. We tried several tools and policies to document our\nPHP efforts, but in the end these failed. Code changed too quickly, and\nthe code-level documentation tools available for PHP at the time were\ntoo finicky to justify the amount of effort required to get the\ndocumentation to parse correctly. Additionally, despite careful planning\nand coding strategies, the mixture of PHP and HTML made deciphering and\nunderstanding the code more difficult. Fortunately, Python was designed with documentation in mind, with the\nuse of \"doc strings\" for modules, classes and methods. Since\ndocumentation is actually a part of the language itself, and pydoc is a\nstandard module in the Python distribution, it was easy to extract API\ndocumentation to HTML and other formats. Over time, we have found that the syntactic structure of Python makes\nfor extremely readable code, and that in itself helps in the overall\ntask of documenting and maintaining code. Conclusion Python has dramatically improved development processes for the CORE\nproject, and it has led to the faster development times and more rapid\nreleases that allow us to keep up with Rackspace's ever-changing\nbusiness processes. Python enabled us to create a sophisticated dynamic data model that is\nflexible and easy to use for abstracting database operations. With it,\nwe realized our goal of Core Objects Reused Everywhere. Python's integrated unit testing and documentation tools greatly\nenhance our ability to deploy and maintain a more stable, error-free\nproduct. The result is a successful enterprise application that is instrumental\nin the delivery of Rackspace Managed Hosting's promise of Fanatical\nSupport, Unmatched Speed, and Unlimited Flexibility in the managed\nhosting industry. About the Author Nick Borko is the Director of Internal Application Development and the\nproject manager for Rackspace's enterprise database application, CORE.\nRackspace Managed Hosting is the leader in delivering managed hosting\nservices to small and medium enterprises. All customer platforms\ninclude state-of-the-art data centers, customized servers, burstable\nconnectivity, 99.999% uptime SLA, a dedicated account manager, instant\nemergency response and access to live expert technicians 24x7 for\nsupport of all hardware and core software. Founded in 1998 and\nheadquartered in San Antonio, Texas, Rackspace manages servers for\ncustomers in more than 80 countries. Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python is Rackspace's CORE Technology", "Introduction", "Background", "Python in CORE", "The Power of Introspection", "Reusing Objects Everywhere", "Integrating Python with Apache", "Unit Testing", "Documentation", "Conclusion", "About the Author"]}
{"url": "https://www.python.org/success-stories/python-powers-journyx-timesheet/", "title": "Python Powers Journyx Timesheet | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python Powers Journyx Timesheet Written by Curt Finch and John Maddalozzo , Journyx Introduction Journyx Timesheet (tm) is a commercial application that provides time,\nexpense, and project tracking.  In 1996, Curt Finch, Journyx CEO and\nfounder, was working in the staffing industry when he saw an\nopportunity to use the web to accurately collect and store employee\ntimesheet information. Journyx Time Entry Screen Zoom in The first version of Timesheet focused on collecting accurate cost\ninformation, with an eye towards applying that data in the formulation\nof new project cost projections. Since then, Timesheet has expanded\nconsiderably to facilitate tracking of time, mileage, and expenses, not\njust for project management but also for billing and payroll purposes.\nOptional modules are available for paper-less expense reporting,\nadvanced user role management, automated billing and payroll, and to\nfacilitate system access for disconnected traveling users. Today, Timesheet is platform-independent, flexible enough to be\nreconfigured by customers to fit unique organizational needs, and\nscales to tens of thousands of users for the large enterprise. Python From the Start Journyx Timesheet has been using Python from the beginning. Curt Finch\nchose Python initially on the recommendation of a friend, Steve Madere,\nwho had founded Dejanews.com (now a part of Google). Describing the\nrationale for his choice, Curt said \"I looked at Java and C and came to\nthe conclusion that 1 line of Python is 10 lines of Java or 100 lines\nof C. Developers write code at basically a constant rate so I chose\nPython which was (and is) the highest level language I've ever seen\nthat is also flexible enough to be generally useful.\" Architecture From the beginning, Timesheet was designed and implemented as a web\napplication. It uses a three-tiered web application architecture with\nseparate layers for web presentation, business logic, and data storage.\nAs time has progressed, the application's functionality has advanced\nconsiderably, and Curt's decision to use Python for an implementation\nlanguage has proven to be good choice. Python is currently used for all application logic in the Timesheet\napplication. This includes all code between the initial Apache\ndispatch, where mod_python is employed to expedite interpreter\ninstantiation, though the application logic, and down to the point of\ncall out to the database transport layer. Timesheet uses not only the Python standard library but also several\nindependently developed open source Python subsystems, such as PyXML\nand ActZero's SOAP support. PyXML is used to implement certain business\nrules and to develop jxAPI, which is a SOAP-based API into the\napplication logic. Work is in progress to extend this API to define Web\nServices Description Language templates for the jxAPI functions. The\napplication currently builds and ships with Python 2.1.1. Timesheet also incorporates several non-Python technologies. The Unix\nand Linux distributions are packaged with the Apache HTTP server and\nPostgreSQL database. The Timesheet distribution for Windows ships with\nan optional Microsoft Desktop Engine (MSDE) database and integrates\nwith Microsoft IIS. Timesheet can be configured to use a variety of\nthird-party databases. Results The Timesheet project has succeeded spectacularly, generating millions\nin revenue and allowing Journyx to grow every year, even under the\ncurrent economic conditions. Journyx, like many of our customers, uses Timesheet internally as a\nmission critical part of the company infrastructure. It is used\nextensively for project tracking, billing, and payroll. To date, approximately 11 person-years have gone into the Journyx\nTimesheet product, resulting in over one hundred fifty thousand lines\nof Python code. In developing Journyx, the two greatest benefits of Python were the\nspeed with which features could be written and deployed, and its true\nwrite-once-run-anywhere cross-platform capabilities. Journyx developers have found that the simplicity and clarity of Python\ncombine with its object-oriented properties to make it a very powerful\nand productive language.  Python's rich standard library, which includes\nmodules for things like string manipulation and HTML generation,\nfurther supports programmers in meeting aggressive development\nschedules. Because of these properties of the language, Python has enabled Journyx\nto add features more quickly than our competitors. We've been able to\nimplement SOAP/XML and WSDL support and extended other aspects of\nthe application's functionality well ahead of competitive products. One of\nthe key enablers of this efficiency in maintenance and improvement is\nthe inherent clarity and readability of the Python language. Other\nimportant factors are the vibrant and responsive Python development\ncommunity, and the high degree of backwards compatibility and stability\nwe have seen as the language design evolves over time. Python's cross-platform standard library and platform-independent byte\ncode file format allow the deployment of Python modules to any\nplatform, regardless of which platform the module was prepared on. This\nhelped not only in avoiding per-platform development overhead but also\nfacilitates customer support for the Timesheet software product. For\nexample, a patch module built on a Redhat 6.2 system can be sent to a\ncustomer for installation on Windows XP or any other operation system\nwithout the need for cross-compilation or translation of any kind. Conclusion Python made it possible for Journyx to produce a flexible, feature-rich\nproduct for multiple platforms in less time than would have been\npossible using another language. Python has been an important\ncompetitive advantage for us, and even as our Python code base grows in\ncomplexity and maturity, the natural advantages of Python enable us to\nprovide a high quality mission critical application at a competitively\nlow cost. About the Authors Curt Finch, Journyx founder and CEO, started the company in 1996 after\na successful career in the consulting industry participating in and\nmanaging engagements with Fortune 100 companies such as Tivoli, IBM,\nand Prudential Securities. John Maddalozzo, Journyx V.P. of Engineering, joined Journyx in 1999\nafter a twelve year career in Unix kernel development at IBM's AIX\nEngineering group. Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python Powers Journyx Timesheet", "Introduction", "Python From the Start", "Architecture", "Results", "Conclusion", "About the Authors"]}
{"url": "https://www.python.org/success-stories/python-on-guard/", "title": "Python On Guard | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python On Guard Written by Ivan Lehecka , VAHNZ Introduction Internet connectivity is omnipresent, finding new applications and giving old\ndesigns a new lease on life. In this age of small IC devices boasting TCP/IP\nstacks and wireless connectivity, one no longer needs a standalone PC to\nharness the Web. VAHNZ Controls developed its eBukal remote alarm device to leverage their\nknowledge of microcontroller interfacing and Internet protocols, creating an\ninnovative solution for the field of building automation. Remote Event Dial-up Internet Notification The idea grew out of one client's need to monitor the temperature of an office\nbuilding's air conditioning during one long hot summer in Portland. The office\nproperty manager wanted to be alerted before the temperature in offices became\nunbearable and the tenants complained. The application is not limited to only\ndetecting temperature changes, but has been used with a variety of input\ndevices such as proximity switches and flood sensors. Version one of the design used DTMF tones to leave the numeric message on the\noffice manager's phone. Besides the crudeness of deciphering the meaning of\nthe digits, the calling device also had to negotiate the timing pitfalls in\nthe recipient's voicemail system to select the one option for leaving the\ndigital feedback. The resulting system was neither robust nor pretty. Text messaging seemed to be the right way to go, because messages are easily\nreceived by any mobile phone. Most wireless providers maintain email to SMS\ngateways, and many off-the-shelf devices can generate email messages. I was\nonly limited by the necessity of dial-up connectivity -- many locations\ncontaining monitored equipment proved impervious to wireless signals. After coming up with the basic idea to use text messages and selecting the\ncomponents, I had to figure out how to make the individual parts work\ntogether. Email messages coming from the eBukal device had to be parsed on the server\nto determine the recipient(s) to be notified and the online logbook that\nshould receive the entry. New devices had to be added to the configuration\nfile. Parameters such as the threshold, phone number to dial, and so forth,\nhad to be sent to eBukal via serial port. A graphical user interface (GUI)\nhad to be written to enable personnel in the field to set the device. How eBukal is used to monitor water conditions in a basement Zoom in I knew how to write command line scripts and PHP to do the server coding and\nused Perl for CGIs and Visual Basic for the GUI, but I wanted to do it\nbetter this time. I wanted to do it right. Python - one stop shopping development plus platform independence I used Python before and it seemed to have the potential to do all the\nrequired coding and was a programming language that I enjoyed using. I was not\nentirely confident about some parts of the task, especially building a\ngraphical user interface, but decided to face my fears, trusting to Python's\nmaturity, powerful libraries, and third-party support.  The SPE editor together\nwith Python's interpreted nature proved especially valuable. Screen shot of the eBukal messaging configuration user interface, based on\nwxPython After some trial and error I settled on the final concept using the\nfollowing standard library and third party modules: email, time, and ConfigParser -- for email parsing, phone message generation\nand log book entry on the server side cgi and sha -- for a CGI module to edit the server configuration file wxPython and wx.xrc -- for the GUI written in XRCed serial, pickle, ConfigParser, and time -- for the serial-communication library\nfor eBukal setpoint download Unfortunately there is no PIC compiler using Python syntax; if such a tool\nexisted, the circle would have been completed.  As a result, the microcontroller\ncode is written in PicBasic Pro, a popular commercial product from MicroEngineering\nLabs, Inc . Screen shot of the online log of events from eBukal, with alerts in red\nand informational messages for daily diagnostics Zoom in The gamble paid off. The system works well and many bells and whistles\ncould be added:  A server logging feature, daily diagnostics, and online\nconfiguration. Python delivered more than I was asking, and some features were\nadded based on availability of the functionality in the library modules being\nused. Summary This may not yet be VAHNZ Controls' killer application, but I feel that the\nselection of the Python programming language is a move in the right direction.\nTechnology is always evolving and no one knows what comes next, but I am\nconfident that Python will be there ready for the challenge. Platform\nindependence is another aspect to feel good about -- betting all the\nchips on one player might be riskier than ever in today's climate. For more information, visit VAHNZ Controls on-line at eBukal.vahnzcontrols.com or contact info at vahnzcontrols.com . About the Author Ivan Lehecka is founder of VAHNZ Controls, a company that strives to bring\nintelligence to building automation and other fields, where suitable. eBukal is a trademark of VAHNZ Controls. Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python On Guard", "Introduction", "Remote Event Dial-up Internet Notification", "Python - one stop shopping development plus platform independence", "Summary", "About the Author"]}
{"url": "https://www.python.org/success-stories/carmanah-lights-the-way-with-python/", "title": "Carmanah Lights the Way with Python | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Carmanah Lights the Way with Python Written by George Belotsky and Thomas Major , Carmanah Introduction This is a story about how Python's elegant design can make the\nlanguage useful in an unexpected way. Carmanah Technologies Inc. ( http://www.carmanah.com/ ) was conceived\nin the middle of the Pacific Ocean.  The founder, David Green, was\nsailing his boat from Fiji, bound for Victoria, British Columbia.  He\nwas running low on battery power for his navigation lights, and had an\ninsight. The eventual result of that mid-ocean idea was the world's first\nself-contained, fully autonomous marine navigation light.  During the\nday, each device uses solar power to recharge its integrated\nbatteries.  The light then operates from the stored charge at night.\nIn place of conventional bulbs, Carmanah's systems use long lasting,\nhigh-efficiency LEDs. The overall result is an exceptionally rugged\ndevice, sealed against the elements and requiring no maintenance. On occasion, lost Carmanah lights have drifted for thousands of miles\nupon the ocean currents, only to be recovered later -- in full working\norder.  This sort of reliability has made them famous amongst waterway\nauthorities, sailors and the coast guards of various countries. The technology born of the harsh marine environment has proven useful in many\nother areas, and today Carmanah is the world leader in solar-powered LED\nlighting. The company manufactures a whole line of such lights for a variety\nof different uses, including transit, roadway, railway, industrial markers and\nairfield illumination as well as the original marine application. The lights\nare sold all over the world, and must often with stand extreme conditions (the\nopen ocean, desert climates, the far north, urban vandals, etc.). Carmanah's\nlights have even been the subject of a documentary on national television. Closeup of a Carmanah crosswalk traffic beacon, a recent product in\nwhich Python has played a significant role.  The enclosure at the top\nof the pole is oriented towards the sun, to better expose the solar\npanels that it carries on the front. The antenna for the wireless link\nto a similar unit on the other side of the street is visible at the\nleft side of the enclosure. Zoom in Electric lighting has become so commonplace, it seems like a simple\nidea.  An autonomous, self-contained light, however, turns out to be a\ncomplicated thing indeed.  The amount of usable solar radiation varies\nwith the weather, the seasons, one's position on the earth, and the\norientation of the solar panel.  The battery state of charge must be\ncarefully managed to ensure long life and correct operation.\nAvailable power has to be monitored, and possibly rationed through the\nnight. Depending on the application, the light may also have to be\nprogrammable to emit internationally recognized flash codes, react to\nuser input, etc.  In even more complex situations, wireless networking\nis required to allow the lights to communicate with each other, or\nwith a central base station. A great deal of mechanical, electrical, electronic and optical design\nis required to create these lights.  As is typical of modern complex\ndevices, an embedded software program running on a microcontroller\noperates each unit, making it come to life.  Like a miniature version\nof the Monolith from 2001: A Space Odyssey , each light maintains\nitself, ready to perform its function whenever the need arises. The Future of Practical Computing Current practical computer applications are dominated by the PC.  Yet,\njust like the mainframe before it, the PC will lose its central place\nin the use and deployment of computer technology.  Embedded systems --\ncomputers that are part of other devices -- will be the most prevalent\nin the future. The mainframe is far from being obsolete today, and the PC will\nlikewise remain important.  Most computers, however, will be\nincorporated into something else, rather than standing alone.  This\nprocess has already begun.  Automobiles employ multiple embedded\nsystems, some of which communicate with each other.  Embedded systems\nalso operate many household appliances.  Such systems are likewise\nvery important in industry, where they form a crucial element of many\ninstruments and tools. The catalyst for the future expansion of embedded systems is the rapid\nadvance of network technology.  As the hardware becomes less\nexpensive, smaller, faster and more efficient in the use of electrical\npower, networks of embedded devices will proliferate and grow.  Such\ndevices -- in collaboration with one another -- will control homes,\noffices and industrial facilities.  Preparations for this new world of\ncomputing are underway now, as evidenced by the Cambridge-MIT\nInstitute's Pervasive Computing initiative (see http://oxygen.lcs.mit.edu/ ).\nThe initiative has also been covered in a BBC story (see http://news.bbc.co.uk/1/hi/technology/3583479.stm ). The emergence of Pervasive Computing will make it necessary for each\nsystem to be very low maintenance.  When every user requires hundreds\nof devices, it is simply not feasible to service them all on a regular\nbasis.  Of course, fully self-contained systems that manage their own\npower would be ideal, because changing batteries or attaching wires is\na serious challenge if it needs to be done on a large scale.  Thus,\nthe miniature Monolith becomes a swarm. The Importance of Python Large scale deployment of embedded systems demands inexpensive\ncomponents.  Considerations such as small size, high reliability and\nlow power consumption are also very important.  Specialized processor\nchips, called microcontrollers, have been developed to meet these\ngoals.  Combining CPU, memory and peripherals (such as UARTs) on a\nsingle chip, modern microcontrollers are marvelous devices.  These\nfeatures, however, come at a significant price.  A typical\nmicrocontroller has only a few hundred bytes of RAM, several K of ROM\n(to store the program) and orders of magnitude less processing\ncapability than a conventional desktop microprocessor.  Hardly an\nenvironment for running Python! There are projects to adapt Python for embedded applications, but they\nrequire significant resources on the microcontroller, and are still in\nthe very early stages.  Surprisingly, however, it turns out that\nstandard Python is of tremendous value throughout an embedded system's\nlifecycle.  This is because the highly resource-constrained nature of\nembedded devices make them dependent on standard PCs for many tasks --\nboth during development and during deployment. For example, embedded software is compiled on conventional desktop\nsystems, and the resulting object code is then loaded onto the target\nmicrocontroller.  Another example is troubleshooting a device in the\nfield, which usually requires additional hardware to run a diagnostic\nutility.  Ordinary laptops are a very attractive platform for this\napplication, due to their ready availability and relatively high level\nof standardization. Thus, a major part of any embedded software development effort is\nwriting the required support code, to run on a standard PC.  There are\nquite a few languages available for this task, but the advantages of\nPython are many.  Python is quite easily learned by people from\nvarious programming backgrounds, such as Java, C or Visual Basic.\nAfter becoming familiar with Python, development proceeds very quickly\n-- perhaps faster than with any other language.  At the same time,\nPython lends itself to the creation of highly readable, compact and\nwell structured code. Python's particular mix of features also helps embedded developers be\nmore effective when programming a PC.  While these developers are well\nfamiliar with C (by far the most popular high level language for\nembedded systems) a C program written for a standard desktop or server\nis quite different in style from one for a microcontroller. The compactness of Python programs is especially important, because\nembedded developers have, by necessity, learned to express their\ndesigns in a very small amount of code.  Python's automated memory\nmanagement also helps, because many embedded developers have little\nexperience with dynamic memory allocation -- a technique that is not\npractical in most embedded environments.  In addition, the\nObject-Oriented facilities of Python are simple, powerful yet not\ncoercive.  This allows embedded developers (who are often less\nfamiliar with OOP) to gradually adopt the Object-Oriented paradigm in\ntheir work. As embedded systems grow in complexity, the advantage of using Python to\naugment traditional techniques becomes more and more important. At Carmanah,\nPython adoption (which began with the crosswalk traffic beacon, a\nsophisticated device that includes wireless networking) has spread to several\nkey areas of the embedded system's lifecycle. A Python program controls the software build process, allowing firmware for\ndifferent products to be put together from a large number of shared\ncomponents. The build system is simple yet a lot more flexible than makefiles,\nas well as easier to customize, configure and extend. Unlike the build tools\nsupplied by compiler vendors, the Python-based build system can work with\ndifferent compilers. Python is also used for stress tests and unit testing -- an aspect of\ndevelopment particularly vital in embedded systems, due to the\ninherent difficulty of upgrading devices once they are in the field.\nAdditional uses of Python, such as for control panels and code\ngeneration, are being considered as well. One very exciting application of Python at Carmanah is in the role of\na device simulator.  A simulator can act as a node in an embedded\nnetwork, while displaying the internal system state via animated\nimages on the screen.  Simulators are very valuable during the early\nstages of an embedded project, when little actual hardware is\navailable.  By taking the place of missing devices, simulators can\nallow software development to continue even before the hardware design\nis completed. Here is an illustration of the usefulness of Python in embedded\ndevelopment.  A prototype of Carmanah's crosswalk traffic beacon\ninteracts with a Python-based simulator running on an ordinary PC.\nThe simulator effectively completes the system, because two traffic\nbeacons (one for each side of the street) are required in a crosswalk\ninstallation.  In addition to significantly accelerating development,\na Python-based simulator can easily animate drawings, as shown.  This\nallows meaningful demonstrations of the system much earlier than would\notherwise have been possible. Zoom in At Carmanah, Python has been used not only by experienced engineers,\nbut by student interns as well.  Even interns with little prior\nprogramming experience can accomplish quite a lot with Python, while\nrequiring less supervision than other languages demand. Conclusion The exciting work of creating self-contained, autonomous devices\ncontinues at Carmanah.  As the swarm of micro-Monoliths becomes reality,\nthe importance (and complexity) of the embedded software grows.  By\nmaking such software much easier to develop, test, control and deploy,\nPython is really lighting the way to the future of computing. About the Authors George Belotsky is a software architect who has done extensive work on\nhigh performance Internet servers as well as hard real time and\nembedded systems. His technology interests include C++, Python and\nLinux.  George Belotsky has written a number of articles (see http://www.oreillynet.com/pub/au/1204 ) including a series on Python\nand Network I/O.  He is also the author of the Flightdeck-UI open\nsource project ( http://openlight.com/fdui/ ).  You can reach him by\nemail at questions at openlight.com. Thomas Major is the Product Development Manager at Carmanah, an electrical\nengineer by schooling with broad product design experience acquired at\nVisteon and Philips Electronics.  His interest started in analog circuit\ndesign, later embracing digital, software, and embedded design. Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Carmanah Lights the Way with Python", "Introduction", "The Future of Practical Computing", "The Importance of Python", "Conclusion", "About the Authors"]}
{"url": "https://www.python.org/success-stories/python-to-control-cddvd-packaging-hardware/", "title": "Python to Control CD/DVD Packaging Hardware | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Python to Control CD/DVD Packaging Hardware Written by Jau-Ann Chen , Acqutek Introduction This story is about applying Python in the automated CD/DVD disc packaging\nindustry. In the wholesale market, CD/DVD discs are sold in units of 10, 20 or\n50 in one shrink-wrapped bulk package. Counting out stacks of discs for these\npackages is labor-intensive and requires several steps to accomplish: picking up an estimated number of discs from a large stack, verifying the correctness of the number of discs using a disc counter, adding or removing discs to meet the required number, and sending the disks to a packaging machine To make the packaging process cost effective, an automatic CD/DVD disc\npartitioner is used to carry out the above steps. Acqutek Corporation was contracted by Micro Image Precision Co. Ltd to\ndevelop the control software for this partitioner machine. The project was time\ncritical, with less than 4 months available to complete the work.  Furthermore,\nno hard specification was available at first, and the requirements changed from\ntime to time with the concurrently evolving mechanical design of the partitioner. To satisfy the customer's needs and manage the dynamic requirements of the\nproject, we needed a quick and flexible way to develop the software for the\nsystem. After surveying the available technologies, we settled on Python. The\ninteractive nature of this object oriented language, its suitability for rapid\nprototyping, and its extensive standard libraries made it ideal for a project\nwith rapidly changing requirements. Hardware of the CD/DVD Disc Partitioner The CD/DVD disc partitioner, designed by Micro Image Precision Co, is composed\nof six disc counting and picking machines. Each of these can pick up a fixed\nnumber of disks from an input spindle, move the disks forward, and release\nthem on an empty spindle. The six spindles are moved among the disc counters\non a conveyor that brings them to the point where they are fed to the\npackaging machine. The components of the CD/DVD disc partitioner where green disks represent\nthe air cylinders that are used to hold spindles stationary while the\nconveyor moves continuously beneath them Zoom in The front of the CD/DVD disc partitioner Zoom in The side of the CD/DVD disc partitioner.  The touch screen control panel\nis in the upper left corner Zoom in The main computer communicates with the six CD/DVD disc partitioners through\nRS-485 connections and controls the air cylinders on the conveyor through\ndigital I/O buses. Control Software Architecture The controller software is divided into five major components: The central\ncontrol logic, the error handler, the digital I/O interface, the RS-485\nserial communicator, and the graphical user interface (GUI). The control logic component is in charge of controlling, coordinating, and\nmonitoring the production processes. Depending on events from the GUI and\nsignals from other parts of machine, it sends a sequence of commands to the\ncounting and picking machines and the air cylinders on the conveyor. The digital I/O interface provides various methods for the control logic to\naccess the status of sensors, and control the up and down movement of the air\ncylinders on the conveyor. The RS-485 serial communicator provides methods for sending commands to and\nreceiving responses from the disc partitioner. The GUI component provides user interfaces for operators to set, test, debug,\nstart, pause, and stop the machine. Main Entry Menu. This is the first menu shown on the screen of the touch panel after\nthe system boots up. Zoom in Setup Operation Mode Menu. Operators can use this control panel to set up the\nnumber of discs to select for each package. Zoom in Operation Menu. Operators can use this panel to initialize, run, pause,\nreset, and clear the conveyor. The panel also display any warnings or error messages\nsent from other parts of machine. Zoom in Engineer Mode. Engineers can use this panel to get the status of each\nsensor, to control air cylinders and the conveyor motor, and send commands to a\ncounting and picking machine for maintenance or problem-solving purposes. Zoom in Implementation Python's threading module proved to be a very important tool in handling\nconcurrent processes in the control logic. Threads are used to simultaneously\nmonitor the production process, watch events from the GUI, and detect\nerror messages coming in from other parts of the machine. The digital I/O interface and RS-485 serial communicator were libraries written\nin C. SWIG was used to quickly make these callable from Python code. The GUI components of the CD/DVD partitioner were built using Tkinter ,\nwhich provides a simple but very reliable GUI development toolkit. cx_Freeze was used to package up the Python control software into an\nexecutable. At the hardware level, a JUKI-740E (K6 400MHz CPU and 64M RAM) CPU card is\nused for the main computer. The OS is Linux kernel 2.4.18 and the system\nsoftware includes BusyBox , minimized X11 window server, touch panel\ndaemon, and network driver. All of these fit onto a 64MB flash memory stick. While it is possible to reduce\nthe root file system size further, it was not necessary for this project. Simulator A simulator was developed in the early stages of the project, before the\nactual machine was available. This provided the developer with a graphical\nanimation of the movement of the spindles, air cylinders, and the status of\nthe sensors. The simulator allowed the software developer to start building the control\nsoftware before the hardware design and assembly were complete. It also acts\nas a convenient way to debug and stress test the control software. ML500 simulator. A red disk represents a spindle with discs loaded.\nA green disk represents an empty spindle waiting to be loaded.\nA small blue vertical bar represents an air cylinder and a small red\nsquare represents a sensor used to detect position of the spindles.\nThe black and green squares represent the signals; black means the signal\nis off and green means the signal is on. Zoom in The graphical animation displayed by the simulator was built with the pygame module. The simulator proved to be very realistic; code running on\non it can be uploaded to the main computer with very little modification. Only\nthe simulated I/O module is replaced by the real I/O module. Conclusion The control software of the CD/DVD disc partitioner took one developer about 4\nmonths to complete. The software development process was almost parallel with\nthe hardware development process. At the end of the project, the control\nsoftware passed all field tests and is running smoothly in production. The project was developed almost 100% in Python.  This shows that Python is\nnot just a toy.  It is a powerful weapon for solving real problems. There was one concern raised in the beginning of the project:  Would Python be\nfast enough to deal with the real-time demand of the production process? In\nthe CD/DVD partitioner, Python and Linux work perfectly as long as the fastest\nrequired response time is greater than 1 millisecond. For faster applications,\na real time OS may be required to provide sufficiently fast and precise\nresponse times. About the Authors Jau-Ann Chen is a Linux consultant and system analyst for the automation\nindustry. He specializes in simulation, embedded Linux, and digital image\nprocessing applications. Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["Python to Control CD/DVD Packaging Hardware", "Introduction", "Hardware of the CD/DVD Disc Partitioner", "Control Software Architecture", "Implementation", "Simulator", "Conclusion", "About the Authors"]}
{"url": "https://www.python.org/success-stories/xist-an-xml-transformation-engine/", "title": "XIST:  An XML Transformation Engine | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event XIST:  An XML Transformation Engine Written by Dr. Walter D\u00f6rwald and Dr. Alois Kastner-Maresch , Living-Logic AG Summary XIST is a XML transformation engine written completely in Python at\nLivingLogic AG, a software development company specializing in web technology.\nXIST was designed to facilitate the task of creating and maintaining large web\nsites. Background Soon after we began creating web pages in 1994, it became clear that\ntyping HTML files by hand is tedious and cumbersome, and we began to\nsearch for tools to simplify the repetitive task of HTML generation. Early on, we discovered and started to use an HTML preprocessor named hsc .\nThis tool supported generation of pages from templates by defining new markup\ntags and controlling how these tags would be transformed into HTML, somewhat\nlike XML/XSL does now. Unfortunately hsc had certain limitations: It didn't support local\nvariables, and there were no control structures except conditionals.\nEven arithmetic was not possible. Our first web sites developed with this\nsystem consisted of a mix of hsc macros and Perl scripts that generated\nhsc source files. In 1998, hsc's author halted further development, and we became quite\nmotivated to find an alternative. At first we decided to continue\ndevelopment of hsc ourselves, and planned to make it compatible with\nXML, which was beginning to become popular at the time. But extending\nhsc, which is written in C, proved quite difficult. For example, adding\nUnicode support required rewriting the entire I/O system. It became\nclear that we needed to find another toolset for our web development. XIST is Born Around this time we discovered Python and decided that it might be a\ngood way to completely rewrite hsc from scratch. Python includes XML\nparsing capabilities that we felt could be used as the basis for our\nwork: Instead of writing macros in hsc, we could write XML that could\nbe processed through a simple mapping from XML element types to Python\nclasses. In this approach, XIST generates an extended Document Object Model\n(DOM) on parsing each XML file. Classes defined for each element in the\nfile are instantiated as the DOM is generated, and methods on the\nclasses are used to perform the necessary XML transformations during\npage generation. This allows us to realize our web templates with the\nfull power of an object-oriented scripting language. During implementation, we found that all of the key features of hsc\ncould be supported quite easily in Python: Automatically calculate image sizes? The Python Imaging Library does\nthis with ease. Parse XML files?  There are several XML parsers available in Python. Load and store XML to and from databases?  The Python DB-API is\nstandardized and modules exist for MySQL, Postgres, Interbase, Oracle,\nODBC, Sybase, and others. Fetch XML from the web? Python's urlparse and urllib standard\nlibraries were made for that. Handle Unicode? Python 2.0 fully supports Unicode out of the box. Implementing the first prototype version took a few weeks of spare time\nprogramming and turned out to be very successful. Python provided a\nmuch shorter path from concept to implementation than any of the other\nprogramming languages we have used. And so XIST was born. XIST's development continued in Python and today XIST is the basis of a\nsuccessful company which employs 15 people. XIST is now used in all of\nour web projects at LivingLogic AG. Content Management with Python and JSP On top of XIST, LivingLogic has developed a content management system\ncalled XIST4C (4C means Content, Community, Collaboration and\nCommerce). This system combines the advantages of XIST's abstracted\npage layouts with pre-compilation of page templates to Java Server Pages\nthat are ultimately used to deliver the content to the web. By using XIST tag libraries instead of JSP tag libraries we are able to\nbuild optimized Java Server Pages that run considerably faster than\ntheir JSP tag library counterparts, without any changes to the JSP\nfiles. This performance gain is a result of the fact that the XIST\npreprocessor takes care of many compute-intensive operations,\nthat might require dynamic type introspection, string processing etc.\nand would be executed by the Java tag library code during page load. Fast development combined with low hardware requirements makes XIST4C\nespecially suitable for small and medium sized enterprises. This has\nallowed us to achieve a unique competitive advantage, and to realize\nprojects at much lower cost. Prototyping Java Systems with Python In 2000, LivingLogic was engaged to develop a product for modeling\nbusiness process work flow and to automate business processes. Inspired\nby our earlier successes with XIST, we decided to develop a Python\nprototype. This decision was made even though our contract required us\nto produce a Java-based prototype for delivery to a large group of\ndevelopers that would turn it into a marketable product. The approach of using Python early in prototyping made it possible for\nus to study concepts using working code almost from the start of this\nproject. Although we had to rewrite our Python prototype in Java, the\noverall time spent on prototyping was lower than we have seen in other\nprojects that used only Java. Conclusion Python is easy to learn and use, produces maintainable code, and packs\nenough power to make it a suitable choice for many application domains\nand project sizes. Some of the features that we like best about Python include: Python's extensive standard library and a considerable range of\navailable third party packages support development in many application\ndomains. An unsurprising syntax and the widespread and consistent use of a few\nbasic concepts, like namespaces, help to make Python code readable and\nmaintainable. Extensive and easy to use introspection facilities make Python easy\nto learn interactively by discovering its capabilities, including\ndocumentation, from the command prompt. Python is readily extensible in C or C++, so it is easy to\nincorporate non-Python modules into an application. Python has played an important role in the success of LivingLogic AG,\nand will continue to be the basis for most of our software development\nefforts. About the Authors Before receiving his Ph.D. in 2000, Dr. Walter D\u00f6rwald researched\nforest growth simulations and artificial life at BIT\u00d6K (the Bayreuth\nInstitute of Forest Ecosystem Research), and developed a large C++\nframework for simulation and visualization. In 2000, he co-founded\nLivingLogic AG, and has been responsible for the company's fundamental\ntools and technologies ever since. After getting his Ph.D. in Mathematics in 1990, Dr. Alois\nKastner-Maresch lead the Forest Ecosystem Simulation research team at\nBIT\u00d6K.  In 2000, he co-founded LivingLogic AG, where he is CEO. Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["XIST:  An XML Transformation Engine", "Summary", "Background", "XIST is Born", "Content Management with Python and JSP", "Prototyping Java Systems with Python", "Conclusion", "About the Authors"]}
{"url": "https://www.python.org/success-stories/a-custom-image-viewing-game-for-an-autistic-child/", "title": "A Custom Image Viewing Game for an Autistic Child | Our Success Stories | Python.org", "text": "Notice: While JavaScript is not essential for this website, your interaction with the content will be limited. Please turn JavaScript on for the full experience. Skip to content \u25bc Close Python PSF Docs PyPI Jobs Community \u25b2 The Python Network Donate \u2261 Menu Search This Site GO A A Smaller Larger Reset Socialize LinkedIn Mastodon Chat on IRC Twitter About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event A Custom Image Viewing Game for an Autistic Child Written by Ned Batchelder , Ned Batchelder Introduction My son Nat is autistic.  He likes to look at pictures of familiar\nplaces, things, and people.  We bought a digital camera so we could take\nas many pictures of as many ordinary things as we wanted, without having\nto worry about the cost and bother of film and development.  Nat's\ntastes are difficult to predict, so we might take pictures of a subject\ncertain to please him, only to find that he has no interest in them\nat all.  We wanted to be able to cast a wide net while taking\npictures, to be certain to capture the images that would interest him. Once we had the camera, we took hundreds of pictures, and showed Nat how\nto look through them on the computer using an off-the-shelf image viewer\ncalled ThumbsPlus.  Watching Nat flip through pictures, though, I noticed\nsomething: once he became familiar with the sequence of the pictures, he\nwas clicking on the pictures as if it mattered where he clicked.  The\nimage viewer didn't care: any click on the picture would show the next\npicture.  But if Nat knew that the next picture was of a thing off to\nthe left of the current picture, he would click on the left of the\nimage.  If he knew the next picture was through a door at the right of\nthe picture, he would click on the door.  He's played a number of kid's\nadventure games, such as Pajama Sam, and knew about this style of\nnavigation.  Even in a program that didn't use that navigation style, he\nhad begun using it as if it did. So I thought, why not make an image viewer that worked his way?  Why not\nwrite a program that lets me build picture environments from our life,\nand lets Nat navigate through them in the style he wanted? One of over 1500 images in Natsworld.  The user interface is simply a\nset of directional cursors (near center) Zoom in Choosing Python I had used Python for small scripting projects before, and liked its\nquick-off-the-blocks feel.  It would provide me with a malleable\nenvironment in which to experiment with features, to see what Nat would\nfind interesting.  Although this was an at-home project to be used only\nby my son, it shared issues with larger, supposedly more serious\nprojects: unclear requirements, unpredictable customers, and limited\ndeveloper resources.  The most important concern to me in choosing the\ndevelopment tools was my productivity.  Since this was \"after-hours\"\nwork, my time and attention would be stretched thin, and I wanted to be\nable to focus on the user experience, not build environments, memory\nmanagement, and the like. I looked for existing software, and found lots of interesting examples\nat pygame (www.pygame.org).  Pygame provided all the functions I'd need\nfor image manipulation and display management, and there were a few\nexisting projects there that provided useful examples.  Pyzzle almost\nprovided what I needed, but wasn't as well-organized internally as I\nwould have liked to be able to quickly experiment with new features. Implementation Using the existing examples to help guide my pygame use, I created a new\nframework for my program.  My program, which I named simply \"Nat's\nWorld\", would provide a virtual world for exploration.  It would work\nthe way Nat expected it to, providing a simple exploration environment\nsimilar to games like Myst; clicking on the left of the screen would\nturn you left, clicking center would move you forward, and so forth. At its simplest, the entire environment was simply a set of nodes, each\nof which had an image to display, and a list of other connected nodes\nto navigate to. One physical location in the world is represented by a\nnumber of nodes, one for each direction to face. These nodes together\nare called a \"spot\". Over time, this model was extended to add features\nto the environment, but this simple model got me off the ground. Python\ngave me a clean object-oriented basis for building my Node class, and\npygame provided the primitives for displaying images, creating cursors,\nand collecting input. One of the biggest challenges was deciding among ways to organize the\ndescription of the world. On the one hand, I could have created a\ndescriptive language for the structure of the world, and written an\ninterpreter to read the description and build the in-memory structures\non which the game would run. This would have been a fairly large\neffort, and would have required me to formalize all of the structures\nthat could have appeared in a world. It also would have meant a longer\ndelay before I had something that Nat could actually use. On the other\nhand, I could have simply used Python statements to construct the\nstructures directly. This would have been tedious and error-prone. As a handy middle ground, I used Python statements to build the world,\nbut made heavy use of utility functions and classes to provide\nshort-cuts for common structures. For example, my images are all stored\nin directories named by date, and I would have had to enter an image\nfilename for each node.  The ImgShortcut class made this simple.\nDefining the __call__ method allowed me to play with the syntax of\nPython to get the effect I wanted: class ImgShortcut:\n    def __init__(self, fmt):\n        self.fmt = fmt\n\n    def __call__(self, arg):\n        return self.fmt % (arg)\n\nnov4 =  ImgShortcut(r'C:\\img\\vol3\\20011104\\dscf%04d.jpg')\nnov10 = ImgShortcut(r'C:\\img\\vol3\\20011110\\dscf%04d.jpg')\n\n>>> print nov4(17)\nc:\\img\\vol3\\20011104\\dscf0017.jpg As another example, many spots in the world shared the same four-node\nstructure: one for the north view, one for the west view, and so on.\nUsing Python's keyword argument syntax, I was able to write a function to\nbuild this common spot type: def nesw(name, **data):\n    \"\"\"\n    Make four nodes for n, e, w, s from a location.\n    Keys:\n        images: ni, ei, wi, si.\n        destinations: n, e, w, s.\n    \"\"\"\n    # (code omitted) The first argument is the base name for the new nodes (the node names\nare made by appending \":n\", \":w\", etc).  The remaining arguments are\nspecified by keyword: ni is the image name for the north node, n is the\nnode to the north; wi is the image for the west node, w is the node to\nthe west, and so on.  Now I can make a spot with a simple short-hand\nsyntax: nesw('front43',\n    ni = nov4(17),\n    ei = nov4(18),   e = 'allerton_hawthorne:e',\n    si = nov10(381), s = 'hall:s',\n    wi = nov4(16),   w = 'markliesl:w'\n) Because of the keyword syntax, I can omit arguments that don't apply for\nthe particular spot.  Now I have an almost declarative syntax that is\nhandy for creating common structures, but without having to write an\ninterpreter for a new mini-language.  And if I have an unusual case that\nneeds full Python, it is available to me. The world and the program to support it grew in parallel.  As I came up\nwith new ideas for structures for spots, I would write new utility\nfunctions like nesw() to create them easily.  I could watch Nat play the\ngame, see what he wanted it to do, and add features quickly. Many of\nPython's features (interpreted code, object orientation, garbage\ncollection, lists and dictionaries) supported this rapid turn-around. The Node class was extended and subclassed to create new types of\nnodes. For example, I added a MenuNode subclass to handle on-screen\nmenus of destinations. This allowed clicking on the car, then choosing\nwhere you want to drive. Transitions between nodes were added to make\nthe effect more pleasing. Clicking on the stereo produced a menu of\nsongs to play (via pygame, of course). Results At this point, the total size of the source is about 1400 lines of code,\nplus 1300 lines describing the world, which is currently over 1500\nnodes. When I show Nat's World to friends, they always talk about how great it\nwould be if I could make something like it possible for other people.\nI've thought about writing a WorldBuilder application. It would let a\nnon-technical person use a GUI to browse images, and connect them into\na world of nodes. It would be a nice project to build, and an even\nnicer one to have since I could use it myself to extend Nat's World. I\ndon't know if I'll ever have the time and focus to build such a thing\nin my spare time, but if I did, I know Python would be the tool for the\njob. About the Author Ned Batchelder is a software engineer from Brookline, MA. His wife and\nthree boys all love playing Nat's World. His web site is\nhttps://www.nedbatchelder.com. Success stories home Arts Business Data Science Education Engineering Government Scientific Software Development Submit Yours! \u25b2 Back to Top About Applications Quotes Getting Started Help Python Brochure Downloads All releases Source code Windows macOS Other Platforms License Alternative Implementations Documentation Docs Audio/Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Python Essays Community Diversity Mailing Lists IRC Forums PSF Annual Impact Report Python Conferences Special Interest Groups Python Logo Python Wiki Code of Conduct Community Awards Get Involved Shared Stories Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News PSF Newsletter PSF News PyCon US News News from the Community Events Python Events User Group Events Python Events Archive User Group Events Archive Submit an Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Report a Security Issue \u25b2 Back to Top Help & General Contact Diversity Initiatives Submit Website Bug Status Copyright \u00a92001-2025. Python Software Foundation Legal Statements Privacy Notice", "meta_description": "The official home of the Python Programming Language", "meta_keywords": "Python programming language object oriented web free open source software license documentation download community", "headers": ["A Custom Image Viewing Game for an Autistic Child", "Introduction", "Choosing Python", "Implementation", "Results", "About the Author"]}
